CREATE OR REPLACE FUNCTION betwnstr (
   string_in      IN   VARCHAR2
 , start_in       IN   PLS_INTEGER
 , end_in         IN   PLS_INTEGER
 , inclusive_in   IN   BOOLEAN := TRUE
)
   RETURN VARCHAR2
/*
Overview: Return the string between start and end locations.
          A variation on SUBSTR useful for string parsing,
          it encapsulates the "end - start + 1" necessary
          to compute the number of characters between start
          and end.
          
          abc,defgh,ijkl
             ^     ^
             4     10   --> length (,defgh,) = 10 - 4 + 1 = 7
          
Author:   Steven Feuerstein 

Requirements:
          * Treat a 0 start value as a 1 (like SUBSTR)
          * End > length of string -> get rest of string
          * Neg start and end retrieve substring from end of string
          * Null for any input causes return of NULL   
          * User chooses whether or not to include the endpoints      
*/
IS
   c_last CONSTANT PLS_INTEGER := LENGTH ( string_in );
   l_start PLS_INTEGER;
   l_numchars PLS_INTEGER
                       := LEAST ( ABS ( end_in ), c_last ) - ABS ( start_in )
                          + 1;
BEGIN
   IF    string_in IS NULL
      OR ( start_in < 0 AND end_in > 0 )
      OR ( start_in > 0 AND end_in < 0 )
      OR ( start_in < 0 AND end_in > start_in )
      OR ( start_in > 0 AND end_in < start_in )
   THEN
      RETURN NULL;
   ELSE
      IF start_in < 0
      THEN
         l_start := GREATEST ( end_in, -1 * LENGTH ( string_in ));
      ELSIF start_in = 0
      THEN
         l_start := 1;
         l_numchars := ABS ( end_in ) - ABS ( l_start ) + 1;
      ELSE
         l_start := start_in;
      END IF;

      IF NOT NVL ( inclusive_in, FALSE )
      THEN
         l_start := l_start + 1;
         l_numchars := l_numchars - 2;
      END IF;

      RETURN ( SUBSTR ( string_in, l_start, l_numchars ));
   END IF;
END;
/
