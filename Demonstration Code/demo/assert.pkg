CREATE OR REPLACE PACKAGE assert
/*
   Assertion Package
     Provides a set of procedures you can use to *assert*
     that a required condition is met. If not, an 
     error is raised, stopping execution of the block.
   
   Author: Steven Feuerstein, steven@stevenfeuerstein.com
   
   You have permission to use and alter this code
   without any restrictions.
   
   Example:
   
PROCEDURE calc_totals (
   dept_in   IN   INTEGER,
   date_in   IN   DATE
)
IS 
   bad_date   EXCEPTION;
BEGIN
   assert.is_null (dept_in, 'Department ID');
   
   assert.inrange (
      date_in,
      ADD_MONTHS (SYSDATE, -60),
      SYSDATE
   );

   -- Everything's fine. Code in confidence...

   ...
END;   
   
*/   
IS
   PROCEDURE assert (
      condition_in IN BOOLEAN
    , msg_in IN VARCHAR2
    , display_call_stack_in IN BOOLEAN DEFAULT FALSE
    , null_means_failure_in IN BOOLEAN DEFAULT TRUE
   ); 

   PROCEDURE is_null (
      val_in IN VARCHAR2
    , msg_in IN VARCHAR2
    , display_call_stack_in IN BOOLEAN DEFAULT FALSE
   );

   PROCEDURE is_not_null (
      val_in IN VARCHAR2
    , msg_in IN VARCHAR2
    , display_call_stack_in IN BOOLEAN DEFAULT FALSE
   );

   PROCEDURE is_true (
      condition_in IN BOOLEAN
    , msg_in IN VARCHAR2
    , display_call_stack_in IN BOOLEAN DEFAULT FALSE
   );

   PROCEDURE is_false (
      condition_in IN BOOLEAN
    , msg_in IN VARCHAR2
    , display_call_stack_in IN BOOLEAN DEFAULT FALSE
   );

   PROCEDURE is_in_range (
      date_in IN DATE
    , low_date_in IN DATE
    , high_date_in IN DATE
    , msg_in IN VARCHAR2
    , display_call_stack_in IN BOOLEAN DEFAULT FALSE
   );
END assert;
/

CREATE OR REPLACE PACKAGE BODY assert
IS
   PROCEDURE assert (
      condition_in IN BOOLEAN
    , msg_in IN VARCHAR2
    , display_call_stack_in IN BOOLEAN DEFAULT FALSE
    , null_means_failure_in IN BOOLEAN DEFAULT TRUE
   )
   IS
   BEGIN
      IF NOT condition_in
         OR (null_means_failure_in AND condition_in IS NULL)
      THEN
         IF display_call_stack_in
         THEN
            DBMS_OUTPUT.put_line ('ASSERTION VIOLATION! ' || msg_in);
            DBMS_OUTPUT.put_line ('Path taken to assertion violation:');
            DBMS_OUTPUT.put_line (DBMS_UTILITY.format_call_stack);
         END IF;

         raise_application_error (-20000, 'ASSERTION VIOLATION! ' || msg_in);
      END IF;
   END;

   PROCEDURE is_null (
      val_in IN VARCHAR2
    , msg_in IN VARCHAR2
    , display_call_stack_in IN BOOLEAN DEFAULT FALSE
   )
   IS
   BEGIN
      assert (val_in IS NULL
               , msg_in
               , display_call_stack_in
               , null_means_failure_in      => FALSE
                );
   END is_null;

   PROCEDURE is_not_null (
      val_in IN VARCHAR2
    , msg_in IN VARCHAR2
    , display_call_stack_in IN BOOLEAN DEFAULT FALSE
   )
   IS
   BEGIN
      assert (val_in IS NOT NULL, msg_in, display_call_stack_in);
   END is_not_null;

   PROCEDURE is_true (
      condition_in IN BOOLEAN
    , msg_in IN VARCHAR2
    , display_call_stack_in IN BOOLEAN DEFAULT FALSE
   )
   IS
   BEGIN
      assert (condition_in, msg_in, display_call_stack_in);
   END is_true;

   PROCEDURE is_false (
      condition_in IN BOOLEAN
    , msg_in IN VARCHAR2
    , display_call_stack_in IN BOOLEAN DEFAULT FALSE
   )
   IS
   BEGIN
      assert (NOT condition_in, msg_in, display_call_stack_in);
   END is_false;

   PROCEDURE is_in_range (
      date_in IN DATE
    , low_date_in IN DATE
    , high_date_in IN DATE
    , msg_in IN VARCHAR2
    , display_call_stack_in IN BOOLEAN DEFAULT FALSE
   )
   IS
   BEGIN
      assert (TRUNC (date_in) BETWEEN TRUNC (low_date_in)
                                     AND TRUNC (high_date_in)
               , msg_in
               , display_call_stack_in
                );
   END is_in_range;
END assert;
/