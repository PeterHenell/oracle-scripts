CREATE OR REPLACE PACKAGE UT_EMAIL_ADDRESS_IS_VALID AUTHID CURRENT_USER
/*
| Unit Test Package for EMAIL_ADDRESS_IS_VALID
|
| Generated by Qute -- the Quick Unit Test Engine (www.unit-test.com)
| Generated on 2006-02-25 13:28:45
|
| This package may be run from within any PL/SQL execution environment.
| by executing the following statements:
|
|    SET SERVEROUTPUT ON FORMAT WRAPPED SIZE 1000000
|
|    BEGIN
|       EMAIL_ADDRESS_IS_VALID.run_all_tests;
|    END;
|    /
|
| Results will be displayed via DBMS_OUTPUT. This package requires the
| presence of the qu_assert package. If you do not have Qute installed,
| you can download just the qu_assert package from:
|
|      http://www.unit-test.com/download/qu_assert.zip
|
| Then use the following statements to install all needed objects
| (assuming the program you want to test is already installed):
|
|    -- Assertion package
|    @qu_assert.pks
|    @qu_assert.pkb
|
|    -- Test code 
|    @UT_EMAIL_ADDRESS_IS_VALID.pkg
|
*/
IS
   PROCEDURE UT_setup;
   PROCEDURE UT_teardown;
    
   PROCEDURE UT_EMAIL_ADDRESS_IS_VALID;
   /*
      Test cases defined for EMAIL_ADDRESS_IS_VALID:
      
         Angle brackets around address (INACTIVE)
         At symbol in wrong location (ACTIVE)
         Double quotes around name (INACTIVE)
         IP address for domain (INACTIVE)
         Invalid IP address (ACTIVE)
         Invalid characters (ACTIVE)
         More than one at symbol (ACTIVE)
         No at symbol (ACTIVE)
         Normal email address (ACTIVE)
         Null value (ACTIVE)
         Numbers for name and domain (ACTIVE)
         Steven's email address (ACTIVE)
   */
   PROCEDURE run_all_tests;
END UT_EMAIL_ADDRESS_IS_VALID;

/


CREATE OR REPLACE PACKAGE BODY UT_EMAIL_ADDRESS_IS_VALID
/*
| Unit Test Package for EMAIL_ADDRESS_IS_VALID
|
| Generated by Qute -- the Quick Unit Test Engine (www.unit-test.com)
| Generated on 2006-02-25 13:28:45
|
| This package may be run from within any PL/SQL execution environment.
| by executing the following statements:
|
|    SET SERVEROUTPUT ON FORMAT WRAPPED SIZE 1000000
|
|    BEGIN
|       EMAIL_ADDRESS_IS_VALID.run_all_tests;
|    END;
|    /
|
| Results will be displayed via DBMS_OUTPUT. This package requires the
| presence of the qu_assert package. If you do not have Qute installed,
| you can download just the qu_assert package from:
|
|      http://www.unit-test.com/download/qu_assert.zip
|
| Then use the following statements to install all needed objects
| (assuming the program you want to test is already installed):
|
|    -- Assertion package
|    @qu_assert.pks
|    @qu_assert.pkb
|
|    -- Test code 
|    @UT_EMAIL_ADDRESS_IS_VALID.pkg
|
*/
IS
FUNCTION qut#error_info RETURN VARCHAR2 IS
   l_return VARCHAR2(32767);
   l_stack VARCHAR2(32767);
BEGIN
   l_return := DBMS_UTILITY.FORMAT_ERROR_STACK;
   BEGIN
      EXECUTE IMMEDIATE 
        'BEGIN :val := ''PL/SQL Error Backtrace: '' 
             || CHR(10) || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE; END;'
      USING OUT l_stack;
   EXCEPTION
      WHEN OTHERS THEN l_stack := DBMS_UTILITY.FORMAT_CALL_STACK;
   END;
   RETURN l_return || CHR(10) || l_stack;
END qut#error_info;
 
   PROCEDURE UT_setup IS
   BEGIN
      NULL; -- Included to ensure that this procedure will compile if empty.
   END UT_setup;
    
   PROCEDURE UT_teardown IS
   BEGIN
      NULL; -- Included to ensure that this procedure will compile if empty.
   END UT_teardown;
    
   PROCEDURE UT_EMAIL_ADDRESS_IS_VALID
   -- Unit test procedure for EMAIL_ADDRESS_IS_VALID
   IS
      PROCEDURE At_symbol_in_wrong_location
      IS
      -- Return value of function
      "Value From Function" BOOLEAN;
      "Expected Value From Function" BOOLEAN;
         PROCEDURE setup IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EMAIL_ADDRESS_IS_VALID(
                  ADDRESS_IN => '@john.doe.com'
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{D331E30A-28C0-474A-B8AB-3071CEE4C4D1}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{D331E30A-28C0-474A-B8AB-3071CEE4C4D1}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => FALSE
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "At symbol in wrong location"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END At_symbol_in_wrong_location;
       
      PROCEDURE Invalid_IP_address
      IS
      -- Return value of function
      "Value From Function" BOOLEAN;
      "Expected Value From Function" BOOLEAN;
         PROCEDURE setup IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EMAIL_ADDRESS_IS_VALID(
                  ADDRESS_IN => 'john-doe@999.999.999.999'
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{B8A0D187-2653-4D47-887A-F25FE5B05D52}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{B8A0D187-2653-4D47-887A-F25FE5B05D52}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => FALSE
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "Invalid IP address"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END Invalid_IP_address;
       
      PROCEDURE Invalid_characters
      IS
      -- Return value of function
      "Value From Function" BOOLEAN;
      "Expected Value From Function" BOOLEAN;
         PROCEDURE setup IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EMAIL_ADDRESS_IS_VALID(
                  ADDRESS_IN => '%^@ac.com'
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{86B2CAA9-FD92-4161-8C57-864B49877EC5}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{86B2CAA9-FD92-4161-8C57-864B49877EC5}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => FALSE
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "Invalid characters"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END Invalid_characters;
       
      PROCEDURE More_than_one_at_symbol
      IS
      -- Return value of function
      "Value From Function" BOOLEAN;
      "Expected Value From Function" BOOLEAN;
         PROCEDURE setup IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EMAIL_ADDRESS_IS_VALID(
                  ADDRESS_IN => 'abc@def@com'
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{39FF36C3-69E8-477F-8432-FD4F793717D3}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{39FF36C3-69E8-477F-8432-FD4F793717D3}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => FALSE
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "More than one at symbol"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END More_than_one_at_symbol;
       
      PROCEDURE No_at_symbol
      IS
      -- Return value of function
      "Value From Function" BOOLEAN;
      "Expected Value From Function" BOOLEAN;
         PROCEDURE setup IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EMAIL_ADDRESS_IS_VALID(
                  ADDRESS_IN => 'abc.com'
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{8923E20A-4910-43B7-98BD-FBEAD01508E0}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{8923E20A-4910-43B7-98BD-FBEAD01508E0}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => FALSE
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "No at symbol"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END No_at_symbol;
       
      PROCEDURE Normal_email_address
      IS
      -- Return value of function
      "Value From Function" BOOLEAN;
      "Expected Value From Function" BOOLEAN;
         PROCEDURE setup IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EMAIL_ADDRESS_IS_VALID(
                  ADDRESS_IN => 'abc@def.com'
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{0B981289-8499-463D-965B-149B407DAAA7}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{0B981289-8499-463D-965B-149B407DAAA7}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => TRUE
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "Normal email address"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END Normal_email_address;
       
      PROCEDURE Null_value
      IS
      -- Return value of function
      "Value From Function" BOOLEAN;
      "Expected Value From Function" BOOLEAN;
         PROCEDURE setup IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EMAIL_ADDRESS_IS_VALID(
                  ADDRESS_IN => NULL
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{CEC5F134-48C0-4031-8734-883730399492}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{CEC5F134-48C0-4031-8734-883730399492}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => FALSE
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "Null value"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END Null_value;
       
      PROCEDURE Numbers_for_name_and_domain
      IS
      -- Return value of function
      "Value From Function" BOOLEAN;
      "Expected Value From Function" BOOLEAN;
         PROCEDURE setup IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EMAIL_ADDRESS_IS_VALID(
                  ADDRESS_IN => '123@456.org'
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{BF5F1427-63D3-47A0-9364-399D0F94283B}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{BF5F1427-63D3-47A0-9364-399D0F94283B}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => TRUE
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "Numbers for name and domain"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END Numbers_for_name_and_domain;
       
      PROCEDURE Steven_s_email_address
      IS
      -- Return value of function
      "Value From Function" BOOLEAN;
      "Expected Value From Function" BOOLEAN;
         PROCEDURE setup IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EMAIL_ADDRESS_IS_VALID(
                  ADDRESS_IN => 'steven@stevenfeuerstein.com'
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{8ED8112D-DB40-4FE6-A3F9-6A4100C8971D}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{8ED8112D-DB40-4FE6-A3F9-6A4100C8971D}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => TRUE
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "Steven''s email address"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END Steven_s_email_address;
       
   BEGIN
      DBMS_OUTPUT.PUT_LINE ('QUTE> Testing "EMAIL_ADDRESS_IS_VALID"');
      At_symbol_in_wrong_location;
      Invalid_IP_address;
      Invalid_characters;
      More_than_one_at_symbol;
      No_at_symbol;
      Normal_email_address;
      Null_value;
      Numbers_for_name_and_domain;
      Steven_s_email_address;
       
      NULL; -- Included to ensure that this procedure will compile if empty.
   END UT_EMAIL_ADDRESS_IS_VALID;
    
   PROCEDURE run_all_tests IS BEGIN
      qu_assert.set_current_harness_info (NULL, TRUE);
      UT_setup;
      UT_EMAIL_ADDRESS_IS_VALID;
      UT_teardown;
      qu_assert.set_current_harness_info (NULL, NULL);
   END run_all_tests;
END UT_EMAIL_ADDRESS_IS_VALID;

/
