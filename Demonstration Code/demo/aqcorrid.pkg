@@aq.pkg

/* Define the layaway queue. */
CREATE TYPE layaway_t IS OBJECT  
   (animal VARCHAR2(30),
    held_for VARCHAR2(100),
    balance NUMBER
   );
/
CREATE OR REPLACE PACKAGE layaway
IS
   FUNCTION one_animal (customer_in IN VARCHAR2, animal_in IN VARCHAR2) 
      RETURN layaway_t;

   PROCEDURE make_payment 
      (customer_in IN VARCHAR2, 
       animal_in IN VARCHAR2, 
       payment_in IN NUMBER);

   PROCEDURE display 
      (customer_in IN VARCHAR2 := '%', animal_in IN VARCHAR2 := '%');

END layaway;
/ 
CREATE OR REPLACE PACKAGE BODY layaway
IS
   c_qtable CONSTANT aq.name_type := 'layaway_qtable';
   c_queue CONSTANT aq.name_type := 'layaway_queue';
   
   g_msgid aq.msgid_type;

   /* A function to construct the correlation identifier based on the key. */
   FUNCTION corr_id  (customer_in IN VARCHAR2, animal_in IN VARCHAR2) 
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN UPPER (customer_in || '.' || animal_in);
   END;

   FUNCTION one_animal (customer_in IN VARCHAR2, animal_in IN VARCHAR2) 
      RETURN layaway_t
   IS
      queueopts DBMS_AQ.DEQUEUE_OPTIONS_T;
      msgprops DBMS_AQ.MESSAGE_PROPERTIES_T;

      retval layaway_t;
   BEGIN
      /* Take immediate effect; no commit required. */
      queueopts.wait := DBMS_AQ.NO_WAIT;
      queueopts.visibility := DBMS_AQ.IMMEDIATE;

      /* Retrieve only the message for this correlation identifier. */
      queueopts.correlation := corr_id (customer_in, animal_in);

      /* Reset the navigation location to the first message. */
      queueopts.navigation := DBMS_AQ.FIRST_MESSAGE;

      /* Locate the entry by correlation identifier and return the object. */
      DBMS_AQ.DEQUEUE (c_queue, queueopts, msgprops, retval, g_msgid);

      RETURN retval;

   EXCEPTION
      WHEN aq.dequeue_timeout
      THEN
         /* Return a NULL object. */
         RETURN layaway_t (NULL, NULL, 0);
   END;

   PROCEDURE make_payment 
      (customer_in IN VARCHAR2, animal_in IN VARCHAR2, payment_in IN NUMBER)
   IS
      queueopts DBMS_AQ.ENQUEUE_OPTIONS_T;
      msgprops DBMS_AQ.MESSAGE_PROPERTIES_T;
      layaway_obj layaway_t;
   BEGIN
      /* Locate this entry in the queue by calling the function. 
         If found, decrement the balance and reinsert into the queue. 
         If not found, enqueue a new message to the queue. For example 
         purposes, the price of all my bean-bag animals is $49.95. */

      layaway_obj := one_animal (customer_in, animal_in);

      /* Adjust the balance. We should check for 0 or negative values,
         and not requeue if finished. I will leave that to the reader. */

      IF layaway_obj.animal IS NOT NULL
      THEN
         layaway_obj.balance := layaway_obj.balance - payment_in;
      ELSE
         /* Construct new object for enqueue, setting up initial balance. */
         layaway_obj := layaway_t (animal_in, customer_in, 49.95 - payment_in);
      END IF;

      /* Don't wait for a commit. */
      queueopts.visibility := DBMS_AQ.IMMEDIATE;

      /* Set the correlation identifier for this message. */
      msgprops.correlation := corr_id (customer_in, animal_in);

      DBMS_AQ.ENQUEUE (c_queue, queueopts, msgprops, layaway_obj, g_msgid);
   END;

   PROCEDURE display 
      (customer_in IN VARCHAR2 := '%', animal_in IN VARCHAR2 := '%')
   IS
      obj layaway_t;
      v_msgid aq.msgid_type;

      queueopts DBMS_AQ.DEQUEUE_OPTIONS_T;
      msgprops DBMS_AQ.MESSAGE_PROPERTIES_T;

      first_dequeue BOOLEAN := TRUE;

   BEGIN
      LOOP
         /* Non-destructive dequeue */
         queueopts.dequeue_mode := DBMS_AQ.BROWSE;
         queueopts.wait := DBMS_AQ.NO_WAIT;
         queueopts.visibility := DBMS_AQ.IMMEDIATE;

         DBMS_AQ.DEQUEUE (queue_name => c_queue,
            dequeue_options => queueopts,
            message_properties => msgprops,
            payload => obj,
            msgid => v_msgid);

         /* Conditional logic: do I want to display this one? */
         IF obj.held_for LIKE UPPER (customer_in) AND
            obj.animal LIKE UPPER (animal_in)
         THEN        
            IF first_dequeue
            THEN
               DBMS_OUTPUT.PUT_LINE (
                  RPAD ('Customer', 21) ||
                  RPAD ('Animal', 21) ||
                  'Balance');
               first_dequeue := FALSE;
            END IF;

            DBMS_OUTPUT.PUT_LINE (
               RPAD (obj.held_for, 21) ||
               RPAD (obj.animal, 21) ||
               TO_CHAR (obj.balance, '99.99'));
         END IF;
      END LOOP;

   EXCEPTION
      WHEN aq.dequeue_timeout
      THEN
         NULL;
   END;

BEGIN
   /* Create the queue table and queue as necessary. */
   aq.create_queue (c_qtable, 'layaway_t', c_queue);
END layaway;
/ 

