CREATE OR REPLACE PACKAGE BODY employee_cp
/*
| Generated by or retrieved from Qnxo - DO NOT MODIFY!
| Qnxo - "Get it right, do it fast" - www.qnxo.com
| Qnxo Universal ID: {657BD35E-2E48-4CD4-B14E-41420B8433B3}
| Created On: April 21, 2006 20:21:21
| Created By: QNXO_DEMONSTRATION
*/
IS
   e_null_column_value          EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_null_column_value, -1400);
   --
   e_existing_fky_reference     EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_existing_fky_reference, -2266);
   --
   e_check_constraint_failure   EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_check_constraint_failure, -2290);
   --
   e_no_parent_key              EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_no_parent_key, -2291);
   --
   e_child_record_found         EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_child_record_found, -2292);
   --
   e_forall_error               EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_forall_error, -24381);
   --
   -- Defined for backward compatibilty.
   e_integ_constraint_failure   EXCEPTION;
   PRAGMA EXCEPTION_INIT (e_integ_constraint_failure, -2291);

   -- Private utilities
   PROCEDURE get_constraint_info (
      owner_out   OUT   all_constraints.owner%TYPE
    , name_out    OUT   all_constraints.constraint_name%TYPE
   )
   IS
      l_errm    VARCHAR2 (2000) := DBMS_UTILITY.format_error_stack;
      dotloc    PLS_INTEGER;
      leftloc   PLS_INTEGER;
   BEGIN
      dotloc := INSTR (l_errm, '.');
      leftloc := INSTR (l_errm, '(');
      owner_out := SUBSTR (l_errm, leftloc + 1, dotloc - leftloc - 1);
      name_out :=
                 SUBSTR (l_errm, dotloc + 1, INSTR (l_errm, ')') - dotloc - 1);
   END get_constraint_info;

   -- Public programs
   PROCEDURE ins (
      employee_id_in      IN   employee_tp.employee_id_t
    , last_name_in        IN   employee_tp.last_name_t DEFAULT NULL
    , first_name_in       IN   employee_tp.first_name_t DEFAULT NULL
    , middle_initial_in   IN   employee_tp.middle_initial_t DEFAULT NULL
    , job_id_in           IN   employee_tp.job_id_t DEFAULT NULL
    , manager_id_in       IN   employee_tp.manager_id_t DEFAULT NULL
    , hire_date_in        IN   employee_tp.hire_date_t DEFAULT SYSDATE
    , salary_in           IN   employee_tp.salary_t DEFAULT NULL
    , commission_in       IN   employee_tp.commission_t DEFAULT NULL
    , department_id_in    IN   employee_tp.department_id_t DEFAULT NULL
    , empno_in            IN   employee_tp.empno_t DEFAULT NULL
    , ename_in            IN   employee_tp.ename_t DEFAULT NULL
    , created_by_in       IN   employee_tp.created_by_t DEFAULT USER
    , created_on_in       IN   employee_tp.created_on_t DEFAULT SYSDATE
    , changed_by_in       IN   employee_tp.changed_by_t DEFAULT USER
    , changed_on_in       IN   employee_tp.changed_on_t DEFAULT SYSDATE
    , handle_error_in     IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in => 'ins');
      END IF;

      INSERT INTO employee
                  (employee_id
                 , last_name
                 , first_name
                 , middle_initial
                 , job_id
                 , manager_id
                 , hire_date
                 , salary
                 , commission
                 , department_id
                 , empno
                 , ename
                 , created_by
                 , created_on
                 , changed_by
                 , changed_on
                  )
           VALUES (employee_id_in
                 , last_name_in
                 , first_name_in
                 , middle_initial_in
                 , job_id_in
                 , manager_id_in
                 , hire_date_in
                 , salary_in
                 , commission_in
                 , department_id_in
                 , empno_in
                 , ename_in
                 , created_by_in
                 , created_on_in
                 , changed_by_in
                 , changed_on_in
                  );

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner             all_constraints.owner%TYPE;
               l_name              all_constraints.constraint_name%TYPE;
               l_err_instance_id   PLS_INTEGER;
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF FALSE
               THEN
                  NULL;   -- Placeholder in case no unique indexes
               ELSIF l_name = 'I_EMPLOYEE_NAME'
               THEN
                  q$error_manager.register_error
                     (error_name_in            => 'DUPLICATE-VALUE'
                    , err_instance_id_out      => l_err_instance_id
                    , text_in                  => 'Violation of unique index "I_EMPLOYEE_NAME"'
                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'OWNER'
                                    , value_in                => l_owner
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'CONSTRAINT_NAME'
                                    , value_in                => l_name
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'TABLE_NAME'
                                    , value_in                => 'EMPLOYEE'
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'LAST_NAME'
                                    , value_in                => last_name_in
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'FIRST_NAME'
                                    , value_in                => first_name_in
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'MIDDLE_INITIAL'
                                    , value_in                => middle_initial_in
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.raise_error_instance
                                      (err_instance_id_in      => l_err_instance_id);
               ELSE
                  q$error_manager.raise_error
                                         (error_name_in      => 'DUPLICATE-VALUE'
                                        , name1_in           => 'OWNER'
                                        , value1_in          => l_owner
                                        , name2_in           => 'CONSTRAINT_NAME'
                                        , value2_in          => l_name
                                        , name3_in           => 'TABLE_NAME'
                                        , value3_in          => 'EMPLOYEE'
                                         );
               END IF;
            END;
         END IF;
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );

               IF l_name = 'EMP_DEPT_FK'
               THEN
                  -- Add a context value for each column
                  q$error_manager.add_context (err_instance_id_in      => l_id
                                             , NAME_IN                 => 'DEPARTMENT_ID'
                                             , value_in                => department_id_in
                                              );
               END IF;

               IF l_name = 'EMP_JOB_FK'
               THEN
                  -- Add a context value for each column
                  q$error_manager.add_context (err_instance_id_in      => l_id
                                             , NAME_IN                 => 'JOB_ID'
                                             , value_in                => job_id_in
                                              );
               END IF;

               IF l_name = 'EMP_MGR_FK'
               THEN
                  -- Add a context value for each column
                  q$error_manager.add_context (err_instance_id_in      => l_id
                                             , NAME_IN                 => 'MANAGER_ID'
                                             , value_in                => manager_id_in
                                              );
               END IF;

               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
      WHEN e_null_column_value
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               v_errm      VARCHAR2 (2000) := DBMS_UTILITY.format_error_stack;
               dot1loc     INTEGER;
               dot2loc     INTEGER;
               parenloc    INTEGER;
               c_owner     all_constraints.owner%TYPE;
               c_tabname   all_tables.table_name%TYPE;
               c_colname   all_tab_columns.column_name%TYPE;
            BEGIN
               dot1loc := INSTR (v_errm, '.', 1, 1);
               dot2loc := INSTR (v_errm, '.', 1, 2);
               parenloc := INSTR (v_errm, '(');
               c_owner :=
                        SUBSTR (v_errm, parenloc + 1, dot1loc - parenloc - 1);
               c_tabname :=
                          SUBSTR (v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
               c_colname :=
                  SUBSTR (v_errm
                        , dot2loc + 1
                        , INSTR (v_errm, ')') - dot2loc - 1
                         );
               q$error_manager.raise_error
                                    (error_name_in      => 'COLUMN-CANNOT-BE-NULL'
                                   , name1_in           => 'OWNER'
                                   , value1_in          => c_owner
                                   , name2_in           => 'TABLE_NAME'
                                   , value2_in          => c_tabname
                                   , name3_in           => 'COLUMN_NAME'
                                   , value3_in          => c_colname
                                    );
            END;
         END IF;
   END ins;

   PROCEDURE ins (
      rec_in            IN   employee_tp.employee_rt
    , gen_pky_in        IN   BOOLEAN DEFAULT FALSE
    , sequence_in       IN   VARCHAR2 := NULL
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
      l_rec   employee_tp.employee_rt := rec_in;
   BEGIN
      IF gen_pky_in
      THEN
         l_rec.employee_id := NEXT_KEY (sequence_in);
      END IF;

      ins (employee_id_in         => l_rec.employee_id
         , last_name_in           => l_rec.last_name
         , first_name_in          => l_rec.first_name
         , middle_initial_in      => l_rec.middle_initial
         , job_id_in              => l_rec.job_id
         , manager_id_in          => l_rec.manager_id
         , hire_date_in           => l_rec.hire_date
         , salary_in              => l_rec.salary
         , commission_in          => l_rec.commission
         , department_id_in       => l_rec.department_id
         , empno_in               => l_rec.empno
         , ename_in               => l_rec.ename
         , created_by_in          => l_rec.created_by
         , created_on_in          => l_rec.created_on
         , changed_by_in          => l_rec.changed_by
         , changed_on_in          => l_rec.changed_on
         , handle_error_in        => handle_error_in
          );
   END ins;

   FUNCTION NEXT_KEY (sequence_in IN VARCHAR2 := NULL)
      RETURN employee_tp.employee_id_t
   IS
      retval   employee_tp.employee_id_t;
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in => 'next_key');
      END IF;

      IF sequence_in IS NULL
      THEN
         SELECT employee_seq.NEXTVAL
           INTO retval
           FROM DUAL;
      ELSE
         EXECUTE IMMEDIATE 'SELECT ' || sequence_in || '.NEXTVAL FROM dual'
                      INTO retval;
      END IF;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;

      RETURN retval;
   EXCEPTION
      WHEN OTHERS
      THEN
         q$error_manager.start_exception_handling;
         q$error_manager.raise_error
                             (error_name_in      => 'SEQUENCE-GENERATION-FAILURE'
                            , name1_in           => 'SEQUENCE'
                            , value1_in          => NVL (sequence_in
                                                       , 'employee_seq'
                                                        )
                             );
   END NEXT_KEY;

   PROCEDURE ins (
      last_name_in        IN       employee_tp.last_name_t DEFAULT NULL
    , first_name_in       IN       employee_tp.first_name_t DEFAULT NULL
    , middle_initial_in   IN       employee_tp.middle_initial_t DEFAULT NULL
    , job_id_in           IN       employee_tp.job_id_t DEFAULT NULL
    , manager_id_in       IN       employee_tp.manager_id_t DEFAULT NULL
    , hire_date_in        IN       employee_tp.hire_date_t DEFAULT SYSDATE
    , salary_in           IN       employee_tp.salary_t DEFAULT NULL
    , commission_in       IN       employee_tp.commission_t DEFAULT NULL
    , department_id_in    IN       employee_tp.department_id_t DEFAULT NULL
    , empno_in            IN       employee_tp.empno_t DEFAULT NULL
    , ename_in            IN       employee_tp.ename_t DEFAULT NULL
    , created_by_in       IN       employee_tp.created_by_t DEFAULT USER
    , created_on_in       IN       employee_tp.created_on_t DEFAULT SYSDATE
    , changed_by_in       IN       employee_tp.changed_by_t DEFAULT USER
    , changed_on_in       IN       employee_tp.changed_on_t DEFAULT SYSDATE
    , employee_id_out     IN OUT   employee_tp.employee_id_t
    , handle_error_in     IN       BOOLEAN := TRUE
   )
   IS
      l_pky   employee_tp.employee_id_t := NEXT_KEY;
   BEGIN
      ins (employee_id_in         => l_pky
         , last_name_in           => last_name_in
         , first_name_in          => first_name_in
         , middle_initial_in      => middle_initial_in
         , job_id_in              => job_id_in
         , manager_id_in          => manager_id_in
         , hire_date_in           => hire_date_in
         , salary_in              => salary_in
         , commission_in          => commission_in
         , department_id_in       => department_id_in
         , empno_in               => empno_in
         , ename_in               => ename_in
         , created_by_in          => created_by_in
         , created_on_in          => created_on_in
         , changed_by_in          => changed_by_in
         , changed_on_in          => changed_on_in
         , handle_error_in        => handle_error_in
          );
      employee_id_out := l_pky;
   END ins;

   FUNCTION ins (
      last_name_in        IN   employee_tp.last_name_t DEFAULT NULL
    , first_name_in       IN   employee_tp.first_name_t DEFAULT NULL
    , middle_initial_in   IN   employee_tp.middle_initial_t DEFAULT NULL
    , job_id_in           IN   employee_tp.job_id_t DEFAULT NULL
    , manager_id_in       IN   employee_tp.manager_id_t DEFAULT NULL
    , hire_date_in        IN   employee_tp.hire_date_t DEFAULT SYSDATE
    , salary_in           IN   employee_tp.salary_t DEFAULT NULL
    , commission_in       IN   employee_tp.commission_t DEFAULT NULL
    , department_id_in    IN   employee_tp.department_id_t DEFAULT NULL
    , empno_in            IN   employee_tp.empno_t DEFAULT NULL
    , ename_in            IN   employee_tp.ename_t DEFAULT NULL
    , created_by_in       IN   employee_tp.created_by_t DEFAULT USER
    , created_on_in       IN   employee_tp.created_on_t DEFAULT SYSDATE
    , changed_by_in       IN   employee_tp.changed_by_t DEFAULT USER
    , changed_on_in       IN   employee_tp.changed_on_t DEFAULT SYSDATE
    , handle_error_in     IN   BOOLEAN := TRUE
   )
      RETURN employee_tp.employee_id_t
   IS
      l_pky   employee_tp.employee_id_t := NEXT_KEY;
   BEGIN
      ins (employee_id_in         => l_pky
         , last_name_in           => last_name_in
         , first_name_in          => first_name_in
         , middle_initial_in      => middle_initial_in
         , job_id_in              => job_id_in
         , manager_id_in          => manager_id_in
         , hire_date_in           => hire_date_in
         , salary_in              => salary_in
         , commission_in          => commission_in
         , department_id_in       => department_id_in
         , empno_in               => empno_in
         , ename_in               => ename_in
         , created_by_in          => created_by_in
         , created_on_in          => created_on_in
         , changed_by_in          => changed_by_in
         , changed_on_in          => changed_on_in
         , handle_error_in        => handle_error_in
          );
      RETURN l_pky;
   END ins;

   PROCEDURE ins (
      last_name_in        IN   employee_tp.last_name_t DEFAULT NULL
    , first_name_in       IN   employee_tp.first_name_t DEFAULT NULL
    , middle_initial_in   IN   employee_tp.middle_initial_t DEFAULT NULL
    , job_id_in           IN   employee_tp.job_id_t DEFAULT NULL
    , manager_id_in       IN   employee_tp.manager_id_t DEFAULT NULL
    , hire_date_in        IN   employee_tp.hire_date_t DEFAULT SYSDATE
    , salary_in           IN   employee_tp.salary_t DEFAULT NULL
    , commission_in       IN   employee_tp.commission_t DEFAULT NULL
    , department_id_in    IN   employee_tp.department_id_t DEFAULT NULL
    , empno_in            IN   employee_tp.empno_t DEFAULT NULL
    , ename_in            IN   employee_tp.ename_t DEFAULT NULL
    , created_by_in       IN   employee_tp.created_by_t DEFAULT USER
    , created_on_in       IN   employee_tp.created_on_t DEFAULT SYSDATE
    , changed_by_in       IN   employee_tp.changed_by_t DEFAULT USER
    , changed_on_in       IN   employee_tp.changed_on_t DEFAULT SYSDATE
    , handle_error_in     IN   BOOLEAN := TRUE
   )
   IS
      l_pky   employee_tp.employee_id_t := NEXT_KEY;
   BEGIN
      ins (employee_id_in         => l_pky
         , last_name_in           => last_name_in
         , first_name_in          => first_name_in
         , middle_initial_in      => middle_initial_in
         , job_id_in              => job_id_in
         , manager_id_in          => manager_id_in
         , hire_date_in           => hire_date_in
         , salary_in              => salary_in
         , commission_in          => commission_in
         , department_id_in       => department_id_in
         , empno_in               => empno_in
         , ename_in               => ename_in
         , created_by_in          => created_by_in
         , created_on_in          => created_on_in
         , changed_by_in          => changed_by_in
         , changed_on_in          => changed_on_in
         , handle_error_in        => handle_error_in
          );
   END ins;

   PROCEDURE ins (
      rows_in           IN   employee_tp.employee_tc
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in => 'ins');
      END IF;

      IF rows_in.COUNT = 0
      THEN
         NULL;
      ELSE
         FORALL indx IN rows_in.FIRST .. rows_in.LAST SAVE EXCEPTIONS
            INSERT INTO employee
                 VALUES rows_in (indx);
      END IF;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN e_forall_error
      THEN
         -- In Oracle9i and above, SAVE EXCEPTIONS will direct control
         -- here if any error occurs. We can then save all the error
         -- information out to the error instance.
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE

            <<bulk_handler>>
            DECLARE
               l_err_instance_id   qd_err_instance_tp.id_t;
            BEGIN
               -- For each error, write to the log.
               FOR indx IN 1 .. SQL%BULK_EXCEPTIONS.COUNT
               LOOP
                  q$error_manager.register_error
                                   (error_name_in            => 'FORALL-INSERT-FAILURE'
                                  , err_instance_id_out      => l_err_instance_id
                                   );
                  q$error_manager.add_context
                        (err_instance_id_in      => l_err_instance_id
                       , NAME_IN                 => 'BINDING_ROW_' || indx
                       , value_in                => SQL%BULK_EXCEPTIONS (indx).ERROR_INDEX
                       , validate_in             => FALSE
                        );
                  q$error_manager.add_context
                         (err_instance_id_in      => l_err_instance_id
                        , NAME_IN                 => 'ERROR_AT_ROW_' || indx
                        , value_in                => SQL%BULK_EXCEPTIONS (indx).ERROR_CODE
                        , validate_in             => FALSE
                         );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'EMPLOYEE_ID'
                                    , value_in                => rows_in (indx).employee_id
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'LAST_NAME'
                                    , value_in                => rows_in (indx).last_name
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'FIRST_NAME'
                                    , value_in                => rows_in (indx).first_name
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                    (err_instance_id_in      => l_err_instance_id
                                   , NAME_IN                 => 'MIDDLE_INITIAL'
                                   , value_in                => rows_in (indx).middle_initial
                                   , validate_in             => FALSE
                                    );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'JOB_ID'
                                    , value_in                => rows_in (indx).job_id
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'MANAGER_ID'
                                    , value_in                => rows_in (indx).manager_id
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'HIRE_DATE'
                                    , value_in                => rows_in (indx).hire_date
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'SALARY'
                                    , value_in                => rows_in (indx).salary
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'COMMISSION'
                                    , value_in                => rows_in (indx).commission
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'DEPARTMENT_ID'
                                    , value_in                => rows_in (indx).department_id
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'EMPNO'
                                    , value_in                => rows_in (indx).empno
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'ENAME'
                                    , value_in                => rows_in (indx).ename
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'CREATED_BY'
                                    , value_in                => rows_in (indx).created_by
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'CREATED_ON'
                                    , value_in                => rows_in (indx).created_on
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'CHANGED_BY'
                                    , value_in                => rows_in (indx).changed_by
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'CHANGED_ON'
                                    , value_in                => rows_in (indx).changed_on
                                    , validate_in             => FALSE
                                     );
               END LOOP;
            END bulk_handler;
         END IF;
      WHEN OTHERS
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            q$error_manager.raise_error
                                   (error_name_in      => 'FORALL-INSERT-FAILURE'
                                  , name1_in           => 'TABLE_NAME'
                                  , value1_in          => 'EMPLOYEE'
                                  , name2_in           => 'ROW_COUNT'
                                  , value2_in          => rows_in.COUNT
                                   );
         END IF;
   END ins;

   PROCEDURE upd (
      employee_id_in      IN   employee_tp.employee_id_t
    , last_name_in        IN   employee_tp.last_name_t DEFAULT NULL
    , first_name_in       IN   employee_tp.first_name_t DEFAULT NULL
    , middle_initial_in   IN   employee_tp.middle_initial_t DEFAULT NULL
    , job_id_in           IN   employee_tp.job_id_t DEFAULT NULL
    , manager_id_in       IN   employee_tp.manager_id_t DEFAULT NULL
    , hire_date_in        IN   employee_tp.hire_date_t DEFAULT NULL
    , salary_in           IN   employee_tp.salary_t DEFAULT NULL
    , commission_in       IN   employee_tp.commission_t DEFAULT NULL
    , department_id_in    IN   employee_tp.department_id_t DEFAULT NULL
    , empno_in            IN   employee_tp.empno_t DEFAULT NULL
    , ename_in            IN   employee_tp.ename_t DEFAULT NULL
    , created_by_in       IN   employee_tp.created_by_t DEFAULT NULL
    , created_on_in       IN   employee_tp.created_on_t DEFAULT NULL
    , changed_by_in       IN   employee_tp.changed_by_t DEFAULT NULL
    , changed_on_in       IN   employee_tp.changed_on_t DEFAULT NULL
    , ignore_if_null_in   IN   BOOLEAN := FALSE
    , handle_error_in     IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in => 'upd');
      END IF;

      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         UPDATE employee
            SET last_name = NVL (last_name_in, last_name)
              , first_name = NVL (first_name_in, first_name)
              , middle_initial = NVL (middle_initial_in, middle_initial)
              , job_id = NVL (job_id_in, job_id)
              , manager_id = NVL (manager_id_in, manager_id)
              , hire_date = NVL (hire_date_in, hire_date)
              , salary = NVL (salary_in, salary)
              , commission = NVL (commission_in, commission)
              , department_id = NVL (department_id_in, department_id)
              , empno = NVL (empno_in, empno)
              , ename = NVL (ename_in, ename)
              , created_by = NVL (created_by_in, created_by)
              , created_on = NVL (created_on_in, created_on)
              , changed_by = NVL (changed_by_in, changed_by)
              , changed_on = NVL (changed_on_in, changed_on)
          WHERE employee_id = employee_id_in;
      ELSE
         UPDATE employee
            SET last_name = last_name_in
              , first_name = first_name_in
              , middle_initial = middle_initial_in
              , job_id = job_id_in
              , manager_id = manager_id_in
              , hire_date = hire_date_in
              , salary = salary_in
              , commission = commission_in
              , department_id = department_id_in
              , empno = empno_in
              , ename = ename_in
              , created_by = created_by_in
              , created_on = created_on_in
              , changed_by = changed_by_in
              , changed_on = changed_on_in
          WHERE employee_id = employee_id_in;
      END IF;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner             all_constraints.owner%TYPE;
               l_name              all_constraints.constraint_name%TYPE;
               l_err_instance_id   PLS_INTEGER;
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF FALSE
               THEN
                  NULL;   -- Placeholder in case no unique indexes
               ELSIF l_name = 'I_EMPLOYEE_NAME'
               THEN
                  q$error_manager.register_error
                     (error_name_in            => 'DUPLICATE-VALUE'
                    , err_instance_id_out      => l_err_instance_id
                    , text_in                  => 'Violation of unique index "I_EMPLOYEE_NAME"'
                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'OWNER'
                                    , value_in                => l_owner
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'CONSTRAINT_NAME'
                                    , value_in                => l_name
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'TABLE_NAME'
                                    , value_in                => 'EMPLOYEE'
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'LAST_NAME'
                                    , value_in                => last_name_in
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'FIRST_NAME'
                                    , value_in                => first_name_in
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'MIDDLE_INITIAL'
                                    , value_in                => middle_initial_in
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.raise_error_instance
                                      (err_instance_id_in      => l_err_instance_id);
               ELSE
                  q$error_manager.raise_error
                                         (error_name_in      => 'DUPLICATE-VALUE'
                                        , name1_in           => 'OWNER'
                                        , value1_in          => l_owner
                                        , name2_in           => 'CONSTRAINT_NAME'
                                        , value2_in          => l_name
                                        , name3_in           => 'TABLE_NAME'
                                        , value3_in          => 'EMPLOYEE'
                                         );
               END IF;
            END;
         END IF;
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );

               IF l_name = 'EMP_DEPT_FK'
               THEN
                  -- Add a context value for each column
                  q$error_manager.add_context (err_instance_id_in      => l_id
                                             , NAME_IN                 => 'DEPARTMENT_ID'
                                             , value_in                => department_id_in
                                              );
               END IF;

               IF l_name = 'EMP_JOB_FK'
               THEN
                  -- Add a context value for each column
                  q$error_manager.add_context (err_instance_id_in      => l_id
                                             , NAME_IN                 => 'JOB_ID'
                                             , value_in                => job_id_in
                                              );
               END IF;

               IF l_name = 'EMP_MGR_FK'
               THEN
                  -- Add a context value for each column
                  q$error_manager.add_context (err_instance_id_in      => l_id
                                             , NAME_IN                 => 'MANAGER_ID'
                                             , value_in                => manager_id_in
                                              );
               END IF;

               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
      WHEN e_null_column_value
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               v_errm      VARCHAR2 (2000) := DBMS_UTILITY.format_error_stack;
               dot1loc     INTEGER;
               dot2loc     INTEGER;
               parenloc    INTEGER;
               c_owner     all_constraints.owner%TYPE;
               c_tabname   all_tables.table_name%TYPE;
               c_colname   all_tab_columns.column_name%TYPE;
            BEGIN
               dot1loc := INSTR (v_errm, '.', 1, 1);
               dot2loc := INSTR (v_errm, '.', 1, 2);
               parenloc := INSTR (v_errm, '(');
               c_owner :=
                        SUBSTR (v_errm, parenloc + 1, dot1loc - parenloc - 1);
               c_tabname :=
                          SUBSTR (v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
               c_colname :=
                  SUBSTR (v_errm
                        , dot2loc + 1
                        , INSTR (v_errm, ')') - dot2loc - 1
                         );
               q$error_manager.raise_error
                                    (error_name_in      => 'COLUMN-CANNOT-BE-NULL'
                                   , name1_in           => 'OWNER'
                                   , value1_in          => c_owner
                                   , name2_in           => 'TABLE_NAME'
                                   , value2_in          => c_tabname
                                   , name3_in           => 'COLUMN_NAME'
                                   , value3_in          => c_colname
                                    );
            END;
         END IF;
   END upd;

   PROCEDURE upd (
      rec_in              IN   employee_tp.employee_rt
    , ignore_if_null_in   IN   BOOLEAN := FALSE
    , handle_error_in     IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      upd (employee_id_in         => rec_in.employee_id
         , last_name_in           => rec_in.last_name
         , first_name_in          => rec_in.first_name
         , middle_initial_in      => rec_in.middle_initial
         , job_id_in              => rec_in.job_id
         , manager_id_in          => rec_in.manager_id
         , hire_date_in           => rec_in.hire_date
         , salary_in              => rec_in.salary
         , commission_in          => rec_in.commission
         , department_id_in       => rec_in.department_id
         , empno_in               => rec_in.empno
         , ename_in               => rec_in.ename
         , created_by_in          => rec_in.created_by
         , created_on_in          => rec_in.created_on
         , changed_by_in          => rec_in.changed_by
         , changed_on_in          => rec_in.changed_on
         , ignore_if_null_in      => ignore_if_null_in
         , handle_error_in        => handle_error_in
          );
   END upd;

   PROCEDURE upd_ins (
      employee_id_in      IN   employee_tp.employee_id_t
    , last_name_in        IN   employee_tp.last_name_t DEFAULT NULL
    , first_name_in       IN   employee_tp.first_name_t DEFAULT NULL
    , middle_initial_in   IN   employee_tp.middle_initial_t DEFAULT NULL
    , job_id_in           IN   employee_tp.job_id_t DEFAULT NULL
    , manager_id_in       IN   employee_tp.manager_id_t DEFAULT NULL
    , hire_date_in        IN   employee_tp.hire_date_t DEFAULT NULL
    , salary_in           IN   employee_tp.salary_t DEFAULT NULL
    , commission_in       IN   employee_tp.commission_t DEFAULT NULL
    , department_id_in    IN   employee_tp.department_id_t DEFAULT NULL
    , empno_in            IN   employee_tp.empno_t DEFAULT NULL
    , ename_in            IN   employee_tp.ename_t DEFAULT NULL
    , created_by_in       IN   employee_tp.created_by_t DEFAULT NULL
    , created_on_in       IN   employee_tp.created_on_t DEFAULT NULL
    , changed_by_in       IN   employee_tp.changed_by_t DEFAULT NULL
    , changed_on_in       IN   employee_tp.changed_on_t DEFAULT NULL
    , ignore_if_null_in   IN   BOOLEAN := FALSE
    , handle_error_in     IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      upd (employee_id_in         => employee_id_in
         , last_name_in           => last_name_in
         , first_name_in          => first_name_in
         , middle_initial_in      => middle_initial_in
         , job_id_in              => job_id_in
         , manager_id_in          => manager_id_in
         , hire_date_in           => hire_date_in
         , salary_in              => salary_in
         , commission_in          => commission_in
         , department_id_in       => department_id_in
         , empno_in               => empno_in
         , ename_in               => ename_in
         , created_by_in          => created_by_in
         , created_on_in          => created_on_in
         , changed_by_in          => changed_by_in
         , changed_on_in          => changed_on_in
         , ignore_if_null_in      => ignore_if_null_in
         , handle_error_in        => handle_error_in
          );

      IF SQL%ROWCOUNT = 0
      THEN
         ins (employee_id_in         => employee_id_in
            , last_name_in           => last_name_in
            , first_name_in          => first_name_in
            , middle_initial_in      => middle_initial_in
            , job_id_in              => job_id_in
            , manager_id_in          => manager_id_in
            , hire_date_in           => hire_date_in
            , salary_in              => salary_in
            , commission_in          => commission_in
            , department_id_in       => department_id_in
            , empno_in               => empno_in
            , ename_in               => ename_in
            , created_by_in          => created_by_in
            , created_on_in          => created_on_in
            , changed_by_in          => changed_by_in
            , changed_on_in          => changed_on_in
            , handle_error_in        => handle_error_in
             );
      END IF;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner             all_constraints.owner%TYPE;
               l_name              all_constraints.constraint_name%TYPE;
               l_err_instance_id   PLS_INTEGER;
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF FALSE
               THEN
                  NULL;   -- Placeholder in case no unique indexes
               ELSIF l_name = 'I_EMPLOYEE_NAME'
               THEN
                  q$error_manager.register_error
                     (error_name_in            => 'DUPLICATE-VALUE'
                    , err_instance_id_out      => l_err_instance_id
                    , text_in                  => 'Violation of unique index "I_EMPLOYEE_NAME"'
                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'OWNER'
                                    , value_in                => l_owner
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'CONSTRAINT_NAME'
                                    , value_in                => l_name
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'TABLE_NAME'
                                    , value_in                => 'EMPLOYEE'
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'LAST_NAME'
                                    , value_in                => last_name_in
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'FIRST_NAME'
                                    , value_in                => first_name_in
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.add_context
                                     (err_instance_id_in      => l_err_instance_id
                                    , NAME_IN                 => 'MIDDLE_INITIAL'
                                    , value_in                => middle_initial_in
                                    , validate_in             => FALSE
                                     );
                  q$error_manager.raise_error_instance
                                      (err_instance_id_in      => l_err_instance_id);
               ELSE
                  q$error_manager.raise_error
                                         (error_name_in      => 'DUPLICATE-VALUE'
                                        , name1_in           => 'OWNER'
                                        , value1_in          => l_owner
                                        , name2_in           => 'CONSTRAINT_NAME'
                                        , value2_in          => l_name
                                        , name3_in           => 'TABLE_NAME'
                                        , value3_in          => 'EMPLOYEE'
                                         );
               END IF;
            END;
         END IF;
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );

               IF l_name = 'EMP_DEPT_FK'
               THEN
                  -- Add a context value for each column
                  q$error_manager.add_context (err_instance_id_in      => l_id
                                             , NAME_IN                 => 'DEPARTMENT_ID'
                                             , value_in                => department_id_in
                                              );
               END IF;

               IF l_name = 'EMP_JOB_FK'
               THEN
                  -- Add a context value for each column
                  q$error_manager.add_context (err_instance_id_in      => l_id
                                             , NAME_IN                 => 'JOB_ID'
                                             , value_in                => job_id_in
                                              );
               END IF;

               IF l_name = 'EMP_MGR_FK'
               THEN
                  -- Add a context value for each column
                  q$error_manager.add_context (err_instance_id_in      => l_id
                                             , NAME_IN                 => 'MANAGER_ID'
                                             , value_in                => manager_id_in
                                              );
               END IF;

               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
      WHEN e_null_column_value
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               v_errm      VARCHAR2 (2000) := DBMS_UTILITY.format_error_stack;
               dot1loc     INTEGER;
               dot2loc     INTEGER;
               parenloc    INTEGER;
               c_owner     all_constraints.owner%TYPE;
               c_tabname   all_tables.table_name%TYPE;
               c_colname   all_tab_columns.column_name%TYPE;
            BEGIN
               dot1loc := INSTR (v_errm, '.', 1, 1);
               dot2loc := INSTR (v_errm, '.', 1, 2);
               parenloc := INSTR (v_errm, '(');
               c_owner :=
                        SUBSTR (v_errm, parenloc + 1, dot1loc - parenloc - 1);
               c_tabname :=
                          SUBSTR (v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
               c_colname :=
                  SUBSTR (v_errm
                        , dot2loc + 1
                        , INSTR (v_errm, ')') - dot2loc - 1
                         );
               q$error_manager.raise_error
                                    (error_name_in      => 'COLUMN-CANNOT-BE-NULL'
                                   , name1_in           => 'OWNER'
                                   , value1_in          => c_owner
                                   , name2_in           => 'TABLE_NAME'
                                   , value2_in          => c_tabname
                                   , name3_in           => 'COLUMN_NAME'
                                   , value3_in          => c_colname
                                    );
            END;
         END IF;
   END upd_ins;

   PROCEDURE upd (
      col_in              IN   employee_tp.employee_tc
    , ignore_if_null_in   IN   BOOLEAN := FALSE
    , handle_error_in     IN   BOOLEAN := TRUE
   )
   IS
      l_employee_id      employee_tp.employee_id_cc;
      l_last_name        employee_tp.last_name_cc;
      l_first_name       employee_tp.first_name_cc;
      l_middle_initial   employee_tp.middle_initial_cc;
      l_job_id           employee_tp.job_id_cc;
      l_manager_id       employee_tp.manager_id_cc;
      l_hire_date        employee_tp.hire_date_cc;
      l_salary           employee_tp.salary_cc;
      l_commission       employee_tp.commission_cc;
      l_department_id    employee_tp.department_id_cc;
      l_empno            employee_tp.empno_cc;
      l_ename            employee_tp.ename_cc;
      l_created_by       employee_tp.created_by_cc;
      l_created_on       employee_tp.created_on_cc;
      l_changed_by       employee_tp.changed_by_cc;
      l_changed_on       employee_tp.changed_on_cc;
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in => 'upd');
      END IF;

      FOR i IN col_in.FIRST .. col_in.LAST
      LOOP
         l_employee_id (i) := col_in (i).employee_id;
         l_last_name (i) := col_in (i).last_name;
         l_first_name (i) := col_in (i).first_name;
         l_middle_initial (i) := col_in (i).middle_initial;
         l_job_id (i) := col_in (i).job_id;
         l_manager_id (i) := col_in (i).manager_id;
         l_hire_date (i) := col_in (i).hire_date;
         l_salary (i) := col_in (i).salary;
         l_commission (i) := col_in (i).commission;
         l_department_id (i) := col_in (i).department_id;
         l_empno (i) := col_in (i).empno;
         l_ename (i) := col_in (i).ename;
         l_created_by (i) := col_in (i).created_by;
         l_created_on (i) := col_in (i).created_on;
         l_changed_by (i) := col_in (i).changed_by;
         l_changed_on (i) := col_in (i).changed_on;
      END LOOP;

      IF NVL (ignore_if_null_in, FALSE)
      THEN
         -- Set any columns to their current values
         -- if incoming value is NULL.
         -- Put WHEN clause on column-level triggers!
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE employee
               SET last_name = NVL (l_last_name (i), last_name)
                 , first_name = NVL (l_first_name (i), first_name)
                 , middle_initial = NVL (l_middle_initial (i), middle_initial)
                 , job_id = NVL (l_job_id (i), job_id)
                 , manager_id = NVL (l_manager_id (i), manager_id)
                 , hire_date = NVL (l_hire_date (i), hire_date)
                 , salary = NVL (l_salary (i), salary)
                 , commission = NVL (l_commission (i), commission)
                 , department_id = NVL (l_department_id (i), department_id)
                 , empno = NVL (l_empno (i), empno)
                 , ename = NVL (l_ename (i), ename)
                 , created_by = NVL (l_created_by (i), created_by)
                 , created_on = NVL (l_created_on (i), created_on)
                 , changed_by = NVL (l_changed_by (i), changed_by)
                 , changed_on = NVL (l_changed_on (i), changed_on)
             WHERE employee_id = l_employee_id (i);
      ELSE
         FORALL i IN col_in.FIRST .. col_in.LAST
            UPDATE employee
               SET last_name = l_last_name (i)
                 , first_name = l_first_name (i)
                 , middle_initial = l_middle_initial (i)
                 , job_id = l_job_id (i)
                 , manager_id = l_manager_id (i)
                 , hire_date = l_hire_date (i)
                 , salary = l_salary (i)
                 , commission = l_commission (i)
                 , department_id = l_department_id (i)
                 , empno = l_empno (i)
                 , ename = l_ename (i)
                 , created_by = l_created_by (i)
                 , created_on = l_created_on (i)
                 , changed_by = l_changed_by (i)
                 , changed_on = l_changed_on (i)
             WHERE employee_id = l_employee_id (i);
      END IF;
   END upd;

   FUNCTION dynupdstr (
      colname_in   IN   all_tab_columns.column_name%TYPE
    , where_in     IN   VARCHAR2 := NULL
   )
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN    'UPDATE EMPLOYEE
             SET '
             || colname_in
             || ' = :value
           WHERE '
             || NVL (where_in, '1=1');
   END dynupdstr;

   PROCEDURE upd_onecol (
      colname_in        IN   all_tab_columns.column_name%TYPE
    , new_value_in      IN   VARCHAR2
    , where_in          IN   VARCHAR2 := NULL
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in => 'upd_pky');
      END IF;

      EXECUTE IMMEDIATE dynupdstr (colname_in, where_in)
                  USING new_value_in;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner             all_constraints.owner%TYPE;
               l_name              all_constraints.constraint_name%TYPE;
               l_err_instance_id   PLS_INTEGER;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                         (error_name_in      => 'DUPLICATE-VALUE'
                                        , name1_in           => 'OWNER'
                                        , value1_in          => l_owner
                                        , name2_in           => 'CONSTRAINT_NAME'
                                        , value2_in          => l_name
                                        , name3_in           => 'TABLE_NAME'
                                        , value3_in          => 'EMPLOYEE'
                                         );
            END;
         END IF;
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
      WHEN e_null_column_value
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               v_errm      VARCHAR2 (2000) := DBMS_UTILITY.format_error_stack;
               dot1loc     INTEGER;
               dot2loc     INTEGER;
               parenloc    INTEGER;
               c_owner     all_constraints.owner%TYPE;
               c_tabname   all_tables.table_name%TYPE;
               c_colname   all_tab_columns.column_name%TYPE;
            BEGIN
               dot1loc := INSTR (v_errm, '.', 1, 1);
               dot2loc := INSTR (v_errm, '.', 1, 2);
               parenloc := INSTR (v_errm, '(');
               c_owner :=
                        SUBSTR (v_errm, parenloc + 1, dot1loc - parenloc - 1);
               c_tabname :=
                          SUBSTR (v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
               c_colname :=
                  SUBSTR (v_errm
                        , dot2loc + 1
                        , INSTR (v_errm, ')') - dot2loc - 1
                         );
               q$error_manager.raise_error
                                    (error_name_in      => 'COLUMN-CANNOT-BE-NULL'
                                   , name1_in           => 'OWNER'
                                   , value1_in          => c_owner
                                   , name2_in           => 'TABLE_NAME'
                                   , value2_in          => c_tabname
                                   , name3_in           => 'COLUMN_NAME'
                                   , value3_in          => c_colname
                                    );
            END;
         END IF;
   END upd_onecol;

   PROCEDURE upd_onecol (
      colname_in        IN   all_tab_columns.column_name%TYPE
    , new_value_in      IN   DATE
    , where_in          IN   VARCHAR2 := NULL
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in => 'upd_pky');
      END IF;

      EXECUTE IMMEDIATE dynupdstr (colname_in, where_in)
                  USING new_value_in;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner             all_constraints.owner%TYPE;
               l_name              all_constraints.constraint_name%TYPE;
               l_err_instance_id   PLS_INTEGER;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                         (error_name_in      => 'DUPLICATE-VALUE'
                                        , name1_in           => 'OWNER'
                                        , value1_in          => l_owner
                                        , name2_in           => 'CONSTRAINT_NAME'
                                        , value2_in          => l_name
                                        , name3_in           => 'TABLE_NAME'
                                        , value3_in          => 'EMPLOYEE'
                                         );
            END;
         END IF;
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
      WHEN e_null_column_value
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               v_errm      VARCHAR2 (2000) := DBMS_UTILITY.format_error_stack;
               dot1loc     INTEGER;
               dot2loc     INTEGER;
               parenloc    INTEGER;
               c_owner     all_constraints.owner%TYPE;
               c_tabname   all_tables.table_name%TYPE;
               c_colname   all_tab_columns.column_name%TYPE;
            BEGIN
               dot1loc := INSTR (v_errm, '.', 1, 1);
               dot2loc := INSTR (v_errm, '.', 1, 2);
               parenloc := INSTR (v_errm, '(');
               c_owner :=
                        SUBSTR (v_errm, parenloc + 1, dot1loc - parenloc - 1);
               c_tabname :=
                          SUBSTR (v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
               c_colname :=
                  SUBSTR (v_errm
                        , dot2loc + 1
                        , INSTR (v_errm, ')') - dot2loc - 1
                         );
               q$error_manager.raise_error
                                    (error_name_in      => 'COLUMN-CANNOT-BE-NULL'
                                   , name1_in           => 'OWNER'
                                   , value1_in          => c_owner
                                   , name2_in           => 'TABLE_NAME'
                                   , value2_in          => c_tabname
                                   , name3_in           => 'COLUMN_NAME'
                                   , value3_in          => c_colname
                                    );
            END;
         END IF;
   END upd_onecol;

   PROCEDURE upd_onecol (
      colname_in        IN   all_tab_columns.column_name%TYPE
    , new_value_in      IN   NUMBER
    , where_in          IN   VARCHAR2 := NULL
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in => 'upd_pky');
      END IF;

      EXECUTE IMMEDIATE dynupdstr (colname_in, where_in)
                  USING new_value_in;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner             all_constraints.owner%TYPE;
               l_name              all_constraints.constraint_name%TYPE;
               l_err_instance_id   PLS_INTEGER;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                         (error_name_in      => 'DUPLICATE-VALUE'
                                        , name1_in           => 'OWNER'
                                        , value1_in          => l_owner
                                        , name2_in           => 'CONSTRAINT_NAME'
                                        , value2_in          => l_name
                                        , name3_in           => 'TABLE_NAME'
                                        , value3_in          => 'EMPLOYEE'
                                         );
            END;
         END IF;
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
      WHEN e_null_column_value
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               v_errm      VARCHAR2 (2000) := DBMS_UTILITY.format_error_stack;
               dot1loc     INTEGER;
               dot2loc     INTEGER;
               parenloc    INTEGER;
               c_owner     all_constraints.owner%TYPE;
               c_tabname   all_tables.table_name%TYPE;
               c_colname   all_tab_columns.column_name%TYPE;
            BEGIN
               dot1loc := INSTR (v_errm, '.', 1, 1);
               dot2loc := INSTR (v_errm, '.', 1, 2);
               parenloc := INSTR (v_errm, '(');
               c_owner :=
                        SUBSTR (v_errm, parenloc + 1, dot1loc - parenloc - 1);
               c_tabname :=
                          SUBSTR (v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
               c_colname :=
                  SUBSTR (v_errm
                        , dot2loc + 1
                        , INSTR (v_errm, ')') - dot2loc - 1
                         );
               q$error_manager.raise_error
                                    (error_name_in      => 'COLUMN-CANNOT-BE-NULL'
                                   , name1_in           => 'OWNER'
                                   , value1_in          => c_owner
                                   , name2_in           => 'TABLE_NAME'
                                   , value2_in          => c_tabname
                                   , name3_in           => 'COLUMN_NAME'
                                   , value3_in          => c_colname
                                    );
            END;
         END IF;
   END upd_onecol;

   PROCEDURE upd_onecol_pky (
      colname_in        IN   all_tab_columns.column_name%TYPE
    , new_value_in      IN   VARCHAR2
    , employee_id_in    IN   employee_tp.employee_id_t
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
      l_column_name   all_tab_columns.column_name%TYPE  := UPPER (colname_in);
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in      => 'upd_onecol_pky');
      END IF;

      IF l_column_name = 'LAST_NAME'
      THEN
         UPDATE employee
            SET last_name = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'FIRST_NAME'
      THEN
         UPDATE employee
            SET first_name = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'MIDDLE_INITIAL'
      THEN
         UPDATE employee
            SET middle_initial = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'ENAME'
      THEN
         UPDATE employee
            SET ename = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'CREATED_BY'
      THEN
         UPDATE employee
            SET created_by = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'CHANGED_BY'
      THEN
         UPDATE employee
            SET changed_by = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      <<update_complete>>
      NULL;   -- Ensures there is SOMETHING here....
      NULL;   -- Guarantee valid block.

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner             all_constraints.owner%TYPE;
               l_name              all_constraints.constraint_name%TYPE;
               l_err_instance_id   PLS_INTEGER;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                         (error_name_in      => 'DUPLICATE-VALUE'
                                        , name1_in           => 'OWNER'
                                        , value1_in          => l_owner
                                        , name2_in           => 'CONSTRAINT_NAME'
                                        , value2_in          => l_name
                                        , name3_in           => 'TABLE_NAME'
                                        , value3_in          => 'EMPLOYEE'
                                         );
            END;
         END IF;
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
      WHEN e_null_column_value
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               v_errm      VARCHAR2 (2000) := DBMS_UTILITY.format_error_stack;
               dot1loc     INTEGER;
               dot2loc     INTEGER;
               parenloc    INTEGER;
               c_owner     all_constraints.owner%TYPE;
               c_tabname   all_tables.table_name%TYPE;
               c_colname   all_tab_columns.column_name%TYPE;
            BEGIN
               dot1loc := INSTR (v_errm, '.', 1, 1);
               dot2loc := INSTR (v_errm, '.', 1, 2);
               parenloc := INSTR (v_errm, '(');
               c_owner :=
                        SUBSTR (v_errm, parenloc + 1, dot1loc - parenloc - 1);
               c_tabname :=
                          SUBSTR (v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
               c_colname :=
                  SUBSTR (v_errm
                        , dot2loc + 1
                        , INSTR (v_errm, ')') - dot2loc - 1
                         );
               q$error_manager.raise_error
                                    (error_name_in      => 'COLUMN-CANNOT-BE-NULL'
                                   , name1_in           => 'OWNER'
                                   , value1_in          => c_owner
                                   , name2_in           => 'TABLE_NAME'
                                   , value2_in          => c_tabname
                                   , name3_in           => 'COLUMN_NAME'
                                   , value3_in          => c_colname
                                    );
            END;
         END IF;
   END upd_onecol_pky;

   PROCEDURE upd_onecol_pky (
      colname_in        IN   all_tab_columns.column_name%TYPE
    , new_value_in      IN   DATE
    , employee_id_in    IN   employee_tp.employee_id_t
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
      l_column_name   all_tab_columns.column_name%TYPE  := UPPER (colname_in);
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in      => 'upd_onecol_pky');
      END IF;

      IF l_column_name = 'HIRE_DATE'
      THEN
         UPDATE employee
            SET hire_date = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'CREATED_ON'
      THEN
         UPDATE employee
            SET created_on = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'CHANGED_ON'
      THEN
         UPDATE employee
            SET changed_on = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      <<update_complete>>
      NULL;   -- Ensures there is SOMETHING here....
      NULL;   -- Guarantee valid block.

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner             all_constraints.owner%TYPE;
               l_name              all_constraints.constraint_name%TYPE;
               l_err_instance_id   PLS_INTEGER;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                         (error_name_in      => 'DUPLICATE-VALUE'
                                        , name1_in           => 'OWNER'
                                        , value1_in          => l_owner
                                        , name2_in           => 'CONSTRAINT_NAME'
                                        , value2_in          => l_name
                                        , name3_in           => 'TABLE_NAME'
                                        , value3_in          => 'EMPLOYEE'
                                         );
            END;
         END IF;
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
      WHEN e_null_column_value
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               v_errm      VARCHAR2 (2000) := DBMS_UTILITY.format_error_stack;
               dot1loc     INTEGER;
               dot2loc     INTEGER;
               parenloc    INTEGER;
               c_owner     all_constraints.owner%TYPE;
               c_tabname   all_tables.table_name%TYPE;
               c_colname   all_tab_columns.column_name%TYPE;
            BEGIN
               dot1loc := INSTR (v_errm, '.', 1, 1);
               dot2loc := INSTR (v_errm, '.', 1, 2);
               parenloc := INSTR (v_errm, '(');
               c_owner :=
                        SUBSTR (v_errm, parenloc + 1, dot1loc - parenloc - 1);
               c_tabname :=
                          SUBSTR (v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
               c_colname :=
                  SUBSTR (v_errm
                        , dot2loc + 1
                        , INSTR (v_errm, ')') - dot2loc - 1
                         );
               q$error_manager.raise_error
                                    (error_name_in      => 'COLUMN-CANNOT-BE-NULL'
                                   , name1_in           => 'OWNER'
                                   , value1_in          => c_owner
                                   , name2_in           => 'TABLE_NAME'
                                   , value2_in          => c_tabname
                                   , name3_in           => 'COLUMN_NAME'
                                   , value3_in          => c_colname
                                    );
            END;
         END IF;
   END upd_onecol_pky;

   PROCEDURE upd_onecol_pky (
      colname_in        IN   all_tab_columns.column_name%TYPE
    , new_value_in      IN   NUMBER
    , employee_id_in    IN   employee_tp.employee_id_t
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
      l_column_name   all_tab_columns.column_name%TYPE  := UPPER (colname_in);
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in      => 'upd_onecol_pky');
      END IF;

      IF l_column_name = 'EMPLOYEE_ID'
      THEN
         UPDATE employee
            SET employee_id = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'JOB_ID'
      THEN
         UPDATE employee
            SET job_id = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'MANAGER_ID'
      THEN
         UPDATE employee
            SET manager_id = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'SALARY'
      THEN
         UPDATE employee
            SET salary = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'COMMISSION'
      THEN
         UPDATE employee
            SET commission = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'DEPARTMENT_ID'
      THEN
         UPDATE employee
            SET department_id = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      IF l_column_name = 'EMPNO'
      THEN
         UPDATE employee
            SET empno = new_value_in
          WHERE employee_id = employee_id_in;

         -- Perfect time for a GOTO!
         GOTO update_complete;
      END IF;

      <<update_complete>>
      NULL;   -- Ensures there is SOMETHING here....
      NULL;   -- Guarantee valid block.

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner             all_constraints.owner%TYPE;
               l_name              all_constraints.constraint_name%TYPE;
               l_err_instance_id   PLS_INTEGER;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                         (error_name_in      => 'DUPLICATE-VALUE'
                                        , name1_in           => 'OWNER'
                                        , value1_in          => l_owner
                                        , name2_in           => 'CONSTRAINT_NAME'
                                        , value2_in          => l_name
                                        , name3_in           => 'TABLE_NAME'
                                        , value3_in          => 'EMPLOYEE'
                                         );
            END;
         END IF;
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
      WHEN e_null_column_value
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               v_errm      VARCHAR2 (2000) := DBMS_UTILITY.format_error_stack;
               dot1loc     INTEGER;
               dot2loc     INTEGER;
               parenloc    INTEGER;
               c_owner     all_constraints.owner%TYPE;
               c_tabname   all_tables.table_name%TYPE;
               c_colname   all_tab_columns.column_name%TYPE;
            BEGIN
               dot1loc := INSTR (v_errm, '.', 1, 1);
               dot2loc := INSTR (v_errm, '.', 1, 2);
               parenloc := INSTR (v_errm, '(');
               c_owner :=
                        SUBSTR (v_errm, parenloc + 1, dot1loc - parenloc - 1);
               c_tabname :=
                          SUBSTR (v_errm, dot1loc + 1, dot2loc - dot1loc - 1);
               c_colname :=
                  SUBSTR (v_errm
                        , dot2loc + 1
                        , INSTR (v_errm, ')') - dot2loc - 1
                         );
               q$error_manager.raise_error
                                    (error_name_in      => 'COLUMN-CANNOT-BE-NULL'
                                   , name1_in           => 'OWNER'
                                   , value1_in          => c_owner
                                   , name2_in           => 'TABLE_NAME'
                                   , value2_in          => c_tabname
                                   , name3_in           => 'COLUMN_NAME'
                                   , value3_in          => c_colname
                                    );
            END;
         END IF;
   END upd_onecol_pky;

   -- Set all non-primary key columns to NULL
   PROCEDURE nullify_row (
      employee_id_in    IN   employee_tp.employee_id_t
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      upd (employee_id_in         => employee_id_in
         , last_name_in           => NULL
         , first_name_in          => NULL
         , middle_initial_in      => NULL
         , job_id_in              => NULL
         , manager_id_in          => NULL
         , salary_in              => NULL
         , commission_in          => NULL
         , department_id_in       => NULL
         , empno_in               => NULL
         , ename_in               => NULL
         , ignore_if_null_in      => FALSE
         , handle_error_in        => handle_error_in
          );
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
   END nullify_row;

   -- Delete functionality
   PROCEDURE del (
      employee_id_in    IN   employee_tp.employee_id_t
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in      => 'del'
                                        , information_in       => employee_id_in
                                         );
      END IF;

      DELETE FROM employee
            WHERE employee_id = employee_id_in;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
   END del;

   -- Delete all rows for primary key column EMPLOYEE_ID
   PROCEDURE del_employee_id (
      employee_id_in    IN   employee_tp.employee_id_t
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution
                                        (program_name_in      => 'del_EMPLOYEE_ID');
      END IF;

      DELETE FROM employee
            WHERE employee_id = employee_id_in;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
   END del_employee_id;

   -- Delete for unique value of I_EMPLOYEE_NAME
   PROCEDURE del_i_employee_name (
      last_name_in        IN   employee_tp.last_name_t
    , first_name_in       IN   employee_tp.first_name_t
    , middle_initial_in   IN   employee_tp.middle_initial_t
    , handle_error_in     IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution
                                    (program_name_in      => 'del_I_EMPLOYEE_NAME');
      END IF;

      DELETE FROM employee
            WHERE last_name = last_name_in
              AND first_name = first_name_in
              AND middle_initial = middle_initial_in;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
   END del_i_employee_name;

   PROCEDURE del_emp_dept_fk (
      department_id_in   IN   employee_tp.department_id_t
    , handle_error_in    IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution
                                        (program_name_in      => 'del_EMP_DEPT_FK');
      END IF;

      DELETE FROM employee
            WHERE department_id = del_emp_dept_fk.department_id_in;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
   END del_emp_dept_fk;

   PROCEDURE del_emp_job_fk (
      job_id_in         IN   employee_tp.job_id_t
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in      => 'del_EMP_JOB_FK');
      END IF;

      DELETE FROM employee
            WHERE job_id = del_emp_job_fk.job_id_in;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
   END del_emp_job_fk;

   PROCEDURE del_emp_mgr_fk (
      manager_id_in     IN   employee_tp.manager_id_t
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in      => 'del_EMP_MGR_FK');
      END IF;

      DELETE FROM employee
            WHERE manager_id = del_emp_mgr_fk.manager_id_in;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
   END del_emp_mgr_fk;

   -- Deletions using dynamic SQL
   FUNCTION dyndelstr (where_in IN VARCHAR2)
      RETURN VARCHAR2
   IS
   BEGIN
      IF where_in IS NULL
      THEN
         RETURN 'DELETE FROM EMPLOYEE';
      ELSE
         RETURN 'DELETE FROM EMPLOYEE WHERE ' || where_in;
      END IF;
   END dyndelstr;

   FUNCTION dyncoldelstr (colname_in IN all_tab_columns.column_name%TYPE)
      RETURN VARCHAR2
   IS
   BEGIN
      RETURN dyndelstr (colname_in || ' = :value');
   END;

   PROCEDURE del_by (
      where_clause_in   IN   VARCHAR2
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in => 'del_by');
      END IF;

      EXECUTE IMMEDIATE dyndelstr (where_clause_in);

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
   END del_by;

   PROCEDURE del_by_col (
      colname_in        IN   VARCHAR2
    , colvalue_in       IN   VARCHAR2
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in => 'del_by_col');
      END IF;

      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
                  USING colvalue_in;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
   END del_by_col;

   PROCEDURE del_by_col (
      colname_in        IN   VARCHAR2
    , colvalue_in       IN   DATE
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in => 'del_by_col');
      END IF;

      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
                  USING colvalue_in;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
   END del_by_col;

   PROCEDURE del_by_col (
      colname_in        IN   VARCHAR2
    , colvalue_in       IN   NUMBER
    , handle_error_in   IN   BOOLEAN := TRUE
   )
   IS
   BEGIN
      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.start_execution (program_name_in => 'del_by_col');
      END IF;

      EXECUTE IMMEDIATE dyncoldelstr (colname_in)
                  USING colvalue_in;

      IF q$error_manager.trace_enabled
      THEN
         q$error_manager.end_execution;
      END IF;
   EXCEPTION
      WHEN e_check_constraint_failure
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner   all_constraints.owner%TYPE;
               l_name    all_constraints.constraint_name%TYPE;
            BEGIN
               get_constraint_info (l_owner, l_name);
               q$error_manager.raise_error
                                (error_name_in      => 'CHECK-CONSTRAINT-FAILURE'
                               , name1_in           => 'OWNER'
                               , value1_in          => l_owner
                               , name2_in           => 'CONSTRAINT_NAME'
                               , value2_in          => l_name
                               , name3_in           => 'TABLE_NAME'
                               , value3_in          => 'EMPLOYEE'
                                );
            END;
         END IF;
      WHEN e_integ_constraint_failure OR e_no_parent_key OR e_child_record_found
      THEN
         q$error_manager.start_exception_handling;

         IF NOT handle_error_in
         THEN
            RAISE;
         ELSE
            DECLARE
               l_owner      all_constraints.owner%TYPE;
               l_name       all_constraints.constraint_name%TYPE;
               l_id         PLS_INTEGER;
               l_err_name   VARCHAR2 (32767)    DEFAULT 'NO-PARENT-KEY-FOUND';
            BEGIN
               get_constraint_info (l_owner, l_name);

               IF SQLCODE = -2292   -- Child record found
               THEN
                  l_err_name := 'CHILD-RECORD-FOUND';
               END IF;

               q$error_manager.register_error (error_name_in            => l_err_name
                                             , err_instance_id_out      => l_id
                                             , name1_in                 => 'OWNER'
                                             , value1_in                => l_owner
                                             , name2_in                 => 'CONSTRAINT_NAME'
                                             , value2_in                => l_name
                                             , name3_in                 => 'TABLE_NAME'
                                             , value3_in                => 'EMPLOYEE'
                                              );
               q$error_manager.raise_error_instance
                                                   (err_instance_id_in      => l_id);
            END;
         END IF;
   END del_by_col;

   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (employee_inout IN OUT employee_tp.employee_rt)
   IS
   BEGIN
      employee_inout.employee_id := NULL;
      employee_inout.last_name := NULL;
      employee_inout.first_name := NULL;
      employee_inout.middle_initial := NULL;
      employee_inout.job_id := NULL;
      employee_inout.manager_id := NULL;
      employee_inout.hire_date := SYSDATE;
      employee_inout.salary := NULL;
      employee_inout.commission := NULL;
      employee_inout.department_id := NULL;
      employee_inout.empno := NULL;
      employee_inout.ename := NULL;
      employee_inout.created_by := USER;
      employee_inout.created_on := SYSDATE;
      employee_inout.changed_by := USER;
      employee_inout.changed_on := SYSDATE;
   END initrec;

   FUNCTION initrec
      RETURN employee_tp.employee_rt
   IS
      l_employee   employee_tp.employee_rt;
   BEGIN
      l_employee.hire_date := SYSDATE;
      l_employee.created_by := USER;
      l_employee.created_on := SYSDATE;
      l_employee.changed_by := USER;
      l_employee.changed_on := SYSDATE;
      RETURN l_employee;
   END initrec;
BEGIN
   NULL;
END employee_cp;
/