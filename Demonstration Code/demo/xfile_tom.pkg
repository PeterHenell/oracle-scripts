CREATE OR REPLACE PACKAGE xfile
/*
|| Xtra FILE access from PL/SQL
||
|| More complete file management capabilities for PL/SQL
||
|| Items to add:
||    Generate a unique file number following a certain
||    pattern in a directory.
||
|| Author: Steven Feuerstein
||   Date: 2/26/99
-- MODIFICATION HISTORY
-- DATE          USER        MODIFICATION
-- ---------------------------------------------------------------------
-- 02/08/2005    tberthoff   added exceptions to specification.
--
--
-- */
IS
   c_dirdelim                      CONSTANT CHAR (1)    := '|';

   SUBTYPE maxvc2 IS VARCHAR2 (32767);

   -- List of file names
   TYPE list_aat IS TABLE OF maxvc2
      INDEX BY BINARY_INTEGER;

   -- possible UTL_FILE exceptions
   g_others_nbr                    CONSTANT PLS_INTEGER := -20100;
   g_eof_err_nbr                   CONSTANT PLS_INTEGER := -20101;
   eof                                      EXCEPTION;
   PRAGMA EXCEPTION_INIT (eof, -20101);
   g_internal_error_err_nbr        CONSTANT PLS_INTEGER := -20102;
   internal_error                           EXCEPTION;
   PRAGMA EXCEPTION_INIT (internal_error, -20102);
   g_invalid_filehandle_err_nbr    CONSTANT PLS_INTEGER := -20103;
   invalid_filehandle                       EXCEPTION;
   PRAGMA EXCEPTION_INIT (invalid_filehandle, -20103);
   g_invalid_maxlinesize_err_nbr   CONSTANT PLS_INTEGER := -20104;
   invalid_maxlinesize                      EXCEPTION;
   PRAGMA EXCEPTION_INIT (invalid_maxlinesize, -20104);
   g_invalid_mode_err_nbr          CONSTANT PLS_INTEGER := -20105;
   invalid_mode                             EXCEPTION;
   PRAGMA EXCEPTION_INIT (invalid_mode, -20105);
   g_invalid_operation_err_nbr     CONSTANT PLS_INTEGER := -20106;
   invalid_operation                        EXCEPTION;
   PRAGMA EXCEPTION_INIT (invalid_operation, -20106);
   g_invalid_path_err_nbr          CONSTANT PLS_INTEGER := -20107;
   invalid_path                             EXCEPTION;
   PRAGMA EXCEPTION_INIT (invalid_path, -20107);
   g_line_too_long_err_nbr         CONSTANT PLS_INTEGER := -20108;
   line_too_long                            EXCEPTION;
   PRAGMA EXCEPTION_INIT (line_too_long, -20108);
   g_read_error_err_nbr            CONSTANT PLS_INTEGER := -20109;
   read_error                               EXCEPTION;
   PRAGMA EXCEPTION_INIT (read_error, -20109);
   g_write_error_err_nbr                    PLS_INTEGER := -20110;
   write_error                              EXCEPTION;
   PRAGMA EXCEPTION_INIT (write_error, -20110);
   g_line_nbr_err_nbr                       PLS_INTEGER := -20111;
   line_nbr_error                           EXCEPTION;
   PRAGMA EXCEPTION_INIT (line_nbr_error, -20111);

   /* Status of file */
   FUNCTION canread (FILE IN VARCHAR2)
      RETURN BOOLEAN;

   FUNCTION canwrite (FILE IN VARCHAR2)
      RETURN BOOLEAN;

   FUNCTION EXISTS (FILE IN VARCHAR2)
      RETURN BOOLEAN;

   FUNCTION isdirectory (FILE IN VARCHAR2)
      RETURN BOOLEAN;

   FUNCTION isfile (FILE IN VARCHAR2)
      RETURN BOOLEAN;

   FUNCTION separator (FILE IN VARCHAR2)
      RETURN VARCHAR2;

   /* Information about file */
   FUNCTION LENGTH (FILE IN VARCHAR2)
      RETURN NUMBER;

   FUNCTION parentdir (FILE IN VARCHAR2)
      RETURN VARCHAR2;

   FUNCTION pathname (FILE IN VARCHAR2)
      RETURN VARCHAR2;

   FUNCTION lastmodified (FILE IN VARCHAR2)
      RETURN NUMBER;

   /* Not a date; only useful for comparisions. */
   FUNCTION dircontents (dir IN VARCHAR2, delim IN VARCHAR2)
      RETURN VARCHAR2;

   PROCEDURE getdircontents (
      dir     IN       VARCHAR2
    , files   IN OUT   VARCHAR2
    , delim   IN       VARCHAR2 DEFAULT c_dirdelim
   );

   PROCEDURE getdircontents (
      dir     IN       VARCHAR2
    , files   IN OUT   list_aat
    , delim   IN       VARCHAR2 DEFAULT c_dirdelim
   );

   PROCEDURE getdircontents (
      dir          IN       VARCHAR2
    , filter       IN       VARCHAR2
    , files        IN OUT   list_aat
    , match_case   IN       BOOLEAN DEFAULT TRUE
    , delim        IN       VARCHAR2 DEFAULT c_dirdelim
   );

   PROCEDURE showdircontents (
      dir          IN   VARCHAR2
    , filter       IN   VARCHAR2
    , match_case   IN   BOOLEAN := TRUE
    , delim        IN   VARCHAR2 := c_dirdelim
   );

   FUNCTION DELETE (FILE IN VARCHAR2)
      RETURN BOOLEAN;

   PROCEDURE DELETE (
      dir            IN   VARCHAR2
    , FILE           IN   VARCHAR2 := NULL
    , match_case     IN   BOOLEAN := TRUE
    , show_deletes   IN   BOOLEAN := FALSE
   );

   FUNCTION mkdir (dir IN VARCHAR2)
      RETURN BOOLEAN;

   FUNCTION RENAME (
      oldfile   IN   VARCHAR2
    , newfile   IN   VARCHAR2
    , showme    IN   BOOLEAN := FALSE
   )
      RETURN BOOLEAN;

   PROCEDURE chgext (
      dir        IN   VARCHAR2
    , oldext     IN   VARCHAR2
    , newext     IN   VARCHAR2
    , filter     IN   VARCHAR2 := '%'
    , showonly   IN   BOOLEAN := FALSE
   );

   /* UTL_FILE compatibility operations */
   FUNCTION fopen (
      LOCATION    IN   VARCHAR2
    , filename    IN   VARCHAR2
    , open_mode   IN   VARCHAR2
   )
      RETURN UTL_FILE.file_type;

   FUNCTION fopen (
      LOCATION       IN   VARCHAR2
    , filename       IN   VARCHAR2
    , open_mode      IN   VARCHAR2
    , max_linesize   IN   BINARY_INTEGER
   )
      RETURN UTL_FILE.file_type;

   PROCEDURE fclose (FILE IN OUT UTL_FILE.file_type);

   PROCEDURE fclose_all;

   PROCEDURE fflush (FILE IN UTL_FILE.file_type);

   PROCEDURE get_line (FILE IN UTL_FILE.file_type, buffer OUT VARCHAR2);

   PROCEDURE get_line (
      FILE     IN       UTL_FILE.file_type
    , buffer   OUT      VARCHAR2
    , eof      OUT      BOOLEAN
   );

   PROCEDURE put (FILE IN UTL_FILE.file_type, buffer IN VARCHAR2);

   PROCEDURE new_line (FILE IN UTL_FILE.file_type, lines IN NATURAL := 1);

   PROCEDURE put_line (FILE IN UTL_FILE.file_type, buffer IN VARCHAR2);

   PROCEDURE putf (
      FILE     IN   UTL_FILE.file_type
    , format   IN   VARCHAR2
    , arg1     IN   VARCHAR2 DEFAULT NULL
    , arg2     IN   VARCHAR2 DEFAULT NULL
    , arg3     IN   VARCHAR2 DEFAULT NULL
    , arg4     IN   VARCHAR2 DEFAULT NULL
    , arg5     IN   VARCHAR2 DEFAULT NULL
   );

   FUNCTION loblength (dir IN VARCHAR2, FILE IN VARCHAR2)
      RETURN NUMBER;
END;
/

CREATE OR REPLACE PACKAGE BODY xfile
IS
   SUBTYPE procedure_name_t IS VARCHAR2 (30);

   --  g_file_name_var      VARCHAR2(100);
   g_max_line_size_con   CONSTANT PLS_INTEGER := 32767;
   tot_line_size_var              PLS_INTEGER := 0;
   /* Used to handle conversion from number to boolean. */
   g_true                         INTEGER;
   g_false                        INTEGER;

   FUNCTION tval
      RETURN NUMBER
   AS
      LANGUAGE JAVA
      NAME 'JFile.tVal () return int';

   FUNCTION fval
      RETURN NUMBER
   AS
      LANGUAGE JAVA
      NAME 'JFile.fVal () return int';

   FUNCTION separator (FILE IN VARCHAR2)
      RETURN VARCHAR2
   AS
      LANGUAGE JAVA
      NAME 'JFile.separator (java.lang.String) return java.lang.String';

   FUNCTION icanread (FILE IN VARCHAR2)
      RETURN NUMBER
   AS
      LANGUAGE JAVA
      NAME 'JFile.canRead (java.lang.String) return int';

   FUNCTION icanwrite (FILE IN VARCHAR2)
      RETURN NUMBER
   AS
      LANGUAGE JAVA
      NAME 'JFile.canWrite (java.lang.String) return int';

   FUNCTION iexists (FILE IN VARCHAR2)
      RETURN NUMBER
   AS
      LANGUAGE JAVA
      NAME 'JFile.exists (java.lang.String) return int';

   FUNCTION iisdirectory (FILE IN VARCHAR2)
      RETURN NUMBER
   AS
      LANGUAGE JAVA
      NAME 'JFile.isDirectory (java.lang.String) return int';

   FUNCTION iisfile (FILE IN VARCHAR2)
      RETURN NUMBER
   AS
      LANGUAGE JAVA
      NAME 'JFile.isFile (java.lang.String) return int';

---------------------
   FUNCTION canread (FILE IN VARCHAR2)
      RETURN BOOLEAN
   AS
   BEGIN
      RETURN icanread (FILE) = g_true;
   END canread;

   FUNCTION canwrite (FILE IN VARCHAR2)
      RETURN BOOLEAN
   AS
   BEGIN
      RETURN icanwrite (FILE) = g_true;
   END canwrite;

   FUNCTION EXISTS (FILE IN VARCHAR2)
      RETURN BOOLEAN
   AS
   BEGIN
      RETURN iexists (FILE) = g_true;
   END EXISTS;

   FUNCTION isdirectory (FILE IN VARCHAR2)
      RETURN BOOLEAN
   AS
   BEGIN
      RETURN iisdirectory (FILE) = g_true;
   END isdirectory;

   FUNCTION isfile (FILE IN VARCHAR2)
      RETURN BOOLEAN
   AS
   BEGIN
      RETURN iisfile (FILE) = g_true;
   END isfile;

---------------------
   FUNCTION LENGTH (FILE IN VARCHAR2)
      RETURN NUMBER
   AS
      LANGUAGE JAVA
      NAME 'JFile.length (java.lang.String) return long';

   FUNCTION parentdir (FILE IN VARCHAR2)
      RETURN VARCHAR2
   AS
      LANGUAGE JAVA
      NAME 'JFile.parentDir (java.lang.String) return java.lang.String';

   FUNCTION pathname (FILE IN VARCHAR2)
      RETURN VARCHAR2
   AS
      LANGUAGE JAVA
      NAME 'JFile.pathName (java.lang.String) return java.lang.String';

   FUNCTION lastmodified (FILE IN VARCHAR2)
      RETURN NUMBER
   AS
      LANGUAGE JAVA
      NAME 'JFile.lastModified (java.lang.String) return long';

   FUNCTION dircontents (dir IN VARCHAR2, delim IN VARCHAR2)
      RETURN VARCHAR2
   AS
      LANGUAGE JAVA
      NAME 'JFile.dirContents (java.lang.String, java.lang.String) return java.lang.String';

   PROCEDURE getdircontents (
      dir     IN       VARCHAR2
    , files   IN OUT   VARCHAR2
    , delim   IN       VARCHAR2 DEFAULT c_dirdelim
   )
   IS
   BEGIN
      files := dircontents (dir, delim);
   END getdircontents;

   PROCEDURE list_to_coll (
      str                 IN       VARCHAR2
    , list_inout          IN OUT   list_aat
    , delim               IN       VARCHAR2 DEFAULT c_dirdelim
    , append_to_list_in   IN       BOOLEAN DEFAULT TRUE
   )
   IS
      v_loc        PLS_INTEGER;
      v_row        PLS_INTEGER;
      v_startloc   PLS_INTEGER := 1;
      v_item       maxvc2;
   BEGIN
      IF append_to_list_in
      THEN
         v_row := NVL (list_inout.LAST, 0) + 1;
      ELSE
         list_inout.DELETE;
         v_row := 1;
      END IF;

      IF str IS NOT NULL
      THEN
         LOOP
            v_loc := INSTR (str, delim, v_startloc);

            IF v_loc = v_startloc
            THEN
               v_item := NULL;
            ELSIF v_loc = 0
            THEN
               v_item := SUBSTR (str, v_startloc);
            ELSE
               v_item := SUBSTR (str, v_startloc, v_loc - v_startloc);
            END IF;

            list_inout (v_row) := v_item;

            IF v_loc = 0
            THEN
               EXIT;
            ELSE
               v_startloc := v_loc + 1;
               v_row := v_row + 1;
            END IF;
         END LOOP;
      END IF;
   END list_to_coll;

   PROCEDURE getdircontents (
      dir     IN       VARCHAR2
    , files   IN OUT   list_aat
    , delim   IN       VARCHAR2 DEFAULT c_dirdelim
   )
   IS
   --    filenum PLS_INTEGER;
   BEGIN
      list_to_coll (dircontents (dir, delim)
                  , files
                  , delim
                  , append_to_list_in      => FALSE
                   );
   END getdircontents;

   PROCEDURE getdircontents (
      dir          IN       VARCHAR2
    , filter       IN       VARCHAR2
    , files        IN OUT   list_aat
    , match_case   IN       BOOLEAN DEFAULT TRUE
    , delim        IN       VARCHAR2 DEFAULT c_dirdelim
   )
   IS
      FUNCTION MATCHED (file1 IN VARCHAR2, file2 IN VARCHAR2)
         RETURN BOOLEAN
      IS
         retval   BOOLEAN := FALSE;
      BEGIN
         IF match_case
         THEN
            retval := file1 LIKE file2;
         ELSE
            retval := LOWER (file1) LIKE LOWER (file2);
         END IF;

         RETURN retval;
      END MATCHED;
   BEGIN
      list_to_coll (dircontents (dir, delim)
                  , files
                  , delim
                  , append_to_list_in      => FALSE
                   );

      IF files.COUNT > 0
      THEN
         FOR i IN files.FIRST .. files.LAST
         LOOP
            IF NOT MATCHED (files (i), filter)
            THEN
               files.DELETE (i);
            END IF;
         END LOOP;
      END IF;
   END getdircontents;

   PROCEDURE showdircontents (
      dir          IN   VARCHAR2
    , filter       IN   VARCHAR2
    , match_case   IN   BOOLEAN := TRUE
    , delim        IN   VARCHAR2 := c_dirdelim
   )
   IS
      filestab   list_aat;
   BEGIN
      getdircontents (dir, filter, filestab, match_case, delim);

      IF filestab.COUNT > 0
      THEN
         FOR i IN filestab.FIRST .. filestab.LAST
         LOOP
            DBMS_OUTPUT.put_line (filestab (i));
         END LOOP;
      END IF;
   END showdircontents;

---------------------
   FUNCTION idelete (FILE IN VARCHAR2)
      RETURN NUMBER
   AS
      LANGUAGE JAVA
      NAME 'JFile.delete (java.lang.String) return int';

   FUNCTION DELETE (FILE IN VARCHAR2)
      RETURN BOOLEAN
   AS
   BEGIN
      RETURN idelete (FILE) = g_true;
   EXCEPTION
      WHEN OTHERS
      THEN
         DBMS_OUTPUT.put_line ('Error deleting: ' || SQLERRM);
         RETURN FALSE;
   END DELETE;

   PROCEDURE DELETE (
      dir            IN   VARCHAR2
    , FILE           IN   VARCHAR2 := NULL
    , match_case     IN   BOOLEAN := TRUE
    , show_deletes   IN   BOOLEAN := FALSE
   )
   IS
      filestab   list_aat;
      --    filenum  PLS_INTEGER;
      deleted    BOOLEAN         := FALSE;
      v_file     VARCHAR2 (2000);
   BEGIN
      getdircontents (dir, FILE, filestab);

      IF filestab.COUNT > 0
      THEN
         FOR filenum IN filestab.FIRST .. filestab.LAST
         LOOP
            v_file :=
                   dir || separator (filestab (filenum))
                   || filestab (filenum);
            deleted := xfile.DELETE (v_file);

            IF show_deletes AND deleted
            THEN
               DBMS_OUTPUT.put_line ('Deleted ' || v_file);
            ELSIF show_deletes AND NOT deleted
            THEN
               DBMS_OUTPUT.put_line ('Unable to delete ' || v_file);
            END IF;
         END LOOP;
      END IF;
   END DELETE;

   FUNCTION imkdir (dir IN VARCHAR2)
      RETURN NUMBER
   AS
      LANGUAGE JAVA
      NAME 'JFile.mkdir (java.lang.String) return int';

   FUNCTION mkdir (dir IN VARCHAR2)
      RETURN BOOLEAN
   AS
   BEGIN
      RETURN imkdir (dir) = g_true;
   END mkdir;

   FUNCTION irename (oldfile IN VARCHAR2, newfile IN VARCHAR2)
      RETURN NUMBER
   AS
      LANGUAGE JAVA
      NAME 'JFile.rename (java.lang.String, java.lang.String) return int';

   FUNCTION RENAME (
      oldfile   IN   VARCHAR2
    , newfile   IN   VARCHAR2
    , showme    IN   BOOLEAN := FALSE
   )
      RETURN BOOLEAN
   AS
      v_bool   BOOLEAN := irename (oldfile, newfile) = g_true;
   BEGIN
      IF v_bool AND showme
      THEN
         DBMS_OUTPUT.put_line ('Renamed ' || oldfile || ' to ' || newfile);
      END IF;

      RETURN v_bool;
   END RENAME;

   PROCEDURE chgext (
      dir        IN   VARCHAR2
    , oldext     IN   VARCHAR2
    , newext     IN   VARCHAR2
    , filter     IN   VARCHAR2 := '%'
    , showonly   IN   BOOLEAN := FALSE
   )
   IS
      files     list_aat;
      --    filenum PLS_INTEGER;
      newfile   VARCHAR2 (200);
      renamed   BOOLEAN;
   BEGIN
      xfile.getdircontents (dir
                          , filter || '.' || oldext
                          , files
                          , match_case      => FALSE
                           );

      IF files.COUNT > 0
      THEN
         FOR filenum IN files.FIRST .. files.LAST
         LOOP
            newfile :=
                  dir
               || '\'
               || SUBSTR (files (filenum), 1, INSTR (files (filenum), '.'))
               || newext;

            IF showonly
            THEN
               DBMS_OUTPUT.put_line ('Change to ' || newfile);
            ELSE
               renamed :=
                        xfile.RENAME (dir || '\' || files (filenum), newfile);
            END IF;
         END LOOP;
      END IF;
   END chgext;

   /* UTL_FILE compatibility operations. */
   FUNCTION fopen (
      LOCATION    IN   VARCHAR2
    , filename    IN   VARCHAR2
    , open_mode   IN   VARCHAR2
   )
      RETURN UTL_FILE.file_type
   IS
      procedure_name_con   procedure_name_t := 'fopen1';
   BEGIN
      tot_line_size_var := 0;
      RETURN UTL_FILE.fopen (LOCATION, filename, open_mode);
   EXCEPTION
      WHEN UTL_FILE.invalid_maxlinesize
      THEN
         fclose_all;
         RAISE invalid_maxlinesize;
      WHEN UTL_FILE.invalid_mode
      THEN
         fclose_all;
         RAISE invalid_mode;
      WHEN UTL_FILE.invalid_operation
      THEN
         fclose_all;
         RAISE invalid_operation;
      WHEN UTL_FILE.invalid_path
      THEN
         fclose_all;
         RAISE invalid_path;
      WHEN UTL_FILE.internal_error
      THEN
         fclose_all;
         RAISE internal_error;
      WHEN OTHERS
      THEN
         fclose_all;
         raise_application_error (-20100
                                , SUBSTR (procedure_name_con || SQLERRM
                                        , 1
                                        , 240
                                         )
                                 );
   END fopen;

   FUNCTION fopen (
      LOCATION       IN   VARCHAR2
    , filename       IN   VARCHAR2
    , open_mode      IN   VARCHAR2
    , max_linesize   IN   BINARY_INTEGER
   )
      RETURN UTL_FILE.file_type
   IS
      procedure_name_con   procedure_name_t := 'fopen';
   BEGIN
      IF max_linesize > g_max_line_size_con
      THEN
         RAISE invalid_maxlinesize;
      ELSE
         tot_line_size_var := 0;
         RETURN UTL_FILE.fopen (LOCATION, filename, open_mode, max_linesize);
      END IF;
   EXCEPTION
      WHEN invalid_maxlinesize
      THEN
         RAISE invalid_maxlinesize;
      WHEN UTL_FILE.invalid_maxlinesize
      THEN
         fclose_all;
         RAISE invalid_maxlinesize;
      WHEN UTL_FILE.invalid_mode
      THEN
         fclose_all;
         RAISE invalid_mode;
      WHEN UTL_FILE.invalid_operation
      THEN
         fclose_all;
         RAISE invalid_operation;
      WHEN UTL_FILE.invalid_path
      THEN
         fclose_all;
         RAISE invalid_path;
      WHEN UTL_FILE.internal_error
      THEN
         fclose_all;
         RAISE internal_error;
      WHEN OTHERS
      THEN
         fclose_all;
         raise_application_error (g_others_nbr
                                , SUBSTR (procedure_name_con || SQLERRM
                                        , 1
                                        , 240
                                         )
                                 );
   END fopen;

   PROCEDURE fclose (FILE IN OUT UTL_FILE.file_type)
   IS
      procedure_name_con   procedure_name_t := 'fclose';
   BEGIN
      IF UTL_FILE.is_open (FILE)
      THEN
         UTL_FILE.fclose (FILE);
      END IF;
   EXCEPTION
      WHEN UTL_FILE.invalid_filehandle
      THEN
         fclose_all;
         RAISE invalid_filehandle;
      WHEN UTL_FILE.write_error
      THEN
         fclose_all;
         RAISE write_error;
      WHEN OTHERS
      THEN
         fclose_all;
         raise_application_error (g_others_nbr
                                , SUBSTR (procedure_name_con || SQLERRM
                                        , 1
                                        , 240
                                         )
                                 );
   END fclose;

   PROCEDURE fclose_all
   IS
      procedure_name_con   procedure_name_t := 'fclose_all';
   BEGIN
      UTL_FILE.fclose_all;
   EXCEPTION
      WHEN UTL_FILE.write_error
      THEN
         RAISE write_error;
      WHEN OTHERS
      THEN
         raise_application_error (g_others_nbr
                                , SUBSTR (procedure_name_con || SQLERRM
                                        , 1
                                        , 240
                                         )
                                 );
   END fclose_all;

   PROCEDURE fflush (FILE IN UTL_FILE.file_type)
   IS
      procedure_name_con   procedure_name_t := 'fflush';
   BEGIN
      UTL_FILE.fflush (FILE);
   EXCEPTION
      WHEN UTL_FILE.invalid_filehandle
      THEN
         fclose_all;
         RAISE invalid_filehandle;
      WHEN UTL_FILE.invalid_operation
      THEN
         fclose_all;
         RAISE invalid_operation;
      WHEN UTL_FILE.write_error
      THEN
         fclose_all;
         RAISE write_error;
      WHEN OTHERS
      THEN
         fclose_all;
         raise_application_error (g_others_nbr
                                , SUBSTR (procedure_name_con || SQLERRM
                                        , 1
                                        , 240
                                         )
                                 );
   END fflush;

   PROCEDURE get_line (FILE IN UTL_FILE.file_type, buffer OUT VARCHAR2)
   IS
      procedure_name_con   procedure_name_t := 'get_line1';
   BEGIN
      UTL_FILE.get_line (FILE, buffer);
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         -- no_data_found raise when trying to read beyond end of file.
         RAISE eof;
      WHEN VALUE_ERROR
      THEN
         fclose_all;
         RAISE line_too_long;
      WHEN UTL_FILE.invalid_filehandle
      THEN
         fclose_all;
         RAISE invalid_filehandle;
      WHEN UTL_FILE.invalid_operation
      THEN
         fclose_all;
         RAISE invalid_operation;
      WHEN UTL_FILE.read_error
      THEN
         fclose_all;
         RAISE read_error;
      WHEN OTHERS
      THEN
         fclose_all;
         raise_application_error (g_others_nbr
                                , SUBSTR (procedure_name_con || SQLERRM
                                        , 1
                                        , 240
                                         )
                                 );
   END get_line;

   PROCEDURE get_line (
      FILE     IN       UTL_FILE.file_type
    , buffer   OUT      VARCHAR2
    , eof      OUT      BOOLEAN
   )
   IS
      procedure_name_con   procedure_name_t := 'get_line2';
   BEGIN
      UTL_FILE.get_line (FILE, buffer);
      eof := FALSE;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         fclose_all;
         buffer := NULL;
         eof := TRUE;
      WHEN VALUE_ERROR
      THEN
         fclose_all;
         RAISE line_too_long;
      WHEN UTL_FILE.invalid_filehandle
      THEN
         fclose_all;
         RAISE invalid_filehandle;
      WHEN UTL_FILE.invalid_operation
      THEN
         fclose_all;
         RAISE invalid_operation;
      WHEN UTL_FILE.read_error
      THEN
         fclose_all;
         RAISE read_error;
      WHEN OTHERS
      THEN
         fclose_all;
         raise_application_error (g_others_nbr
                                , SUBSTR (procedure_name_con || SQLERRM
                                        , 1
                                        , 240
                                         )
                                 );
   END get_line;

   PROCEDURE put (FILE IN UTL_FILE.file_type, buffer IN VARCHAR2)
   IS
      procedure_name_con   procedure_name_t := 'put';
   BEGIN
      tot_line_size_var := tot_line_size_var + LENGTH (buffer);

      IF tot_line_size_var > g_max_line_size_con
      THEN
         RAISE line_too_long;
      END IF;

      UTL_FILE.put (FILE, buffer);
   EXCEPTION
      WHEN line_too_long
      THEN
         fclose_all;
         raise_application_error (g_line_too_long_err_nbr
                                ,    procedure_name_con
                                  || ': the total line length ('
                                  || tot_line_size_var
                                  || ') exceeds the maximum length ('
                                  || g_max_line_size_con
                                  || ')'
                                 );
      WHEN UTL_FILE.invalid_filehandle
      THEN
         fclose_all;
         RAISE invalid_filehandle;
      WHEN UTL_FILE.invalid_operation
      THEN
         fclose_all;
         RAISE invalid_operation;
      WHEN UTL_FILE.write_error
      THEN
         fclose_all;
         RAISE write_error;
      WHEN OTHERS
      THEN
         fclose_all;
         raise_application_error (g_others_nbr
                                , SUBSTR (procedure_name_con || SQLERRM
                                        , 1
                                        , 240
                                         )
                                 );
   END put;

   PROCEDURE new_line (FILE IN UTL_FILE.file_type, lines IN NATURAL := 1)
   IS
      procedure_name_con   procedure_name_t := 'new_line';
   BEGIN
      UTL_FILE.new_line (FILE, lines);
   EXCEPTION
      WHEN VALUE_ERROR
      THEN
         fclose_all;
         RAISE line_nbr_error;
      WHEN UTL_FILE.invalid_filehandle
      THEN
         fclose_all;
         RAISE invalid_filehandle;
      WHEN UTL_FILE.invalid_operation
      THEN
         fclose_all;
         RAISE invalid_operation;
      WHEN UTL_FILE.write_error
      THEN
         fclose_all;
         RAISE write_error;
      WHEN OTHERS
      THEN
         fclose_all;
         raise_application_error (g_others_nbr
                                , SUBSTR (procedure_name_con || SQLERRM
                                        , 1
                                        , 240
                                         )
                                 );
   END new_line;

   PROCEDURE put_line (FILE IN UTL_FILE.file_type, buffer IN VARCHAR2)
   IS
      procedure_name_con   procedure_name_t := 'put_line';
   BEGIN
      tot_line_size_var := tot_line_size_var + LENGTH (buffer);

      IF tot_line_size_var > g_max_line_size_con
      THEN
         RAISE line_too_long;
      END IF;

      UTL_FILE.put_line (FILE, buffer);
   EXCEPTION
      WHEN line_too_long
      THEN
         fclose_all;
         raise_application_error (g_line_too_long_err_nbr
                                ,    procedure_name_con
                                  || ': the total line length ('
                                  || tot_line_size_var
                                  || ') exceeds the maximum length ('
                                  || g_max_line_size_con
                                  || ')'
                                 );
      WHEN UTL_FILE.invalid_filehandle
      THEN
         fclose_all;
         RAISE invalid_filehandle;
      WHEN UTL_FILE.invalid_operation
      THEN
         fclose_all;
         RAISE invalid_operation;
      WHEN UTL_FILE.write_error
      THEN
         fclose_all;
         RAISE write_error;
      WHEN OTHERS
      THEN
         fclose_all;
         raise_application_error (g_others_nbr
                                , SUBSTR (procedure_name_con || SQLERRM
                                        , 1
                                        , 240
                                         )
                                 );
   END put_line;

   PROCEDURE putf (
      FILE     IN   UTL_FILE.file_type
    , format   IN   VARCHAR2
    , arg1     IN   VARCHAR2 DEFAULT NULL
    , arg2     IN   VARCHAR2 DEFAULT NULL
    , arg3     IN   VARCHAR2 DEFAULT NULL
    , arg4     IN   VARCHAR2 DEFAULT NULL
    , arg5     IN   VARCHAR2 DEFAULT NULL
   )
   IS
      procedure_name_con   procedure_name_t := 'putf';
   BEGIN
      UTL_FILE.putf (FILE, format, arg1, arg2, arg3, arg4, arg5);
   EXCEPTION
      WHEN UTL_FILE.invalid_filehandle
      THEN
         fclose_all;
         RAISE invalid_filehandle;
      WHEN UTL_FILE.invalid_operation
      THEN
         fclose_all;
         RAISE invalid_operation;
      WHEN UTL_FILE.write_error
      THEN
         fclose_all;
         RAISE write_error;
      WHEN OTHERS
      THEN
         fclose_all;
         raise_application_error (g_others_nbr
                                , SUBSTR (procedure_name_con || SQLERRM
                                        , 1
                                        , 240
                                         )
                                 );
   END putf;

   FUNCTION loblength (dir IN VARCHAR2, FILE IN VARCHAR2)
      RETURN NUMBER
   IS
      v_loc   BFILE := BFILENAME (dir, FILE);
   BEGIN
      RETURN DBMS_LOB.getlength (v_loc);
   END loblength;
BEGIN
   g_true := tval;
   g_false := fval;
END xfile;
/