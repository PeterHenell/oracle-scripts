CREATE OR REPLACE DIRECTORY temp AS 'c:\temp'
/

DROP TABLE emp_load
/

CREATE TABLE emp_load
  (employee_number      CHAR(5),
   employee_last_name   CHAR(20))
ORGANIZATION EXTERNAL
  (TYPE oracle_loader
   DEFAULT DIRECTORY temp
   ACCESS PARAMETERS
     (RECORDS DELIMITED BY NEWLINE
      FIELDS (employee_number      CHAR(2),
              employee_last_name   CHAR(18)
             )
     )
   LOCATION ('info.dat')
  )
/

DROP TABLE emp_load_no_file
/

CREATE TABLE emp_load_no_file
  (employee_number      CHAR(5),
   employee_last_name   CHAR(20))
ORGANIZATION EXTERNAL
  (TYPE oracle_loader
   DEFAULT DIRECTORY temp
   ACCESS PARAMETERS
     (RECORDS DELIMITED BY NEWLINE
      FIELDS (employee_number      CHAR(2),
              employee_last_name   CHAR(18)
             )
     )
   LOCATION ('no_such_file.dat')
  )
/

DROP TABLE emp_load_with_date
/

CREATE TABLE emp_load_with_date
  (employee_number      CHAR(5),
   employee_last_name   CHAR(20),
   employee_hire_date   DATE
)
ORGANIZATION EXTERNAL
  (TYPE oracle_loader
   DEFAULT DIRECTORY temp
   ACCESS PARAMETERS
     (RECORDS DELIMITED BY NEWLINE
      FIELDS (employee_number      CHAR(2),
              employee_last_name   CHAR(18)
             )
     )
   LOCATION ('info.dat')
  )
/

@exttab.pks
@exttab.pkb

CREATE OR REPLACE PACKAGE UT_EXTTAB AUTHID CURRENT_USER
/*
| Unit Test Package for EXTTAB
|
| Generated by Qute -- the Quick Unit Test Engine (www.unit-test.com)
| Generated on 2006-02-14 11:15:33
|
| This package may be run from within any PL/SQL execution environment.
| by executing the following statements:
|
|    SET SERVEROUTPUT ON FORMAT WRAPPED SIZE 1000000
|
|    BEGIN
|       EXTTAB.run_all_tests;
|    END;
|    /
|
| Results will be displayed via DBMS_OUTPUT. This package requires the
| presence of the qu_assert package. If you do not have Qute installed,
| you can download just the qu_assert package from:
|
|      http://www.unit-test.com/download/qu_assert.zip
|
| Then use the following statements to install all needed objects
| (assuming the program you want to test is already installed):
|
|    -- Assertion package
|    @qu_assert.pks
|    @qu_assert.pkb
|
|    -- Test code 
|    @UT_EXTTAB.pkg
|
*/
IS
   PROCEDURE UT_setup;
   PROCEDURE UT_teardown;
    
   PROCEDURE UT_ERROR_CODE2;
   PROCEDURE UT_ERROR_MESSAGE2;
   PROCEDURE run_all_tests;
END UT_EXTTAB;

/


CREATE OR REPLACE PACKAGE BODY UT_EXTTAB
/*
| Unit Test Package for EXTTAB
|
| Generated by Qute -- the Quick Unit Test Engine (www.unit-test.com)
| Generated on 2006-02-14 11:15:33
|
| This package may be run from within any PL/SQL execution environment.
| by executing the following statements:
|
|    SET SERVEROUTPUT ON FORMAT WRAPPED SIZE 1000000
|
|    BEGIN
|       EXTTAB.run_all_tests;
|    END;
|    /
|
| Results will be displayed via DBMS_OUTPUT. This package requires the
| presence of the qu_assert package. If you do not have Qute installed,
| you can download just the qu_assert package from:
|
|      http://www.unit-test.com/download/qu_assert.zip
|
| Then use the following statements to install all needed objects
| (assuming the program you want to test is already installed):
|
|    -- Assertion package
|    @qu_assert.pks
|    @qu_assert.pkb
|
|    -- Test code 
|    @UT_EXTTAB.pkg
|
*/
IS
FUNCTION qut#error_info RETURN VARCHAR2 IS
   l_return VARCHAR2(32767);
   l_stack VARCHAR2(32767);
BEGIN
   l_return := DBMS_UTILITY.FORMAT_ERROR_STACK;
   BEGIN
      EXECUTE IMMEDIATE
        'BEGIN :val := ''PL/SQL Error Backtrace: ''
             || CHR(10) || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE; END;'
      USING OUT l_stack;
   EXCEPTION
      WHEN OTHERS THEN l_stack := DBMS_UTILITY.FORMAT_CALL_STACK;
   END;
   RETURN l_return || CHR(10) || l_stack;
END qut#error_info;
 
   PROCEDURE UT_setup IS
   BEGIN
      NULL; -- Included to ensure that this procedure will compile if empty.
   END UT_setup;
    
   PROCEDURE UT_teardown IS
   BEGIN
      NULL; -- Included to ensure that this procedure will compile if empty.
   END UT_teardown;
    
   PROCEDURE UT_ERROR_CODE2
   -- Unit test procedure for ERROR_CODE
   IS
      PROCEDURE Invalid_data
      IS
      -- Return value of function
      "Value From Function" PLS_INTEGER;
      "Expected Value From Function" PLS_INTEGER;
         PROCEDURE setup IS
         BEGIN
            -- Qute START CUSTOM SETUP for TESTCASE {65C076F5-6A7D-417B-B43F-E185AAB59491}
            -- Place all your custom setup code between these START and END comments.
            exttab.set_custom_error_message (
'ORA-29913: error in executing ODCIEXTTABLEOPEN callout
ORA-29400: data cartridge error
KUP-04043: table column not found in external source: EMPLOYEE_HIRE_DATE');
            -- Qute END CUSTOM SETUP for TESTCASE {65C076F5-6A7D-417B-B43F-E185AAB59491}
             
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EXTTAB.ERROR_CODE(
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{65C076F5-6A7D-417B-B43F-E185AAB59491}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{65C076F5-6A7D-417B-B43F-E185AAB59491}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => -4043
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "Invalid data"');
         setup;
          
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END Invalid_data;
       
      PROCEDURE No_error
      IS
      -- Return value of function
      "Value From Function" PLS_INTEGER;
         PROCEDURE setup IS
         BEGIN
            -- Qute START CUSTOM SETUP for TESTCASE {FC64F7C3-AC5D-4490-8B2E-1EEB42C2A450}
            -- Place all your custom setup code between these START and END comments.
            exttab.set_custom_error_message ( null);
            -- Qute END CUSTOM SETUP for TESTCASE {FC64F7C3-AC5D-4490-8B2E-1EEB42C2A450}
             
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EXTTAB.ERROR_CODE(
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{FC64F7C3-AC5D-4490-8B2E-1EEB42C2A450}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{FC64F7C3-AC5D-4490-8B2E-1EEB42C2A450}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.ISNULL(
                outcome_guid_in => 'N/A'
               ,check_this_in => "Value From Function"
               ,raise_exc_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "No error"');
         setup;
          
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END No_error;
       
      PROCEDURE No_such_file
      IS
      -- Return value of function
      "Value From Function" PLS_INTEGER;
      "Expected Value From Function" PLS_INTEGER;
         PROCEDURE setup IS
         BEGIN
            -- Qute START CUSTOM SETUP for TESTCASE {6C45547A-6A88-413E-AF5C-1657C20961DA}
            -- Place all your custom setup code between these START and END comments.
            exttab.set_custom_error_message (
'ORA-29913: error in executing ODCIEXTTABLEOPEN callout
ORA-29400: data cartridge error
KUP-04040: file no_such_file.dat in TEMP not found');
            -- Qute END CUSTOM SETUP for TESTCASE {6C45547A-6A88-413E-AF5C-1657C20961DA}
             
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EXTTAB.ERROR_CODE(
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{6C45547A-6A88-413E-AF5C-1657C20961DA}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{6C45547A-6A88-413E-AF5C-1657C20961DA}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => -4040
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "No such file"');
         setup;
          
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END No_such_file;
       
   BEGIN
      DBMS_OUTPUT.PUT_LINE ('QUTE> Testing "ERROR_CODE"');
      Invalid_data;
      No_error;
      No_such_file;
       
      NULL; -- Included to ensure that this procedure will compile if empty.
   END UT_ERROR_CODE2;
    
   PROCEDURE UT_ERROR_MESSAGE2
   -- Unit test procedure for ERROR_MESSAGE
   IS
      PROCEDURE Invalid_data
      IS
      -- Return value of function
      "Value From Function" VARCHAR2(32767);
      "Expected Value From Function" VARCHAR2(32767);
         PROCEDURE setup IS
         BEGIN
            -- Qute START CUSTOM SETUP for TESTCASE {809EE700-C822-48F2-9582-DF8A5CAED1B9}
            -- Place all your custom setup code between these START and END comments.
            exttab.set_custom_error_message (
'ORA-29913: error in executing ODCIEXTTABLEOPEN callout
ORA-29400: data cartridge error
KUP-04043: table column not found in external source: EMPLOYEE_HIRE_DATE');
            -- Qute END CUSTOM SETUP for TESTCASE {809EE700-C822-48F2-9582-DF8A5CAED1B9}
             
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EXTTAB.ERROR_MESSAGE(
                  TEXT_ONLY_IN => TRUE
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{809EE700-C822-48F2-9582-DF8A5CAED1B9}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{809EE700-C822-48F2-9582-DF8A5CAED1B9}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => 'table column not found in external source: EMPLOYEE_HIRE_DATE'
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "Invalid data"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END Invalid_data;
       
      PROCEDURE INVALID_DATA_FULL_MESSAGE
      IS
      -- Return value of function
      "Value From Function" VARCHAR2(32767);
      "Expected Value From Function" VARCHAR2(32767);
         PROCEDURE setup IS
         BEGIN
            -- Qute START CUSTOM SETUP for TESTCASE {94EA2BD0-5C13-492E-BE73-C64769491092}
            -- Place all your custom setup code between these START and END comments.
            exttab.set_custom_error_message (
'ORA-29913: error in executing ODCIEXTTABLEOPEN callout
ORA-29400: data cartridge error
KUP-04043: table column not found in external source: EMPLOYEE_HIRE_DATE');
            -- Qute END CUSTOM SETUP for TESTCASE {94EA2BD0-5C13-492E-BE73-C64769491092}
             
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EXTTAB.ERROR_MESSAGE(
                  TEXT_ONLY_IN => FALSE
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{94EA2BD0-5C13-492E-BE73-C64769491092}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{94EA2BD0-5C13-492E-BE73-C64769491092}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => 'KUP-04043: table column not found in external source: EMPLOYEE_HIRE_DATE'
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "Invalid data - full message"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END INVALID_DATA_FULL_MESSAGE;
       
      PROCEDURE No_error
      IS
      -- Return value of function
      "Value From Function" VARCHAR2(32767);
      "Expected Value From Function" VARCHAR2(32767);
         PROCEDURE setup IS
         BEGIN
            -- Qute START CUSTOM SETUP for TESTCASE {0E480924-4F0A-45CC-BB0A-1D879AAF5965}
            -- Place all your custom setup code between these START and END comments.
            exttab.set_custom_error_message ( null);    
            -- Qute END CUSTOM SETUP for TESTCASE {0E480924-4F0A-45CC-BB0A-1D879AAF5965}
             
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EXTTAB.ERROR_MESSAGE(
                  TEXT_ONLY_IN => TRUE
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{0E480924-4F0A-45CC-BB0A-1D879AAF5965}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{0E480924-4F0A-45CC-BB0A-1D879AAF5965}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.ISNULL(
                outcome_guid_in => 'N/A'
               ,check_this_in => "Value From Function"
               ,raise_exc_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "No error"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END No_error;
       
      PROCEDURE No_such_file
      IS
      -- Return value of function
      "Value From Function" VARCHAR2(32767);
      "Expected Value From Function" VARCHAR2(32767);
         PROCEDURE setup IS
         BEGIN
            -- Qute START CUSTOM SETUP for TESTCASE {57225524-B214-4EC4-87B7-A9EB5063073A}
            -- Place all your custom setup code between these START and END comments.
            exttab.set_custom_error_message (
'ORA-29913: error in executing ODCIEXTTABLEOPEN callout
ORA-29400: data cartridge error
KUP-04040: file no_such_file.dat in TEMP not found');
            -- Qute END CUSTOM SETUP for TESTCASE {57225524-B214-4EC4-87B7-A9EB5063073A}
             
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EXTTAB.ERROR_MESSAGE(
                  TEXT_ONLY_IN => TRUE
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{57225524-B214-4EC4-87B7-A9EB5063073A}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{57225524-B214-4EC4-87B7-A9EB5063073A}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => 'file no_such_file.dat in TEMP not found'
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "No such file"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END No_such_file;
       
      PROCEDURE NO_SUCH_FILE_FULL_MESSAGE
      IS
      -- Return value of function
      "Value From Function" VARCHAR2(32767);
      "Expected Value From Function" VARCHAR2(32767);
         PROCEDURE setup IS
         BEGIN
            -- Qute START CUSTOM SETUP for TESTCASE {5DFB08C6-C7F0-45D9-88F0-0F1EB2A7AC70}
            -- Place all your custom setup code between these START and END comments.
            exttab.set_custom_error_message (
'ORA-29913: error in executing ODCIEXTTABLEOPEN callout
ORA-29400: data cartridge error
KUP-04040: file no_such_file.dat in TEMP not found');
            -- Qute END CUSTOM SETUP for TESTCASE {5DFB08C6-C7F0-45D9-88F0-0F1EB2A7AC70}
             
            NULL; -- Included to ensure that this procedure will compile if empty.
         END setup;
          
         PROCEDURE set_in_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_in_values;
          
         PROCEDURE set_expected_values IS
         BEGIN 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END set_expected_values;
          
         PROCEDURE call_the_program IS s#time NUMBER; e#time NUMBER;
         BEGIN
         
         s#time := DBMS_UTILITY.GET_TIME;
            "Value From Function" :=
            EXTTAB.ERROR_MESSAGE(
                  TEXT_ONLY_IN => FALSE
            );
            e#time := DBMS_UTILITY.GET_TIME;
            -- qu_assert.report_elapsed_time ('{5DFB08C6-C7F0-45D9-88F0-0F1EB2A7AC70}', s#time, e#time);
            
            EXCEPTION
            WHEN OTHERS THEN 
               qu_assert.report_result('{5DFB08C6-C7F0-45D9-88F0-0F1EB2A7AC70}', 'RUNTIME-ERROR', qut#error_info);
         END call_the_program;
          
         PROCEDURE check_out_args_and_return IS
         BEGIN
            DBMS_OUTPUT.PUT_LINE ('QUTE>    Outcome "Value returned by function"');
            qu_assert.compare_two_values(
                outcome_guid_in => 'N/A'
               ,operator_in => 'EQ'
               ,check_this_in => "Value From Function"
               ,against_this_in => 'KUP-04040: file no_such_file.dat in TEMP not found'
               ,raise_exc_in => FALSE
               ,null_ok_in => TRUE
               ,truncate_in => FALSE
               );
 
            NULL; -- Included to ensure that this procedure will compile if empty.
         END check_out_args_and_return;
          
         PROCEDURE teardown IS
         BEGIN
            NULL; -- Included to ensure that this procedure will compile if empty.
         END teardown;
          
      BEGIN
         DBMS_OUTPUT.PUT_LINE ('QUTE>  Test case "No such file - full message"');
         setup;
          
         set_in_values;
         set_expected_values;
         call_the_program;
         check_out_args_and_return;
          
         teardown;
          
      END NO_SUCH_FILE_FULL_MESSAGE;
       
   BEGIN
      DBMS_OUTPUT.PUT_LINE ('QUTE> Testing "ERROR_MESSAGE"');
      Invalid_data;
      INVALID_DATA_FULL_MESSAGE;
      No_error;
      No_such_file;
      NO_SUCH_FILE_FULL_MESSAGE;
       
      NULL; -- Included to ensure that this procedure will compile if empty.
   END UT_ERROR_MESSAGE2;
    
   PROCEDURE run_all_tests IS BEGIN
      qu_assert.set_current_harness_info (NULL, TRUE);
      UT_setup;
      UT_ERROR_CODE2;
      UT_ERROR_MESSAGE2;
      UT_teardown;
      qu_assert.set_current_harness_info (NULL, NULL);
   END run_all_tests;
END UT_EXTTAB;

/

@qu_assert.pks
@qu_assert.pkb

SET SERVEROUTPUT ON FORMAT WRAPPED SIZE 1000000

BEGIN
   ut_EXTTAB.run_all_tests;
END;
/