/* Formatted by PL/Formatter v2.0.8.0 on 2000/02/16 20:30  (08:30 PM) */
CREATE OR REPLACE PACKAGE utilitypkg
AS
   /*
   
   Generic String Parser: provide a delimiter and it returns an
   index-by table of the individual elements of the string that are
   separated by the specified delimiter.
   
   Author: "GAUTHAM CHANDRASEKARAN" <gautha@hotmail.com>
   */
   TYPE t_string IS TABLE OF VARCHAR2(2000)
      INDEX BY BINARY_INTEGER;

   m_ctr NUMBER(5);
   m_pos NUMBER(5);

   PROCEDURE parsestring (
      p_string IN VARCHAR2,
      delimiter IN VARCHAR2,
      p_t_string OUT t_string);
END utilitypkg;
/
CREATE OR REPLACE PACKAGE BODY utilitypkg
AS

   PROCEDURE parsestring (
      p_string IN VARCHAR2,
      delimiter IN VARCHAR2,
      p_t_string OUT t_string)
   IS
      m_string VARCHAR2(4000);
   BEGIN
      /* Raise a Error if the length of the delimiter is not 1 */
      IF LENGTH (delimiter) != 1
      THEN
         raise_application_error (-20001, 
             'Delimiter should be of only one character');
         RETURN;
      END IF;
      m_string := p_string;
      m_ctr := 1;
      LOOP
         m_pos := INSTR (m_string, delimiter);
         IF m_pos > 1
         THEN
            p_t_string (m_ctr) := SUBSTR (m_string, 1, m_pos - 1);
            IF (m_pos < LENGTH (m_string))
            THEN
               m_string := SUBSTR (
                              m_string,
                              m_pos + 1,
                              LENGTH (m_string) - m_pos
                           );
            ELSIF m_pos = LENGTH (m_string)
            THEN
               m_ctr := m_ctr + 1;
               p_t_string (m_ctr) := NULL;
               EXIT;
            END IF;
         ELSIF m_pos = 1
         THEN
            p_t_string (m_ctr) := NULL;
            IF m_pos < LENGTH (m_string)
            THEN
               m_string := SUBSTR (
                              m_string,
                              m_pos + 1,
                              LENGTH (m_string) - m_pos
                           );
            ELSIF m_pos = LENGTH (m_string)
            THEN
               m_ctr := m_ctr + 1;
               p_t_string (m_ctr) := NULL;
               EXIT;
            END IF;
         ELSIF m_pos = 0
         THEN

            p_t_string (m_ctr) := m_string;
            EXIT;
         END IF;
         m_ctr := m_ctr + 1;
      END LOOP;
   END;
END utilitypkg;
/

DECLARE
   /*
   Method Of Invocation of the Procedure :
   I have used the special character '*' as the delimiter and I am passing
   this as one of the parameters to invoke the procedure.The speciality of this
   procedure is if there is no expression between sucessive delimiters my
   procedure assumes that NULL is to be assigned to that expression.
   Here the package assumes that expression number 1,3,7,8 are
   NULL and assigns it to the corresponding index elements of the PL/SQL
   table.

   The output will be as follows
   SQL> /
   The Expression Number 1 is NULL
   The Expression Number 2 is abc
   The Expression Number 3 is NULL
   The Expression Number 4 is def
   The Expression Number 5 is xyz
   The Expression Number 6 is ghi
   The Expression Number 7 is NULL
   The Expression Number 8 is NULL

   */
   table_to_receive utilitypkg.t_string;
   v_counter NUMBER;
BEGIN
   utilitypkg.parsestring (
      '*abc**def*xyz*ghi**',
      '*',
      table_to_receive
   );
   FOR v_counter IN 1 .. table_to_receive.COUNT
   LOOP
      IF table_to_receive (v_counter) IS NULL
      THEN
         DBMS_OUTPUT.put_line (
            'The Expression Number '|| v_counter || ' is NULL'   );
      ELSE
         DBMS_OUTPUT.put_line (
            'The Expression Number '|| v_counter ||' is ' ||
            table_to_receive (v_counter)
         );
      END IF;
   END LOOP;
END;
/


