CREATE OR REPLACE PACKAGE type_table_cp
/*
| Generated by or retrieved from Qnxo - DO NOT MODIFY!
| Qnxo - "Get it right, do it fast" - www.qnxo.com
| Qnxo Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: June      29, 2005 00:27:58 Created By: QNXO_DEMO
*/
IS
   -- Insert one row, providing primary key if present
   PROCEDURE ins (
      id_in             IN   type_table_tp.id_t
     ,category_in       IN   type_table_tp.category_t DEFAULT NULL
     ,NAME_IN           IN   type_table_tp.name_t DEFAULT NULL
     ,description_in    IN   type_table_tp.description_t DEFAULT NULL
     ,is_default_in     IN   type_table_tp.is_default_t DEFAULT 'N'
     ,
      -- Pass false if you want errors to propagate out unhandled
      handle_error_in   IN   BOOLEAN := TRUE
   );

   -- Insert a row based on a record.
   -- Specify whether or not a primary key value should be generated.
   PROCEDURE ins (
      rec_in            IN   type_table_tp.type_table_rt
     ,gen_pky_in        IN   BOOLEAN DEFAULT FALSE
     ,sequence_in       IN   VARCHAR2 := NULL
     ,handle_error_in   IN   BOOLEAN := TRUE
   );

   -- Insert a collection of rows using FORALL; all primary key values
   -- must have already been generated, or are handled in triggers.
   PROCEDURE ins (
      rows_in           IN       type_table_tp.type_table_tc
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );

   -- Return next primary key value using the named sequence.
   FUNCTION NEXT_KEY (sequence_in IN VARCHAR2 := NULL)
      RETURN type_table_tp.id_t;

   -- Insert one row, generating hidden primary key using a sequence
   PROCEDURE ins (
      category_in       IN   type_table_tp.category_t DEFAULT NULL
     ,NAME_IN           IN   type_table_tp.name_t DEFAULT NULL
     ,description_in    IN   type_table_tp.description_t DEFAULT NULL
     ,is_default_in     IN   type_table_tp.is_default_t DEFAULT 'N'
     ,
      -- Pass false if you want errors to propagate out unhandled
      handle_error_in   IN   BOOLEAN := TRUE
   );

   -- Insert one row, returning primary key generated by sequence
   PROCEDURE ins (
      category_in       IN       type_table_tp.category_t DEFAULT NULL
     ,NAME_IN           IN       type_table_tp.name_t DEFAULT NULL
     ,description_in    IN       type_table_tp.description_t DEFAULT NULL
     ,is_default_in     IN       type_table_tp.is_default_t DEFAULT 'N'
     ,id_out            IN OUT   type_table_tp.id_t
     ,
      -- Pass false if you want errors to propagate out unhandled
      handle_error_in   IN       BOOLEAN := TRUE
   );

   -- Insert one row with function, return generated primary key
   FUNCTION ins (
      category_in       IN   type_table_tp.category_t DEFAULT NULL
     ,NAME_IN           IN   type_table_tp.name_t DEFAULT NULL
     ,description_in    IN   type_table_tp.description_t DEFAULT NULL
     ,is_default_in     IN   type_table_tp.is_default_t DEFAULT 'N'
     ,created_on_in     IN   type_table_tp.created_on_t DEFAULT NULL
     ,created_by_in     IN   type_table_tp.created_by_t DEFAULT NULL
     ,changed_on_in     IN   type_table_tp.changed_on_t DEFAULT NULL
     ,changed_by_in     IN   type_table_tp.changed_by_t DEFAULT NULL
     ,
      -- Pass false if you want errors to propagate out unhandled
      handle_error_in   IN   BOOLEAN := TRUE
   )
      RETURN type_table_tp.id_t;

   -- Update any/all columns by primary key. If you pass NULL, then
   -- the current column value is set to itself. If you need a more
   -- selected UPDATE then use one of the onecol procedures below.
   PROCEDURE upd (
      id_in               IN       type_table_tp.id_t
     ,category_in         IN       type_table_tp.category_t DEFAULT NULL
     ,NAME_IN             IN       type_table_tp.name_t DEFAULT NULL
     ,description_in      IN       type_table_tp.description_t
            DEFAULT NULL
     ,is_default_in       IN       type_table_tp.is_default_t DEFAULT NULL
     ,rows_out            OUT      PLS_INTEGER
     ,ignore_if_null_in   IN       BOOLEAN := FALSE
     ,handle_error_in     IN       BOOLEAN := TRUE
   );

   PROCEDURE upd_ins (
      id_in               IN       type_table_tp.id_t
     ,category_in         IN       type_table_tp.category_t DEFAULT NULL
     ,NAME_IN             IN       type_table_tp.name_t DEFAULT NULL
     ,description_in      IN       type_table_tp.description_t
            DEFAULT NULL
     ,is_default_in       IN       type_table_tp.is_default_t DEFAULT NULL
     ,rows_out            OUT      PLS_INTEGER
     ,ignore_if_null_in   IN       BOOLEAN := FALSE
     ,handle_error_in     IN       BOOLEAN := TRUE
   );

   PROCEDURE upd (
      rec_in              IN       type_table_tp.type_table_rt
     ,rows_out            OUT      PLS_INTEGER
     ,ignore_if_null_in   IN       BOOLEAN := FALSE
     ,handle_error_in     IN       BOOLEAN := TRUE
   );

   -- Use Native Dynamic SQL to update a single VARCHAR2 column
   -- for all rows specified by the dynamic WHERE clause
   PROCEDURE upd_onecol (
      colname_in        IN       all_tab_columns.column_name%TYPE
     ,new_value_in      IN       VARCHAR2
     ,where_in          IN       VARCHAR2 := NULL
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );

   -- Use Native Dynamic SQL to update a single DATE column
   -- for all rows specified by the dynamic WHERE clause
   PROCEDURE upd_onecol (
      colname_in        IN       all_tab_columns.column_name%TYPE
     ,new_value_in      IN       DATE
     ,where_in          IN       VARCHAR2 := NULL
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );

   -- Use Native Dynamic SQL to update a single NUMBER column
   -- for all rows specified by the dynamic WHERE clause
   PROCEDURE upd_onecol (
      colname_in        IN       all_tab_columns.column_name%TYPE
     ,new_value_in      IN       NUMBER
     ,where_in          IN       VARCHAR2 := NULL
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );

    -- Use Native Dynamic SQL to update a single VARCHAR2 column
   -- for the rows specified by the primary key value
   PROCEDURE upd_onecol_pky (
      colname_in        IN       all_tab_columns.column_name%TYPE
     ,new_value_in      IN       VARCHAR2
     ,id_in             IN       type_table_tp.id_t
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );

    -- Use Native Dynamic SQL to update a single DATE column
   -- for the rows specified by the primary key value
   PROCEDURE upd_onecol_pky (
      colname_in        IN       all_tab_columns.column_name%TYPE
     ,new_value_in      IN       DATE
     ,id_in             IN       type_table_tp.id_t
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );

    -- Use Native Dynamic SQL to update a single NUMBER column
   -- for the rows specified by the primary key value
   PROCEDURE upd_onecol_pky (
      colname_in        IN       all_tab_columns.column_name%TYPE
     ,new_value_in      IN       NUMBER
     ,id_in             IN       type_table_tp.id_t
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );

   -- Set all non-primary key columns to NULL
   PROCEDURE nullify_row (
      id_in             IN   type_table_tp.id_t
     ,handle_error_in   IN   BOOLEAN := TRUE
   );

   -- Delete one row by primary key
   PROCEDURE del (
      id_in             IN       type_table_tp.id_t
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );

   -- Delete all rows for primary key column ID
   PROCEDURE del_id (
      id_in             IN       type_table_tp.id_t
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );

   -- Delete for unique value of UN_TYPE_TABLE
   PROCEDURE del_un_type_table (
      category_in       IN       type_table_tp.category_t
     ,NAME_IN           IN       type_table_tp.name_t
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );

   -- Delete all rows specified by dynamic WHERE clause
   PROCEDURE del_by (
      where_clause_in   IN       VARCHAR2
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );

    -- Delete all rows where the specified VARCHAR2 column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in        IN       VARCHAR2
     ,colvalue_in       IN       VARCHAR2
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );

    -- Delete all rows where the specified NUMBER column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in        IN       VARCHAR2
     ,colvalue_in       IN       NUMBER
     ,rows_out          OUT      PLS_INTEGER
     ,handle_error_in   IN       BOOLEAN := TRUE
   );
END type_table_cp;
/