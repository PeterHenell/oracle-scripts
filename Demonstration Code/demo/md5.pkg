/* Formatted by PL/Formatter v3.1.2.1 on 2000/08/28 15:15 */
/***************************************************************************
**
**   PL/SQL MD5 Message-Digest Alogorithm
**
**   Version 1.0, 10/7/98
**   Debugged May 22, 2000
**   Updated August 26, 2000
**
**   Uses Fast 32-bit Unsigned Binary Operations Library
**
**   PL/SQL implementation derived from the C implementation in RFC-1321
**   and derived from the RSA Data Security, Inc. MD5 Message-Digest
**   Algorithm.  See RFC-1321 for details.
**
**   Written by Keith Gardner
**   Email: keith.gardner@gtri.gatech.edu
**
**   Debugged by Peter Vincen
**   University of Economics, Bratislava, Slovak Republic
**
**   August 26, 2000:
**   I removed the Oracle Web Server (OWS) specific code and replaced
**   it with dbms_output code and added a line to the code to set
**   server output on.  This way you can give the code a try to see
**   if you get the correct result of f96b697d7cb7938d525a2f31aaf161d0
**   in sql*plus after you start fast_bw.txt and fast_md5.txt
**
**        execute fast_md5.md5('message digest');
**
**   I did this after a couple people complained about the OWS
**   specific code and having to go in and modify the code to load
**   the package.  Yes, the code was debugged correctly by Mr. Vincen.
**
**   Please send comments, corrections, and improvements.
**
**-------------------------------------------------------------------------
**
**   Copyright (C) 1990-2, RSA Data Security, Inc. All rights reserved.
**
**   License to copy and use this software is granted provided that it
**   is identified as the "RSA Data Security, Inc. MD5 Message-Digest
**   Algorithm" in all material mentioning or referencing this software
**   or this function.
**
**   License is also granted to make and use derivative works provided
**   that such works are identified as "derived from the RSA Data
**   Security, Inc. MD5 Message-Digest Algorithm" in all material
**   mentioning or referencing the derived work.
**
**   RSA Data Security, Inc. makes no representations concerning either
**   the merchantability of this software or the suitability of this
**   software for any particular purpose. It is provided "as is"
**   without express or implied warranty of any kind.
**
**   These notices must be retained in any copies of any part of this
**   documentation and/or software.
**
***************************************************************************/

SET serveroutput on;

CREATE OR REPLACE PACKAGE fast_md5
AS
   -- digests a string using md5 and returns the result.
   FUNCTION md5_string (str IN VARCHAR2)
      RETURN VARCHAR2;

   PROCEDURE md5 (str IN VARCHAR2);

   PROCEDURE md5_trial;

   PRAGMA RESTRICT_REFERENCES (fast_md5, WNDS);
   PRAGMA RESTRICT_REFERENCES (md5_string, WNDS);
END fast_md5;
/
CREATE OR REPLACE PACKAGE BODY fast_md5
AS
/***************************************************************************
**
** DECLARATION
**
***************************************************************************/

   -- generic md5 word type
   md5_word NUMBER;

   -- array of md5 words
   TYPE md5_array IS TABLE OF md5_word%TYPE
      INDEX BY BINARY_INTEGER;

   -- md5 context
   TYPE md5_ctx IS RECORD (
   
      state                         md5_array,    -- 4 rows
      COUNT                         md5_array,    -- 2 rows
      buffer                        VARCHAR2 (64));

   -- constants for md5transform procedure
   s11 md5_word%TYPE := 7;
   s12 md5_word%TYPE := 12;
   s13 md5_word%TYPE := 17;
   s14 md5_word%TYPE := 22;
   s21 md5_word%TYPE := 5;
   s22 md5_word%TYPE := 9;
   s23 md5_word%TYPE := 14;
   s24 md5_word%TYPE := 20;
   s31 md5_word%TYPE := 4;
   s32 md5_word%TYPE := 11;
   s33 md5_word%TYPE := 16;
   s34 md5_word%TYPE := 23;
   s41 md5_word%TYPE := 6;
   s42 md5_word%TYPE := 10;
   s43 md5_word%TYPE := 15;
   s44 md5_word%TYPE := 21;
   -- message padding with length congruent to 448, modulo 512.
   padding VARCHAR2 (64)
      := CHR (128) || CHR (0) || CHR (0) || CHR (0) || CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0) ||
            CHR (0);

   /*
   ** 1 of 4 basic MD5 32-bit word functions
   */

   FUNCTION f (
      x IN md5_word%TYPE,
      y IN md5_word%TYPE,
      z IN md5_word%TYPE
   )
      RETURN md5_word%TYPE
   IS
   BEGIN
      RETURN (
                fbw.op (fbw.op (x, 'and', y),
                   'or',
                   fbw.op (fbw.comp (x), 'and', z)
                )
             );
   END f;

   /*
   ** 2 of 4 basic MD5 32-bit word functions
   */

   FUNCTION g (
      x IN md5_word%TYPE,
      y IN md5_word%TYPE,
      z IN md5_word%TYPE
   )
      RETURN md5_word%TYPE
   IS
   BEGIN
      RETURN fbw.op (fbw.op (z, 'and', x),
                'or',
                fbw.op (fbw.comp (z), 'and', y)
             );
   END g;

   /*
   ** 3 of 4 basic MD5 32-bit word functions
   */

   FUNCTION h (
      x IN md5_word%TYPE,
      y IN md5_word%TYPE,
      z IN md5_word%TYPE
   )
      RETURN md5_word%TYPE
   IS
   BEGIN
      RETURN (fbw.op (fbw.op (x, 'xor', y), 'xor', z));
   END h;

   /*
   ** 4 of 4 basic MD5 32-bit word functions
   */

   FUNCTION i (
      x IN md5_word%TYPE,
      y IN md5_word%TYPE,
      z IN md5_word%TYPE
   )
      RETURN md5_word%TYPE
   IS
   BEGIN
      RETURN (
                fbw.op (y,
                   'xor',
                   fbw.op (x, 'or', fbw.comp (z))
                )
             );
   END i;

   /*
   ** Transformation for round 1.
   */

   FUNCTION ff (
      a IN md5_word%TYPE,
      b IN md5_word%TYPE,
      c IN md5_word%TYPE,
      d IN md5_word%TYPE,
      x IN md5_word%TYPE,
      s IN md5_word%TYPE,
      ac IN md5_word%TYPE
   )
      RETURN md5_word%TYPE
   IS
   BEGIN
      RETURN fbw.lrot (a + f (b, c, d) + x + ac, s) + b;
   END ff;

   /*
   ** Transformation for round 2.
   */

   FUNCTION gg (
      a IN md5_word%TYPE,
      b IN md5_word%TYPE,
      c IN md5_word%TYPE,
      d IN md5_word%TYPE,
      x IN md5_word%TYPE,
      s IN md5_word%TYPE,
      ac IN md5_word%TYPE
   )
      RETURN md5_word%TYPE
   IS
   BEGIN
      RETURN fbw.lrot (a + g (b, c, d) + x + ac, s) + b;
   END gg;

   /*
   ** Transformation for round 3.
   */

   FUNCTION hh (
      a IN md5_word%TYPE,
      b IN md5_word%TYPE,
      c IN md5_word%TYPE,
      d IN md5_word%TYPE,
      x IN md5_word%TYPE,
      s IN md5_word%TYPE,
      ac IN md5_word%TYPE
   )
      RETURN md5_word%TYPE
   IS
   BEGIN
      RETURN fbw.lrot (a + h (b, c, d) + x + ac, s) + b;
   END hh;

   /*
   ** Transformation for round 4.
   */

   FUNCTION ii (
      a IN md5_word%TYPE,
      b IN md5_word%TYPE,
      c IN md5_word%TYPE,
      d IN md5_word%TYPE,
      x IN md5_word%TYPE,
      s IN md5_word%TYPE,
      ac IN md5_word%TYPE
   )
      RETURN md5_word%TYPE
   IS
   BEGIN
      RETURN fbw.lrot (a + i (b, c, d) + x + ac, s) + b;
   END ii;

   PROCEDURE md5_init (context IN OUT md5_ctx);

   PROCEDURE md5_update (
      context IN OUT md5_ctx,
      input IN VARCHAR2,
      input_len IN md5_word%TYPE
   );

   PROCEDURE md5_final (
      digest IN OUT VARCHAR2,
      context IN OUT md5_ctx
   );

   PROCEDURE md5_transform (
      state IN OUT md5_array,
      block IN VARCHAR2
   );

   PROCEDURE encode (
      output IN OUT VARCHAR2,
      input IN md5_array,
      len IN BINARY_INTEGER
   );

   PROCEDURE DECODE (
      output IN OUT md5_array,
      input IN VARCHAR2,
      len IN BINARY_INTEGER
   );

   FUNCTION md5_memcpy (
      output IN VARCHAR2,
      output_start IN md5_word%TYPE,
      input IN VARCHAR2,
      len IN md5_word%TYPE
   )
      RETURN VARCHAR2;

/***************************************************************************
**
** PROCEDURES AND NON-DECLARATIVE FUNCTIONS
**
***************************************************************************/

   /*
   ** Digests a string and prints the result for Oracle Web Server
   */

   PROCEDURE md5 (str IN VARCHAR2)
   IS
      context md5_ctx;
      digest VARCHAR2 (16);
      len BINARY_INTEGER;
      time_before BINARY_INTEGER;
      time_after BINARY_INTEGER;
   BEGIN
/*
      owa_util.mime_header ('text/plain', TRUE);
      htp.print ('fast_md5.md5: str=' || str);
*/
      DBMS_OUTPUT.put_line ('fast_md5.md5: str=' || str);
      len := LENGTH (str);

      IF (len IS NULL)
      THEN
         len := 0;
      END IF;

      time_before := DBMS_UTILITY.get_time;
      md5_init (context);
      md5_update (context, str, len);
      md5_final (digest, context);
      time_after := DBMS_UTILITY.get_time;
/*
      htp.print ('fast_md5.md5: digest=' || fbw.hexdump(digest));
      htp.print ('fast_md5.md5: time=' || ((time_after - time_before)/100) || ' seconds');
*/
      DBMS_OUTPUT.put_line ('fast_md5.md5: digest=' ||
                               fbw.hexdump (digest)
      );
      DBMS_OUTPUT.put_line ('fast_md5.md5: time=' ||
                               (
                                  (
                                     time_after -
                                        time_before
                                  ) /
                                     100
                               ) ||
                               ' seconds'
      );
   EXCEPTION
      WHEN OTHERS
      THEN
/*
         htp.print(SQLERRM);
*/
         DBMS_OUTPUT.put_line (SQLERRM);
   END md5;

   /*
   ** Performs a timed trial and prints the result for Oracle Web Server
   */

   PROCEDURE md5_trial
   IS
      context md5_ctx;
      digest VARCHAR2 (16);
      tblock VARCHAR2 (100);
      time_before BINARY_INTEGER;
      time_after BINARY_INTEGER;
   BEGIN
/*
      owa_util.mime_header ('text/plain', TRUE);
      htp.print ('MD-5 time trial. Digesting 10 100-byte blocks ...');
*/
      DBMS_OUTPUT.put_line ('MD-5 time trial. Digesting 10 100-byte blocks ...'
      );
      tblock := '';

      FOR i IN 1 .. 100
      LOOP
         tblock := tblock || CHR (fbw.op (i, 'and', 255));
      END LOOP;

      time_before := DBMS_UTILITY.get_time;
      md5_init (context);

      FOR i IN 1 .. 10
      LOOP
         md5_update (context, tblock, 100);
      END LOOP;

      md5_final (digest, context);
      time_after := DBMS_UTILITY.get_time;
/*
      htp.print ('digest=' || fbw.hexdump(digest));
      htp.print ('time=' || ((time_after - time_before)/100) || ' seconds');
      htp.print ('speed=' || (10 * 100 * 100/(time_after - time_before)) || ' bytes/second');
*/
      DBMS_OUTPUT.put_line ('digest=' || fbw.hexdump (digest
                                         )
      );
      DBMS_OUTPUT.put_line ('time=' ||
                               (
                                  (
                                     time_after -
                                        time_before
                                  ) /
                                     100
                               ) ||
                               ' seconds'
      );
      DBMS_OUTPUT.put_line ('speed=' ||
                               (
                                  10 * 100 * 100 /
                                     (
                                        time_after -
                                           time_before
                                     )
                               ) ||
                               ' bytes/second'
      );
   EXCEPTION
      WHEN OTHERS
      THEN
/*
         htp.print(SQLERRM);
*/
         DBMS_OUTPUT.put_line (SQLERRM);
   END md5_trial;

   /*
   ** Digests a string using md5 and returns the result.
   */

   FUNCTION md5_string (str IN VARCHAR2)
      RETURN VARCHAR2
   IS
      context md5_ctx;
      digest VARCHAR2 (16);
      len md5_word%TYPE;
   BEGIN
      len := LENGTH (str);

      IF (len IS NULL)
      THEN
         len := 0;
      END IF;

      md5_init (context);
      md5_update (context, str, len);
      md5_final (digest, context);
      RETURN (fbw.hexdump (digest));
   END md5_string;

   /*
   ** MD5 initialization. Begins an MD5 operation, writing a new context.
   */

   PROCEDURE md5_init (context IN OUT md5_ctx)
   IS
   BEGIN
      -- clear the count
      context.COUNT (0) := 0;
      context.COUNT (1) := 0;
      -- load magic initialization constants
      context.state (0) := 1732584193;
      context.state (1) := 4023233417;
      context.state (2) := 2562383102;
      context.state (3) := 271733878;
   END md5_init;

   /*
   ** MD5 block update operation. Continues an MD5 message-digest
   ** operation, processing another message block, and updating the
   ** context.
   */

   PROCEDURE md5_update (
      context IN OUT md5_ctx,
      input IN VARCHAR2,
      input_len IN md5_word%TYPE
   )
   IS
      i md5_word%TYPE;
      idx md5_word%TYPE;
      part_len md5_word%TYPE;
      tmp_string VARCHAR2 (64);
   BEGIN
      -- compute number of bytes mod 64
      idx :=
         fbw.op (fbw.rshift (context.COUNT (0), 3),
            'and',
            63
         );
      -- update number of bits
      context.COUNT (0) :=
               context.COUNT (0) + fbw.lshift (input_len,
                                      3
                                   );

      IF (context.COUNT (0) < fbw.lshift (input_len, 3))
      THEN
         context.COUNT (1) := context.COUNT (1) + 1;
      END IF;

      context.COUNT (1) :=
               context.COUNT (1) + fbw.rshift (input_len,
                                      29
                                   );
      part_len := 64 - idx;

      -- transform as many times as possible
      IF (input_len >= part_len)
      THEN
         context.buffer :=
            md5_memcpy (context.buffer,
               idx,
               input,
               part_len
            );
         md5_transform (context.state, context.buffer);
         i := part_len;

         WHILE (i + 63 < input_len)
         LOOP
            md5_transform (context.state,
               SUBSTR (input, i + 1)
            );
            i := i + 64;
         END LOOP;

         idx := 0;
      ELSE
         i := 0;
      END IF;

      -- buffer remaining input
      context.buffer :=
         md5_memcpy (context.buffer,
            idx,
            SUBSTR (input, i + 1),
            input_len - i
         );
   END md5_update;

   /*
   ** MD5 finalization. Ends an MD5 message-digest operation, writing the
   ** the message digest and zeroizing the context.
   */

   PROCEDURE md5_final (
      digest IN OUT VARCHAR2,
      context IN OUT md5_ctx
   )
   IS
      bits VARCHAR2 (8);
      idx md5_word%TYPE;
      pad_len md5_word%TYPE;
   BEGIN
      -- save number of bits
      encode (bits, context.COUNT, 8);
      -- pad out to 56 mod 64
      idx :=
         fbw.op (fbw.rshift (context.COUNT (0), 3),
            'and',
            63
         );

      IF (idx < 56)
      THEN
         pad_len := 56 - idx;
      ELSE
         pad_len := 120 - idx;
      END IF;

      md5_update (context, padding, pad_len);
      -- append length (before padding)
      md5_update (context, bits, 8);
      -- store state in digest
      encode (digest, context.state, 16);
      -- zeroize sensitive information
      md5_init (context);
      context.buffer := '';
   END md5_final;

   /*
   ** MD5 basic transformation. Transforms state based on block.
   */

   PROCEDURE md5_transform (
      state IN OUT md5_array,
      block IN VARCHAR2
   )
   IS
      a md5_word%TYPE;
      b md5_word%TYPE;
      c md5_word%TYPE;
      d md5_word%TYPE;
      x md5_array;
   BEGIN
      a := state (0);
      b := state (1);
      c := state (2);
      d := state (3);

      FOR i IN 0 .. 15
      LOOP
         x (i) := 0;
      END LOOP;

      DECODE (x, block, 64);
      -- round 1
      a := ff (a, b, c, d, x (0), s11, 3614090360);     -- 1
      d := ff (d, a, b, c, x (1), s12, 3905402710);     -- 2
      c := ff (c, d, a, b, x (2), s13, 606105819);      -- 3
      b := ff (b, c, d, a, x (3), s14, 3250441966);     -- 4
      a := ff (a, b, c, d, x (4), s11, 4118548399);     -- 5
      d := ff (d, a, b, c, x (5), s12, 1200080426);     -- 6
      c := ff (c, d, a, b, x (6), s13, 2821735955);     -- 7
      b := ff (b, c, d, a, x (7), s14, 4249261313);     -- 8
      a := ff (a, b, c, d, x (8), s11, 1770035416);     -- 9
      d := ff (d, a, b, c, x (9), s12, 2336552879);    -- 10
      c := ff (c, d, a, b, x (10), s13, 4294925233);   -- 11
      b := ff (b, c, d, a, x (11), s14, 2304563134);   -- 12
      a := ff (a, b, c, d, x (12), s11, 1804603682);   -- 13
      d := ff (d, a, b, c, x (13), s12, 4254626195);   -- 14
      c := ff (c, d, a, b, x (14), s13, 2792965006);   -- 15
      b := ff (b, c, d, a, x (15), s14, 1236535329);   -- 16
      -- round 2
      a := gg (a, b, c, d, x (1), s21, 4129170786);    -- 17
      d := gg (d, a, b, c, x (6), s22, 3225465664);    -- 18
      c := gg (c, d, a, b, x (11), s23, 643717713);    -- 19
      b := gg (b, c, d, a, x (0), s24, 3921069994);    -- 20
      a := gg (a, b, c, d, x (5), s21, 3593408605);    -- 21
      d := gg (d, a, b, c, x (10), s22, 38016083);     -- 22
      c := gg (c, d, a, b, x (15), s23, 3634488961);   -- 23
      b := gg (b, c, d, a, x (4), s24, 3889429448);    -- 24
      a := gg (a, b, c, d, x (9), s21, 568446438);     -- 25
      d := gg (d, a, b, c, x (14), s22, 3275163606);   -- 26
      c := gg (c, d, a, b, x (3), s23, 4107603335);    -- 27
      b := gg (b, c, d, a, x (8), s24, 1163531501);    -- 28
      a := gg (a, b, c, d, x (13), s21, 2850285829);   -- 29
      d := gg (d, a, b, c, x (2), s22, 4243563512);    -- 30
      c := gg (c, d, a, b, x (7), s23, 1735328473);    -- 31
      b := gg (b, c, d, a, x (12), s24, 2368359562);   -- 32
      -- round 3
      a := hh (a, b, c, d, x (5), s31, 4294588738);    -- 33
      d := hh (d, a, b, c, x (8), s32, 2272392833);    -- 34
      c := hh (c, d, a, b, x (11), s33, 1839030562);   -- 35
      b := hh (b, c, d, a, x (14), s34, 4259657740);   -- 36
      a := hh (a, b, c, d, x (1), s31, 2763975236);    -- 37
      d := hh (d, a, b, c, x (4), s32, 1272893353);    -- 38
      c := hh (c, d, a, b, x (7), s33, 4139469664);    -- 39
      b := hh (b, c, d, a, x (10), s34, 3200236656);   -- 40
      a := hh (a, b, c, d, x (13), s31, 681279174);    -- 41
      d := hh (d, a, b, c, x (0), s32, 3936430074);    -- 42
      c := hh (c, d, a, b, x (3), s33, 3572445317);    -- 43
      b := hh (b, c, d, a, x (6), s34, 76029189);      -- 44
      a := hh (a, b, c, d, x (9), s31, 3654602809);    -- 45
      d := hh (d, a, b, c, x (12), s32, 3873151461);   -- 46
      c := hh (c, d, a, b, x (15), s33, 530742520);    -- 47
      b := hh (b, c, d, a, x (2), s34, 3299628645);    -- 48
      -- round 4
      a := ii (a, b, c, d, x (0), s41, 4096336452);    -- 49
      d := ii (d, a, b, c, x (7), s42, 1126891415);    -- 50
      c := ii (c, d, a, b, x (14), s43, 2878612391);   -- 51
      b := ii (b, c, d, a, x (5), s44, 4237533241);    -- 52
      a := ii (a, b, c, d, x (12), s41, 1700485571);   -- 53
      d := ii (d, a, b, c, x (3), s42, 2399980690);    -- 54
      c := ii (c, d, a, b, x (10), s43, 4293915773);   -- 55
      b := ii (b, c, d, a, x (1), s44, 2240044497);    -- 56
      a := ii (a, b, c, d, x (8), s41, 1873313359);    -- 57
      d := ii (d, a, b, c, x (15), s42, 4264355552);   -- 58
      c := ii (c, d, a, b, x (6), s43, 2734768916);    -- 59
      b := ii (b, c, d, a, x (13), s44, 1309151649);   -- 60
      a := ii (a, b, c, d, x (4), s41, 4149444226);    -- 61
      d := ii (d, a, b, c, x (11), s42, 3174756917);   -- 62
      c := ii (c, d, a, b, x (2), s43, 718787259);     -- 63
      b := ii (b, c, d, a, x (9), s44, 3951481745);    -- 64
      state (0) := state (0) + a;
      state (1) := state (1) + b;
      state (2) := state (2) + c;
      state (3) := state (3) + d;

      -- zeroize sensitive information
      FOR i IN 0 .. 15
      LOOP
         x (i) := 0;
      END LOOP;
   END md5_transform;

   /*
   ** Encodes input (UINT4) into output (unsigned char). Assumes len is
   ** a multiple of 4.
   */

   PROCEDURE encode (
      output IN OUT VARCHAR2,
      input IN md5_array,
      len IN BINARY_INTEGER
   )
   IS
      i BINARY_INTEGER;
      j BINARY_INTEGER;
   BEGIN
      i := 0;
      j := 0;
      output := '';

      WHILE (j < len)
      LOOP
         output :=
              output || CHR (fbw.op (input (i), 'and', 255));
         output :=
            output ||
               CHR (fbw.op (fbw.rshift (input (i), 8),
                       'and',
                       255
                    ));
         output :=
            output ||
               CHR (fbw.op (fbw.rshift (input (i), 16),
                       'and',
                       255
                    ));
         output :=
            output ||
               CHR (fbw.op (fbw.rshift (input (i), 24),
                       'and',
                       255
                    ));
         i := i + 1;
         j := j + 4;
      END LOOP;
   END encode;

   /*
   ** Decodes input (unsigned char) into output (UINT4). Assumes len is
   ** a multiple of 4.
   */

   PROCEDURE DECODE (
      output IN OUT md5_array,
      input IN VARCHAR2,
      len IN BINARY_INTEGER
   )
   IS
      i BINARY_INTEGER;
      j BINARY_INTEGER;
   BEGIN
      i := 0;
      j := 0;

      WHILE (j < len)
      LOOP
         output (i) :=
            fbw.op (fbw.op (fbw.op (ASCII (SUBSTR (input,
                                              j + 1,
                                              1
                                           )
                                    ),
                               'or',
                               fbw.lshift (ASCII (SUBSTR (input,
                                                     j + 2,
                                                     1
                                                  )
                                           ),
                                  8
                               )
                            ),
                       'or',
                       fbw.lshift (ASCII (SUBSTR (input,
                                             j + 3,
                                             1
                                          )
                                   ),
                          16
                       )
                    ),
               'or',
               fbw.lshift (ASCII (SUBSTR (input, j + 4, 1)),
                  24
               )
            );
         i := i + 1;
         j := j + 4;
      END LOOP;
   END decode;

   /*
   ** MD5 memcpy is a substring manipulator in PL/SQL.
   */

   FUNCTION md5_memcpy (
      output IN VARCHAR2,
      output_start IN md5_word%TYPE,
      input IN VARCHAR2,
      len IN md5_word%TYPE
   )
      RETURN VARCHAR2
   IS
      str VARCHAR2 (64);
      part1 VARCHAR2 (64);
      part2 VARCHAR2 (64);
      part3 VARCHAR2 (64);
   BEGIN
      part1 := SUBSTR (output, 1, output_start);
      part2 := SUBSTR (input, 1, len);

      IF (output_start + len + 1 < LENGTH (output))
      THEN
         part3 := SUBSTR (output, output_start + len + 1);
      END IF;

      str := '';

      IF (part1 IS NOT NULL)
      THEN
         str := part1;
      END IF;

      IF (part2 IS NOT NULL)
      THEN
         str := str || part2;
      END IF;

      IF (part3 IS NOT NULL)
      THEN
         str := str || part3;
      END IF;

      RETURN str;
   END md5_memcpy;
END fast_md5;
/
SHOW errors;
