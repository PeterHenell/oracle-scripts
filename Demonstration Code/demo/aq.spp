CREATE OR REPLACE PACKAGE aq
IS

/* Standard datatypes for use with Oracle AQ. */

   v_msgid RAW(16);
   SUBTYPE msgid_type IS v_msgid%TYPE;

   v_name VARCHAR2(49);
   SUBTYPE name_type IS v_name%TYPE;

/* Some common exceptions encountered when working with Oracle AQ. 
   You will probably want to add more; see chapter in book. */

   dequeue_disabled EXCEPTION;
   PRAGMA EXCEPTION_INIT (dequeue_disabled, -25226);

   dequeue_timeout EXCEPTION;
   PRAGMA EXCEPTION_INIT (dequeue_timeout, -25228);

   end_of_message_group EXCEPTION;
   PRAGMA EXCEPTION_INIT (end_of_message_group, -25235);

/* Create and Remove queue objects. */
   
   PROCEDURE create_queue
      (qtable IN VARCHAR2,
       payload_type IN VARCHAR2,
       qname IN VARCHAR2,
       prioritize IN VARCHAR2 := NULL,
       qtype IN INTEGER := DBMS_AQADM.NORMAL_QUEUE);

   PROCEDURE create_priority_queue
      (qtable IN VARCHAR2,
       payload_type IN VARCHAR2,
       qname IN VARCHAR2,
       prioritize IN VARCHAR2 := 'PRIORITY,ENQ_TIME');

   /* Hides the need for an agent object. */
   PROCEDURE add_subscriber 
      (qname IN VARCHAR2, 
       subscriber IN VARCHAR2,
       address IN VARCHAR2 := NULL);

   PROCEDURE stop_and_drop (
      qtable IN VARCHAR2,
      qname IN VARCHAR2 := '%',
      enqueue IN BOOLEAN := TRUE, 
      dequeue IN BOOLEAN := TRUE, 
      wait IN BOOLEAN := TRUE);

/* Retrieve queue information */

   FUNCTION queue_exists (qname IN VARCHAR2) RETURN BOOLEAN;

   FUNCTION qtable_exists (qtable IN VARCHAR2) RETURN BOOLEAN;

   FUNCTION msgcount (qtable IN VARCHAR2, qname IN VARCHAR2)
      RETURN INTEGER; 

   FUNCTION msgdata (qtable_in IN VARCHAR2, 
      msgid_in IN RAW,
      data_in IN VARCHAR2) RETURN VARCHAR2;

   PROCEDURE showmsgs (qtable IN VARCHAR2, qname IN VARCHAR2);
END;                                      
/
CREATE OR REPLACE PACKAGE BODY aq
IS

   g_dyncur PLS_INTEGER;

/* Private program */

   PROCEDURE initcur 
   IS
   BEGIN
      IF NOT DBMS_SQL.IS_OPEN (g_dyncur)
      THEN
         g_dyncur := DBMS_SQL.OPEN_CURSOR;
      END IF;
   EXCEPTION
      WHEN invalid_cursor
      THEN
         g_dyncur := DBMS_SQL.OPEN_CURSOR;
   END;

/* Check status of AQ objects */

   FUNCTION queue_exists (qname IN VARCHAR2) RETURN BOOLEAN
   IS     
      CURSOR q_cur
      IS
         SELECT 'x'
           FROM USER_QUEUES
          WHERE name = UPPER (qname);
      q_rec q_cur%ROWTYPE; 
   BEGIN
      OPEN q_cur; 
      FETCH q_cur INTO q_rec;
      RETURN q_cur%FOUND;
   END;

   FUNCTION qtable_exists (qtable IN VARCHAR2) RETURN BOOLEAN
   IS     
      CURSOR q_cur
      IS
         SELECT 'x'
           FROM USER_QUEUE_TABLES
          WHERE queue_table = UPPER (qtable);
      q_rec q_cur%ROWTYPE; 
   BEGIN
      OPEN q_cur; FETCH q_cur INTO q_rec;
      RETURN q_cur%FOUND;
   END;

   PROCEDURE create_queue
      (qtable IN VARCHAR2,
       payload_type IN VARCHAR2,
       qname IN VARCHAR2,
       prioritize IN VARCHAR2 := NULL,
       qtype IN INTEGER := DBMS_AQADM.NORMAL_QUEUE)
   IS
   BEGIN
      IF NOT qtable_exists (qtable)
      THEN
         DBMS_AQADM.CREATE_QUEUE_TABLE
            (queue_table => qtable,
             queue_payload_type => payload_type,
             sort_list => NVL (prioritize, 'ENQ_TIME'));
      END IF;

      IF NOT queue_exists (qname)
      THEN
         DBMS_AQADM.CREATE_QUEUE
            (queue_name => qname,
             queue_table => qtable,
             queue_type => qtype);
      END IF;

      DBMS_AQADM.START_QUEUE (queue_name => qname,
         enqueue => qtype != DBMS_AQADM.EXCEPTION_QUEUE);
   END;

   PROCEDURE create_priority_queue
      (qtable IN VARCHAR2,
       payload_type IN VARCHAR2,
       qname IN VARCHAR2,
       prioritize IN VARCHAR2 := 'PRIORITY,ENQ_TIME')
   IS
   BEGIN
      create_queue (qtable, payload_type, qname, prioritize);
   END;

   PROCEDURE add_subscriber 
      (qname IN VARCHAR2, 
       subscriber IN VARCHAR2,
       address IN VARCHAR2 := NULL)
   IS
      v_agent SYS.AQ$_AGENT;
   BEGIN
      v_agent := SYS.AQ$_AGENT (subscriber, address, NULL);
      DBMS_AQADM.ADD_SUBSCRIBER (qname, v_agent);
   END;

/* Stop and Drop Utilities */

   PROCEDURE stop_and_drop (
      qtable IN VARCHAR2,
      qname IN VARCHAR2 := '%',
      enqueue IN BOOLEAN := TRUE, 
      dequeue IN BOOLEAN := TRUE, 
      wait IN BOOLEAN := TRUE)
   IS
      CURSOR q_cur
      IS
         SELECT name FROM USER_QUEUES
          WHERE queue_table = UPPER (qtable);

      all_dropped BOOLEAN := enqueue AND dequeue;
   BEGIN
      FOR q_rec IN q_cur
      LOOP
         IF q_rec.name LIKE UPPER (qname)
         THEN
            DBMS_AQADM.STOP_QUEUE (q_rec.name, enqueue, dequeue, wait);
            DBMS_OUTPUT.PUT_LINE ('stopping ' || q_rec.name);

            IF enqueue AND dequeue
            THEN
               DBMS_AQADM.DROP_QUEUE (q_rec.name);
               DBMS_OUTPUT.PUT_LINE ('dropping ' || q_rec.name);
            END IF;
         ELSE
            all_dropped := FALSE;
         END IF;
      END LOOP;

      IF all_dropped AND qtable_exists (qtable)
      THEN
         DBMS_AQADM.DROP_QUEUE_TABLE (qtable);
         DBMS_OUTPUT.PUT_LINE ('dropping ' || qtable);
      END IF; 
   END;    
     
/* Retrieve information about queues */

   /* Enhance this so that you provide just the queue name and look
      up the queue table name from that. */

   FUNCTION msgcount (qtable IN VARCHAR2, qname IN VARCHAR2)
      RETURN INTEGER 
   IS
      fdbk PLS_INTEGER;
      retval PLS_INTEGER;
   BEGIN
      initcur;

      DBMS_SQL.PARSE (g_dyncur,
         'SELECT COUNT(*) FROM AQ$' || qtable || ' WHERE queue = :qname',
         DBMS_SQL.NATIVE);

      DBMS_SQL.DEFINE_COLUMN (g_dyncur, 1, 1);

      DBMS_SQL.BIND_VARIABLE (g_dyncur, 'qname', UPPER (qname));

      fdbk := DBMS_SQL.EXECUTE_AND_FETCH (g_dyncur);

      DBMS_SQL.COLUMN_VALUE (g_dyncur, 1, retval);

      RETURN retval;
   END;

   FUNCTION msgdata (qtable_in IN VARCHAR2, 
      msgid_in IN RAW,
      data_in IN VARCHAR2) RETURN VARCHAR2
   IS
      fdbk PLS_INTEGER;
      retval VARCHAR2(2000);
   BEGIN
      initcur;

      DBMS_SQL.PARSE (g_dyncur,
         'SELECT ' || data_in || ' FROM AQ$' || qtable_in ||
         ' WHERE msg_id = :msgid',
         DBMS_SQL.NATIVE);

      DBMS_SQL.DEFINE_COLUMN (g_dyncur, 1, 'a', 2000);

      DBMS_SQL.BIND_VARIABLE_RAW (g_dyncur, 'msgid', msgid_in);

      fdbk := DBMS_SQL.EXECUTE_AND_FETCH (g_dyncur);

      IF fdbk = 1
      THEN
         DBMS_SQL.COLUMN_VALUE (g_dyncur, 1, retval);
      ELSE
         NULL;
      END IF;

      RETURN retval;
   END;

   PROCEDURE showmsgs (qtable IN VARCHAR2, qname IN VARCHAR2)
   IS
      fdbk PLS_INTEGER;
      v_msg_priority PLS_INTEGER;
      v_msg_state VARCHAR2(30);
      v_retry_count PLS_INTEGER;
      v_correlation VARCHAR2(30);
   BEGIN
      initcur;

      DBMS_SQL.PARSE (g_dyncur,
         'SELECT msg_priority, msg_state, retry_count, corr_id FROM AQ$' || 
         qtable || 
         ' WHERE queue = :qname',
         DBMS_SQL.NATIVE);

      DBMS_SQL.DEFINE_COLUMN (g_dyncur, 1, 1);
      DBMS_SQL.DEFINE_COLUMN (g_dyncur, 2, 'a', 30);
      DBMS_SQL.DEFINE_COLUMN (g_dyncur, 3, 1);
      DBMS_SQL.DEFINE_COLUMN (g_dyncur, 4, 'a', 30);

      DBMS_SQL.BIND_VARIABLE (g_dyncur, 'qname', UPPER (qname));

      fdbk := DBMS_SQL.EXECUTE (g_dyncur);

      WHILE DBMS_SQL.FETCH_ROWS (g_dyncur) > 0
      LOOP
         IF v_msg_state IS NULL
         THEN
            /* Display the header */
            DBMS_OUTPUT.PUT_LINE 
               ('Priority        State      Retries Correlation ID');
            DBMS_OUTPUT.PUT_LINE 
               ('--------------- ---------- ------- ------------------------------');
         END IF;
         DBMS_SQL.COLUMN_VALUE (g_dyncur, 1, v_msg_priority);
         DBMS_SQL.COLUMN_VALUE (g_dyncur, 2, v_msg_state);
         DBMS_SQL.COLUMN_VALUE (g_dyncur, 3, v_retry_count);
         DBMS_SQL.COLUMN_VALUE (g_dyncur, 4, v_correlation);
         DBMS_OUTPUT.PUT_LINE 
            (RPAD (v_msg_priority, 16) ||
             RPAD (v_msg_state, 11) ||
             RPAD (v_retry_count, 8) ||
             RPAD (v_correlation, 30));
      END LOOP;
   END;
END;
/


