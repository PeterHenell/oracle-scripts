CREATE OR REPLACE PACKAGE EMPLOYEES_QP
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1AA62BC9-CA69-4405-9A6D-A74FB4D1A7CE}
| Created On: October 14, 2011 6:44:29
| Created By: QCGU
*/
IS

   -- Return a cursor variable for one row of data for a primary key.
   FUNCTION onerow_cv (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
      )
   RETURN EMPLOYEES_TP.EMPLOYEES_rc;

   -- Return a record for one row of data for a primary key
   FUNCTION onerow (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
      )
   RETURN EMPLOYEES_TP.EMPLOYEES_rt;

   -- Return TRUE if a row exists for this primary key
   FUNCTION row_exists (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
      )
   RETURN BOOLEAN;

   -- Return all rows in table via ref cursor
   FUNCTION allrows_cv RETURN EMPLOYEES_TP.EMPLOYEES_rc;

   -- Return all rows for a dynamic WHERE clause via ref cursor
   FUNCTION allrows_by_cv (
      where_clause_in IN VARCHAR2
     ,column_list_in IN VARCHAR2 DEFAULT NULL) RETURN EMPLOYEES_TP.weak_refcur;

   -- Close the specified cursor variable, only if it is open.
   PROCEDURE close_cursor (cursor_variable_in IN EMPLOYEES_TP.EMPLOYEES_rc);

   -- Hide calls to cursor attributes behind interface.
   FUNCTION cursor_is_open (cursor_variable_in IN EMPLOYEES_TP.weak_refcur)
      RETURN BOOLEAN;
   FUNCTION row_found (cursor_variable_in IN EMPLOYEES_TP.weak_refcur)
      RETURN BOOLEAN;
   FUNCTION row_notfound (cursor_variable_in IN EMPLOYEES_TP.weak_refcur)
      RETURN BOOLEAN;
   FUNCTION cursor_rowcount (cursor_variable_in IN EMPLOYEES_TP.weak_refcur) RETURN PLS_INTEGER;

   -- Use the LIMIT clause to BULK COLLECT N rows through the cursor variable
   -- The current contents of the collection will be deleted.
   FUNCTION fetch_rows (
      cursor_variable_in IN EMPLOYEES_TP.EMPLOYEES_rc
    , limit_in IN PLS_INTEGER DEFAULT 100
    )
      RETURN EMPLOYEES_TP.EMPLOYEES_tc;

   -- Return all rows in a collection of records
   FUNCTION allrows RETURN EMPLOYEES_TP.EMPLOYEES_tc;


   -- Allrows for specified where clause (using dynamic SQL)
   FUNCTION allrows_by (where_clause_in IN VARCHAR2)
      RETURN EMPLOYEES_TP.EMPLOYEES_tc;

   -- Return ref cursor to all rows for primary key column EMPLOYEE_ID
   FUNCTION for_employee_id_cv (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
   )
   RETURN EMPLOYEES_TP.EMPLOYEES_rc;

   -- Return ref cursor to all rows for list of EMPLOYEE_ID values
   -- in format 'A,B,C,D', to be used in an IN list.
   FUNCTION in_employee_id_cv (
      list_in IN VARCHAR2
   )
   RETURN EMPLOYEES_TP.weak_refcur;

   -- Return collection of all rows for primary key column EMPLOYEE_ID
   FUNCTION for_employee_id (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
   )
   RETURN EMPLOYEES_TP.EMPLOYEES_tc;

   -- Return a cursor variable for one row by EMP_EMAIL_UK value
   FUNCTION or_emp_email_uk_cv (
      email_in IN EMPLOYEES_TP.EMAIL_t
      )
      RETURN EMPLOYEES_TP.EMPLOYEES_rc
      ;

   -- Return a record for one row by EMP_EMAIL_UK value
   FUNCTION or_emp_email_uk (
      email_in IN EMPLOYEES_TP.EMAIL_t
      )
      RETURN EMPLOYEES_TP.EMPLOYEES_rt
      ;

   -- Return the primary key value for this unique index value
   FUNCTION pky_emp_email_uk (
      email_in IN EMPLOYEES_TP.EMAIL_t
      )
      RETURN EMPLOYEES_TP.employee_id_t
      ;

   -- Number of rows for this EMP_EMAIL_UK value
   FUNCTION num_emp_email_uk (
      email_in IN EMPLOYEES_TP.EMAIL_t
      )
      RETURN PLS_INTEGER;

   -- Returns TRUE if at least one row exists for this EMP_EMAIL_UK value
   FUNCTION ex_emp_email_uk (
      email_in IN EMPLOYEES_TP.EMAIL_t
      )
      RETURN BOOLEAN;
   -- Return a cursor variable of all rows for EMP_DEPT_FK value
   FUNCTION ar_emp_dept_fk_cv (
      department_id_in IN EMPLOYEES_TP.DEPARTMENT_ID_t
      )
      RETURN EMPLOYEES_TP.EMPLOYEES_rc;

   -- Return a cursor variable of all rows based on IN list of values
   FUNCTION in_emp_dept_fk_cv (
      department_id_in IN VARCHAR2
      )
      RETURN EMPLOYEES_TP.weak_refcur;

   -- Return a collection of all rows for EMP_DEPT_FK value
   FUNCTION ar_emp_dept_fk (
      department_id_in IN EMPLOYEES_TP.DEPARTMENT_ID_t
      )
      RETURN EMPLOYEES_TP.EMPLOYEES_tc;

   PROCEDURE ar_emp_dept_fk (
      department_id_in IN EMPLOYEES_TP.DEPARTMENT_ID_t,
      employee_id_out OUT EMPLOYEES_TP.EMPLOYEE_ID_cc,
      first_name_out OUT EMPLOYEES_TP.FIRST_NAME_cc,
      last_name_out OUT EMPLOYEES_TP.LAST_NAME_cc,
      email_out OUT EMPLOYEES_TP.EMAIL_cc,
      phone_number_out OUT EMPLOYEES_TP.PHONE_NUMBER_cc,
      hire_date_out OUT EMPLOYEES_TP.HIRE_DATE_cc,
      job_id_out OUT EMPLOYEES_TP.JOB_ID_cc,
      salary_out OUT EMPLOYEES_TP.SALARY_cc,
      commission_pct_out OUT EMPLOYEES_TP.COMMISSION_PCT_cc,
      manager_id_out OUT EMPLOYEES_TP.MANAGER_ID_cc,
      department_id_out OUT EMPLOYEES_TP.DEPARTMENT_ID_cc
      );

   -- Returns TRUE if at least one row exists for this EMP_DEPT_FK value
   FUNCTION ex_emp_dept_fk (
      department_id_in IN EMPLOYEES_TP.DEPARTMENT_ID_t
      )
      RETURN BOOLEAN;

   -- Number of rows for this EMP_DEPT_FK value
   FUNCTION num_emp_dept_fk (
      department_id_in IN EMPLOYEES_TP.DEPARTMENT_ID_t
      )
      RETURN PLS_INTEGER;
   -- Return a cursor variable of all rows for EMP_JOB_FK value
   FUNCTION ar_emp_job_fk_cv (
      job_id_in IN EMPLOYEES_TP.JOB_ID_t
      )
      RETURN EMPLOYEES_TP.EMPLOYEES_rc;

   -- Return a cursor variable of all rows based on IN list of values
   FUNCTION in_emp_job_fk_cv (
      job_id_in IN VARCHAR2
      )
      RETURN EMPLOYEES_TP.weak_refcur;

   -- Return a collection of all rows for EMP_JOB_FK value
   FUNCTION ar_emp_job_fk (
      job_id_in IN EMPLOYEES_TP.JOB_ID_t
      )
      RETURN EMPLOYEES_TP.EMPLOYEES_tc;

   PROCEDURE ar_emp_job_fk (
      job_id_in IN EMPLOYEES_TP.JOB_ID_t,
      employee_id_out OUT EMPLOYEES_TP.EMPLOYEE_ID_cc,
      first_name_out OUT EMPLOYEES_TP.FIRST_NAME_cc,
      last_name_out OUT EMPLOYEES_TP.LAST_NAME_cc,
      email_out OUT EMPLOYEES_TP.EMAIL_cc,
      phone_number_out OUT EMPLOYEES_TP.PHONE_NUMBER_cc,
      hire_date_out OUT EMPLOYEES_TP.HIRE_DATE_cc,
      job_id_out OUT EMPLOYEES_TP.JOB_ID_cc,
      salary_out OUT EMPLOYEES_TP.SALARY_cc,
      commission_pct_out OUT EMPLOYEES_TP.COMMISSION_PCT_cc,
      manager_id_out OUT EMPLOYEES_TP.MANAGER_ID_cc,
      department_id_out OUT EMPLOYEES_TP.DEPARTMENT_ID_cc
      );

   -- Returns TRUE if at least one row exists for this EMP_JOB_FK value
   FUNCTION ex_emp_job_fk (
      job_id_in IN EMPLOYEES_TP.JOB_ID_t
      )
      RETURN BOOLEAN;

   -- Number of rows for this EMP_JOB_FK value
   FUNCTION num_emp_job_fk (
      job_id_in IN EMPLOYEES_TP.JOB_ID_t
      )
      RETURN PLS_INTEGER;
   -- Return a cursor variable of all rows for EMP_MANAGER_FK value
   FUNCTION ar_emp_manager_fk_cv (
      manager_id_in IN EMPLOYEES_TP.MANAGER_ID_t
      )
      RETURN EMPLOYEES_TP.EMPLOYEES_rc;

   -- Return a cursor variable of all rows based on IN list of values
   FUNCTION in_emp_manager_fk_cv (
      manager_id_in IN VARCHAR2
      )
      RETURN EMPLOYEES_TP.weak_refcur;

   -- Return a collection of all rows for EMP_MANAGER_FK value
   FUNCTION ar_emp_manager_fk (
      manager_id_in IN EMPLOYEES_TP.MANAGER_ID_t
      )
      RETURN EMPLOYEES_TP.EMPLOYEES_tc;

   PROCEDURE ar_emp_manager_fk (
      manager_id_in IN EMPLOYEES_TP.MANAGER_ID_t,
      employee_id_out OUT EMPLOYEES_TP.EMPLOYEE_ID_cc,
      first_name_out OUT EMPLOYEES_TP.FIRST_NAME_cc,
      last_name_out OUT EMPLOYEES_TP.LAST_NAME_cc,
      email_out OUT EMPLOYEES_TP.EMAIL_cc,
      phone_number_out OUT EMPLOYEES_TP.PHONE_NUMBER_cc,
      hire_date_out OUT EMPLOYEES_TP.HIRE_DATE_cc,
      job_id_out OUT EMPLOYEES_TP.JOB_ID_cc,
      salary_out OUT EMPLOYEES_TP.SALARY_cc,
      commission_pct_out OUT EMPLOYEES_TP.COMMISSION_PCT_cc,
      manager_id_out OUT EMPLOYEES_TP.MANAGER_ID_cc,
      department_id_out OUT EMPLOYEES_TP.DEPARTMENT_ID_cc
      );

   -- Returns TRUE if at least one row exists for this EMP_MANAGER_FK value
   FUNCTION ex_emp_manager_fk (
      manager_id_in IN EMPLOYEES_TP.MANAGER_ID_t
      )
      RETURN BOOLEAN;

   -- Number of rows for this EMP_MANAGER_FK value
   FUNCTION num_emp_manager_fk (
      manager_id_in IN EMPLOYEES_TP.MANAGER_ID_t
      )
      RETURN PLS_INTEGER;

   -- Number of rows in table
   FUNCTION tabcount (where_clause_in IN VARCHAR2 := NULL)
      RETURN PLS_INTEGER;

   -- Number of rows for this primary key value
   FUNCTION pkycount (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
      )
      RETURN PLS_INTEGER;

   -- Returns TRUE if at least one row exists for this where clause
   FUNCTION ex_employees (
      where_clause_in IN VARCHAR2 := NULL)
   RETURN BOOLEAN;

   -- Returns TRUE if at least one row exists for this primary key
   FUNCTION ex_pky (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
      )
   RETURN BOOLEAN;

END EMPLOYEES_QP;
/
