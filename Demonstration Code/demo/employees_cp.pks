CREATE OR REPLACE PACKAGE EMPLOYEES_CP
/*
| Generated by or retrieved from QCGU - DO NOT MODIFY!
| QCGU - "Get it right, do it fast" - www.ToadWorld.com
| QCGU Universal ID: {1BD37A66-EA60-4927-9A64-F6DD89237236}
| Created On: October 14, 2011 6:44:27
| Created By: QCGU
*/
IS
   -- Insert one row, providing primary key if present
   PROCEDURE ins (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
      ,
      first_name_in IN EMPLOYEES_TP.FIRST_NAME_t DEFAULT NULL,
      last_name_in IN EMPLOYEES_TP.LAST_NAME_t DEFAULT NULL,
      email_in IN EMPLOYEES_TP.EMAIL_t DEFAULT NULL,
      phone_number_in IN EMPLOYEES_TP.PHONE_NUMBER_t DEFAULT NULL,
      hire_date_in IN EMPLOYEES_TP.HIRE_DATE_t DEFAULT NULL,
      job_id_in IN EMPLOYEES_TP.JOB_ID_t DEFAULT NULL,
      salary_in IN EMPLOYEES_TP.SALARY_t DEFAULT NULL,
      commission_pct_in IN EMPLOYEES_TP.COMMISSION_PCT_t DEFAULT NULL,
      manager_id_in IN EMPLOYEES_TP.MANAGER_ID_t DEFAULT NULL,
      department_id_in IN EMPLOYEES_TP.DEPARTMENT_ID_t DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
      );

   -- Insert a row based on a record.
   -- Specify whether or not a primary key value should be generated.
   PROCEDURE ins (
      rec_in IN EMPLOYEES_TP.EMPLOYEES_rt
     ,gen_pky_in IN BOOLEAN DEFAULT FALSE
     ,sequence_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   );

   -- Insert a collection of rows using FORALL; all primary key values
   -- must have already been generated, or are handled in triggers.
   PROCEDURE ins (
      rows_in IN EMPLOYEES_TP.EMPLOYEES_tc
     ,handle_error_in IN BOOLEAN := TRUE
   );

   -- Return next primary key value using the named sequence.
   FUNCTION next_key (sequence_in IN VARCHAR2 := NULL) RETURN EMPLOYEES_TP.EMPLOYEE_ID_t;

   -- Insert one row, generating hidden primary key using a sequence
   PROCEDURE ins (
      first_name_in IN EMPLOYEES_TP.FIRST_NAME_t DEFAULT NULL,
      last_name_in IN EMPLOYEES_TP.LAST_NAME_t DEFAULT NULL,
      email_in IN EMPLOYEES_TP.EMAIL_t DEFAULT NULL,
      phone_number_in IN EMPLOYEES_TP.PHONE_NUMBER_t DEFAULT NULL,
      hire_date_in IN EMPLOYEES_TP.HIRE_DATE_t DEFAULT NULL,
      job_id_in IN EMPLOYEES_TP.JOB_ID_t DEFAULT NULL,
      salary_in IN EMPLOYEES_TP.SALARY_t DEFAULT NULL,
      commission_pct_in IN EMPLOYEES_TP.COMMISSION_PCT_t DEFAULT NULL,
      manager_id_in IN EMPLOYEES_TP.MANAGER_ID_t DEFAULT NULL,
      department_id_in IN EMPLOYEES_TP.DEPARTMENT_ID_t DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
      );

   -- Insert one row, returning primary key generated by sequence
   PROCEDURE ins (
      first_name_in IN EMPLOYEES_TP.FIRST_NAME_t DEFAULT NULL,
      last_name_in IN EMPLOYEES_TP.LAST_NAME_t DEFAULT NULL,
      email_in IN EMPLOYEES_TP.EMAIL_t DEFAULT NULL,
      phone_number_in IN EMPLOYEES_TP.PHONE_NUMBER_t DEFAULT NULL,
      hire_date_in IN EMPLOYEES_TP.HIRE_DATE_t DEFAULT NULL,
      job_id_in IN EMPLOYEES_TP.JOB_ID_t DEFAULT NULL,
      salary_in IN EMPLOYEES_TP.SALARY_t DEFAULT NULL,
      commission_pct_in IN EMPLOYEES_TP.COMMISSION_PCT_t DEFAULT NULL,
      manager_id_in IN EMPLOYEES_TP.MANAGER_ID_t DEFAULT NULL,
      department_id_in IN EMPLOYEES_TP.DEPARTMENT_ID_t DEFAULT NULL,
      employee_id_out IN OUT EMPLOYEES_TP.EMPLOYEE_ID_t
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
      );

   -- Insert one row with function, return generated primary key
   FUNCTION ins (
      first_name_in IN EMPLOYEES_TP.FIRST_NAME_t DEFAULT NULL,
      last_name_in IN EMPLOYEES_TP.LAST_NAME_t DEFAULT NULL,
      email_in IN EMPLOYEES_TP.EMAIL_t DEFAULT NULL,
      phone_number_in IN EMPLOYEES_TP.PHONE_NUMBER_t DEFAULT NULL,
      hire_date_in IN EMPLOYEES_TP.HIRE_DATE_t DEFAULT NULL,
      job_id_in IN EMPLOYEES_TP.JOB_ID_t DEFAULT NULL,
      salary_in IN EMPLOYEES_TP.SALARY_t DEFAULT NULL,
      commission_pct_in IN EMPLOYEES_TP.COMMISSION_PCT_t DEFAULT NULL,
      manager_id_in IN EMPLOYEES_TP.MANAGER_ID_t DEFAULT NULL,
      department_id_in IN EMPLOYEES_TP.DEPARTMENT_ID_t DEFAULT NULL
      -- Pass false if you want errors to propagate out unhandled
     ,handle_error_in IN BOOLEAN := TRUE
      )
      RETURN
         EMPLOYEES_TP.EMPLOYEE_ID_t
      ;
   -- Update any/all columns by primary key. If you pass NULL, then
   -- the current column value is set to itself. If you need a more
   -- selected UPDATE then use one of the onecol procedures below.
   PROCEDURE upd (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t,
      first_name_in IN EMPLOYEES_TP.FIRST_NAME_t DEFAULT NULL,
      last_name_in IN EMPLOYEES_TP.LAST_NAME_t DEFAULT NULL,
      email_in IN EMPLOYEES_TP.EMAIL_t DEFAULT NULL,
      phone_number_in IN EMPLOYEES_TP.PHONE_NUMBER_t DEFAULT NULL,
      hire_date_in IN EMPLOYEES_TP.HIRE_DATE_t DEFAULT NULL,
      job_id_in IN EMPLOYEES_TP.JOB_ID_t DEFAULT NULL,
      salary_in IN EMPLOYEES_TP.SALARY_t DEFAULT NULL,
      commission_pct_in IN EMPLOYEES_TP.COMMISSION_PCT_t DEFAULT NULL,
      manager_id_in IN EMPLOYEES_TP.MANAGER_ID_t DEFAULT NULL,
      department_id_in IN EMPLOYEES_TP.DEPARTMENT_ID_t DEFAULT NULL,
      ignore_if_null_in IN BOOLEAN := FALSE
     ,handle_error_in IN BOOLEAN := TRUE
      );

   PROCEDURE upd_ins (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t,
      first_name_in IN EMPLOYEES_TP.FIRST_NAME_t DEFAULT NULL,
      last_name_in IN EMPLOYEES_TP.LAST_NAME_t DEFAULT NULL,
      email_in IN EMPLOYEES_TP.EMAIL_t DEFAULT NULL,
      phone_number_in IN EMPLOYEES_TP.PHONE_NUMBER_t DEFAULT NULL,
      hire_date_in IN EMPLOYEES_TP.HIRE_DATE_t DEFAULT NULL,
      job_id_in IN EMPLOYEES_TP.JOB_ID_t DEFAULT NULL,
      salary_in IN EMPLOYEES_TP.SALARY_t DEFAULT NULL,
      commission_pct_in IN EMPLOYEES_TP.COMMISSION_PCT_t DEFAULT NULL,
      manager_id_in IN EMPLOYEES_TP.MANAGER_ID_t DEFAULT NULL,
      department_id_in IN EMPLOYEES_TP.DEPARTMENT_ID_t DEFAULT NULL,
      ignore_if_null_in IN BOOLEAN := FALSE
     ,handle_error_in IN BOOLEAN := TRUE
      );

   PROCEDURE upd (
      rec_in IN EMPLOYEES_TP.EMPLOYEES_rt,
      ignore_if_null_in IN BOOLEAN := FALSE
     ,handle_error_in IN BOOLEAN := TRUE
      );
   -- Use Native Dynamic SQL to update a single VARCHAR2 column
   -- for all rows specified by the dynamic WHERE clause
   PROCEDURE upd_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      new_value_in IN VARCHAR2,
      where_in IN VARCHAR2 := NULL
      ,handle_error_in IN BOOLEAN := TRUE
   );

   -- Use Native Dynamic SQL to update a single DATE column
   -- for all rows specified by the dynamic WHERE clause
   PROCEDURE upd_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      new_value_in IN DATE,
      where_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   );

   -- Use Native Dynamic SQL to update a single NUMBER column
   -- for all rows specified by the dynamic WHERE clause
   PROCEDURE upd_onecol (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      new_value_in IN NUMBER,
      where_in IN VARCHAR2 := NULL
     ,handle_error_in IN BOOLEAN := TRUE
   );

    -- Use Native Dynamic SQL to update a single VARCHAR2 column
   -- for the rows specified by the primary key value
   PROCEDURE upd_onecol_pky (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      new_value_in IN VARCHAR2
      ,employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
      ,handle_error_in IN BOOLEAN := TRUE
   );

    -- Use Native Dynamic SQL to update a single DATE column
   -- for the rows specified by the primary key value
   PROCEDURE upd_onecol_pky (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      new_value_in IN DATE
      ,employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
      ,handle_error_in IN BOOLEAN := TRUE
   );

   -- Use Native Dynamic SQL to update a single NUMBER column
   -- for the rows specified by the primary key value
   PROCEDURE upd_onecol_pky (
      colname_in IN ALL_TAB_COLUMNS.COLUMN_NAME%TYPE,
      new_value_in IN NUMBER
      ,employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
      ,handle_error_in IN BOOLEAN := TRUE
      );

    -- Set all non-primary key columns to NULL
   PROCEDURE nullify_row (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
     ,handle_error_in IN BOOLEAN := TRUE
   );

    -- Delete one row by primary key
   PROCEDURE del (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
     ,handle_error_in IN BOOLEAN := TRUE
      );

   -- Delete all rows for primary key column EMPLOYEE_ID
   PROCEDURE del_EMPLOYEE_ID (
      employee_id_in IN EMPLOYEES_TP.EMPLOYEE_ID_t
     ,handle_error_in IN BOOLEAN := TRUE
     );
   -- Delete for unique value of EMP_EMAIL_UK
   PROCEDURE del_EMP_EMAIL_UK (
      email_in IN EMPLOYEES_TP.EMAIL_t
     ,handle_error_in IN BOOLEAN := TRUE
      );
   -- Delete all rows for this EMP_DEPT_FK foreign key value
   PROCEDURE del_EMP_DEPT_FK (
      department_id_in IN EMPLOYEES_TP.DEPARTMENT_ID_t
     ,handle_error_in IN BOOLEAN := TRUE
      );

   -- Delete all rows for this EMP_JOB_FK foreign key value
   PROCEDURE del_EMP_JOB_FK (
      job_id_in IN EMPLOYEES_TP.JOB_ID_t
     ,handle_error_in IN BOOLEAN := TRUE
      );

   -- Delete all rows for this EMP_MANAGER_FK foreign key value
   PROCEDURE del_EMP_MANAGER_FK (
      manager_id_in IN EMPLOYEES_TP.MANAGER_ID_t
     ,handle_error_in IN BOOLEAN := TRUE
      );

    -- Delete all rows specified by dynamic WHERE clause
   PROCEDURE del_by (
      where_clause_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      );

    -- Delete all rows where the specified VARCHAR2 column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN VARCHAR2
     ,handle_error_in IN BOOLEAN := TRUE
      );

    -- Delete all rows where the specified DATE column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN DATE
     ,handle_error_in IN BOOLEAN := TRUE
      );

    -- Delete all rows where the specified NUMBER column has
   -- a value that matches the specfified value.
   PROCEDURE del_by_col (
      colname_in IN VARCHAR2,
      colvalue_in IN NUMBER
     ,handle_error_in IN BOOLEAN := TRUE
      );

   -- Initialize a record with default values for columns in the table.
   PROCEDURE initrec (
      employees_inout IN OUT EMPLOYEES_TP.EMPLOYEES_rt
   );

   FUNCTION initrec RETURN EMPLOYEES_TP.EMPLOYEES_rt;

END EMPLOYEES_CP;
/
