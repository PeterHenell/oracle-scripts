CREATE OR REPLACE PACKAGE BODY type_table_qp
/*
| Generated by or retrieved from Qnxo - DO NOT MODIFY!
| Qnxo - "Get it right, do it fast" - www.qnxo.com
| Qnxo Universal ID: {CE63F2F4-B478-47A2-B142-B1C577AF0C40}
| Created On: June      29, 2005 00:28:00 Created By: QNXO_DEMO
*/
IS
   FUNCTION onerow (id_in IN type_table_tp.id_t)
      RETURN type_table_tp.type_table_rt
   IS
      onerow_rec   type_table_tp.type_table_rt;
   BEGIN
      SELECT ID
            ,CATEGORY
            ,NAME
            ,description
            ,is_default
            ,created_on
            ,created_by
            ,changed_on
            ,changed_by
        INTO onerow_rec
        FROM type_table
       WHERE ID = id_in;

      RETURN onerow_rec;
   END onerow;

   FUNCTION row_exists (id_in IN type_table_tp.id_t)
      RETURN BOOLEAN
   IS
      l_dummy   PLS_INTEGER;
      retval    BOOLEAN;
   BEGIN
      SELECT 1
        INTO l_dummy
        FROM type_table
       WHERE ID = id_in;

      RETURN TRUE;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         RETURN FALSE;
      WHEN TOO_MANY_ROWS
      THEN
         RETURN TRUE;
   END row_exists;

   FUNCTION onerow_cv (id_in IN type_table_tp.id_t)
      RETURN type_table_tp.type_table_rc
   IS
      retval   type_table_tp.type_table_rc;
   BEGIN
      OPEN retval FOR
         SELECT ID, CATEGORY, NAME, description, is_default, created_on
               ,created_by, changed_on, changed_by
           FROM type_table
          WHERE ID = id_in;

      RETURN retval;
   END onerow_cv;

   FUNCTION allrows
      RETURN type_table_tp.type_table_tc
   IS
      CURSOR allrows_cur
      IS
         SELECT ID, CATEGORY, NAME, description, is_default, created_on
               ,created_by, changed_on, changed_by
           FROM type_table;

      l_rows   PLS_INTEGER;
      retval   type_table_tp.type_table_tc;
   BEGIN
      OPEN allrows_cur;

      FETCH allrows_cur
      BULK COLLECT INTO retval;

      RETURN retval;
   END allrows;

   FUNCTION allrows_cv
      RETURN type_table_tp.type_table_rc
   IS
      retval   type_table_tp.type_table_rc;
   BEGIN
      OPEN retval FOR
         SELECT ID, CATEGORY, NAME, description, is_default, created_on
               ,created_by, changed_on, changed_by
           FROM type_table;

      RETURN retval;
   END allrows_cv;

   FUNCTION allrows_by_cv (
      where_clause_in   IN   VARCHAR2
     ,column_list_in    IN   VARCHAR2 DEFAULT NULL
   )
      RETURN type_table_tp.weak_refcur
   IS
      retval   type_table_tp.weak_refcur;
   BEGIN
      IF where_clause_in IS NULL AND column_list_in IS NULL
      THEN
         retval := allrows_cv;
      ELSIF column_list_in IS NULL
      THEN
         OPEN retval FOR    'SELECT
            ID,
            CATEGORY,
            NAME,
            DESCRIPTION,
            IS_DEFAULT,
            CREATED_ON,
            CREATED_BY,
            CHANGED_ON,
            CHANGED_BY
           FROM TYPE_TABLE WHERE '
                         || where_clause_in
                         || ' '
                         || '';
      ELSE
         OPEN retval FOR    'SELECT '
                         || column_list_in
                         || ' FROM TYPE_TABLE WHERE '
                         || where_clause_in
                         || ' '
                         || '';
      END IF;

      RETURN retval;
   END allrows_by_cv;

   -- Close the specified cursor variable, only if it is open.
   PROCEDURE close_cursor (cursor_variable_in IN type_table_tp.type_table_rc)
   IS
   BEGIN
      IF cursor_variable_in%ISOPEN
      THEN
         CLOSE cursor_variable_in;
      END IF;
   END close_cursor;

   -- Hide calls to cursor attributes behind interface.
   FUNCTION cursor_is_open (cursor_variable_in IN type_table_tp.weak_refcur)
      RETURN BOOLEAN
   IS
   BEGIN
      RETURN cursor_variable_in%ISOPEN;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN FALSE;
   END cursor_is_open;

   FUNCTION row_found (cursor_variable_in IN type_table_tp.weak_refcur)
      RETURN BOOLEAN
   IS
   BEGIN
      RETURN cursor_variable_in%FOUND;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END row_found;

   FUNCTION row_notfound (cursor_variable_in IN type_table_tp.weak_refcur)
      RETURN BOOLEAN
   IS
   BEGIN
      RETURN cursor_variable_in%NOTFOUND;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN NULL;
   END row_notfound;

   FUNCTION cursor_rowcount (cursor_variable_in IN type_table_tp.weak_refcur)
      RETURN PLS_INTEGER
   IS
   BEGIN
      RETURN cursor_variable_in%ROWCOUNT;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 0;
   END cursor_rowcount;

   -- Use the LIMIT clause to BULK COLLECT N rows through the cursor variable
   -- The current contents of the collection will be deleted.
   FUNCTION fetch_rows (
      cursor_variable_in   IN   type_table_tp.type_table_rc
     ,limit_in             IN   PLS_INTEGER DEFAULT 100
   )
      RETURN type_table_tp.type_table_tc
   IS
      retval   type_table_tp.type_table_tc;
   BEGIN
      FETCH cursor_variable_in
      BULK COLLECT INTO retval LIMIT limit_in;

      RETURN retval;
   END fetch_rows;

   -- Allrows for specified where clause (using dynamic SQL)
   FUNCTION allrows_by (where_clause_in IN VARCHAR2)
      RETURN type_table_tp.type_table_tc
   IS
      allrows_cur   type_table_tp.weak_refcur;
      retval        type_table_tp.type_table_tc;
   BEGIN
      EXECUTE IMMEDIATE    'SELECT
            ID,
            CATEGORY,
            NAME,
            DESCRIPTION,
            IS_DEFAULT,
            CREATED_ON,
            CREATED_BY,
            CHANGED_ON,
            CHANGED_BY
           FROM TYPE_TABLE WHERE '
                        || where_clause_in
      BULK COLLECT INTO retval;

      RETURN retval;
   END allrows_by;

   -- Return collection of all rows for primary key column ID
   FUNCTION for_id (id_in IN type_table_tp.id_t)
      RETURN type_table_tp.type_table_tc
   IS
      CURSOR allrows_cur
      IS
         SELECT ID, CATEGORY, NAME, description, is_default, created_on
               ,created_by, changed_on, changed_by
           FROM type_table
          WHERE ID = for_id.id_in;

      l_rows   PLS_INTEGER;
      retval   type_table_tp.type_table_tc;
   BEGIN
      OPEN allrows_cur;

      FETCH allrows_cur
      BULK COLLECT INTO retval;

      RETURN retval;
   END for_id;

   -- Return ref cursor to all rows for primary key column ID
   FUNCTION for_id_cv (id_in IN type_table_tp.id_t)
      RETURN type_table_tp.type_table_rc
   IS
      retval   type_table_tp.type_table_rc;
   BEGIN
      OPEN retval FOR
         SELECT ID, CATEGORY, NAME, description, is_default, created_on
               ,created_by, changed_on, changed_by
           FROM type_table
          WHERE ID = id_in;

      RETURN retval;
   END for_id_cv;

   FUNCTION in_id_cv (list_in IN VARCHAR2)
      RETURN type_table_tp.weak_refcur
   IS
      retval   type_table_tp.weak_refcur;
   BEGIN
      OPEN retval FOR    'SELECT
            ID,
            CATEGORY,
            NAME,
            DESCRIPTION,
            IS_DEFAULT,
            CREATED_ON,
            CREATED_BY,
            CHANGED_ON,
            CHANGED_BY
           FROM TYPE_TABLE
          WHERE ID IN ('
                      || list_in
                      || ')
             ';

      RETURN retval;
   END in_id_cv;

   FUNCTION or_un_type_table (
      category_in   IN   type_table_tp.category_t
     ,NAME_IN       IN   type_table_tp.name_t
   )
      RETURN type_table_tp.type_table_rt
   IS
      retval   type_table_tp.type_table_rt;
   BEGIN
      IF category_in IS NOT NULL AND NAME_IN IS NOT NULL
      THEN
         SELECT ID
               ,CATEGORY
               ,NAME
               ,description
               ,is_default
               ,created_on
               ,created_by
               ,changed_on
               ,changed_by
           INTO retval
           FROM type_table
          WHERE CATEGORY = category_in AND NAME = NAME_IN;
      ELSE
         SELECT ID
               ,CATEGORY
               ,NAME
               ,description
               ,is_default
               ,created_on
               ,created_by
               ,changed_on
               ,changed_by
           INTO retval
           FROM type_table
          WHERE (   CATEGORY = category_in
                 OR (CATEGORY IS NULL AND category_in IS NULL)
                )
            AND (NAME = NAME_IN OR (NAME IS NULL AND NAME_IN IS NULL));
      END IF;

      RETURN retval;
   END or_un_type_table;

   FUNCTION or_un_type_table_cv (
      category_in   IN   type_table_tp.category_t
     ,NAME_IN       IN   type_table_tp.name_t
   )
      RETURN type_table_tp.type_table_rc
   IS
      retval   type_table_tp.type_table_rc;
   BEGIN
      IF category_in IS NOT NULL AND NAME_IN IS NOT NULL
      THEN
         OPEN retval FOR
            SELECT ID, CATEGORY, NAME, description, is_default
                  ,created_on, created_by, changed_on, changed_by
              FROM type_table
             WHERE CATEGORY = category_in AND NAME = NAME_IN;
      ELSE
         OPEN retval FOR
            SELECT ID, CATEGORY, NAME, description, is_default
                  ,created_on, created_by, changed_on, changed_by
              FROM type_table
             WHERE (   CATEGORY = category_in
                    OR (CATEGORY IS NULL AND category_in IS NULL)
                   )
               AND (NAME = NAME_IN OR (NAME IS NULL AND NAME_IN IS NULL));
      END IF;

      RETURN retval;
   END or_un_type_table_cv;

   FUNCTION pky_un_type_table (
      category_in   IN   type_table_tp.category_t
     ,NAME_IN       IN   type_table_tp.name_t
   )
      RETURN type_table_tp.id_t
   IS
      retval   type_table_tp.id_t;
   BEGIN
      IF category_in IS NOT NULL AND NAME_IN IS NOT NULL
      THEN
         SELECT ID
           INTO retval
           FROM type_table
          WHERE CATEGORY = category_in AND NAME = NAME_IN;
      ELSE
         SELECT ID
           INTO retval
           FROM type_table
          WHERE (   CATEGORY = category_in
                 OR (CATEGORY IS NULL AND category_in IS NULL)
                )
            AND (NAME = NAME_IN OR (NAME IS NULL AND NAME_IN IS NULL));
      END IF;

      RETURN retval;
   END pky_un_type_table;

   -- Number of rows by UN_TYPE_TABLE
   FUNCTION num_un_type_table (
      category_in   IN   type_table_tp.category_t
     ,NAME_IN       IN   type_table_tp.name_t
   )
      RETURN PLS_INTEGER
   IS
      retval   PLS_INTEGER;
   BEGIN
      IF category_in IS NOT NULL AND NAME_IN IS NOT NULL
      THEN
         SELECT COUNT (*)
           INTO retval
           FROM type_table
          WHERE CATEGORY = category_in AND NAME = NAME_IN;
      ELSE
         SELECT COUNT (*)
           INTO retval
           FROM type_table
          WHERE (   CATEGORY = category_in
                 OR (CATEGORY IS NULL AND category_in IS NULL)
                )
            AND (NAME = NAME_IN OR (NAME IS NULL AND NAME_IN IS NULL));
      END IF;

      RETURN retval;
   END num_un_type_table;

   FUNCTION ex_un_type_table (
      category_in   IN   type_table_tp.category_t
     ,NAME_IN       IN   type_table_tp.name_t
   )
      RETURN BOOLEAN
   IS
      l_dummy   PLS_INTEGER;
   BEGIN
      SELECT 1
        INTO l_dummy
        FROM type_table
       WHERE CATEGORY = category_in AND NAME = NAME_IN;

      RETURN TRUE;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         RETURN FALSE;
      WHEN TOO_MANY_ROWS
      THEN
         RETURN TRUE;
   END ex_un_type_table;

   -- Number of rows in table
   FUNCTION tabcount (where_clause_in IN VARCHAR2 := NULL)
      RETURN PLS_INTEGER
   IS
      retval   PLS_INTEGER;
   BEGIN
      IF where_clause_in IS NULL
      THEN
         SELECT COUNT (*)
           INTO retval
           FROM type_table;
      ELSE
         EXECUTE IMMEDIATE    'SELECT COUNT(*) FROM TYPE_TABLE
              WHERE '
                           || where_clause_in
                      INTO retval;
      END IF;

      RETURN retval;
   END tabcount;

   -- Number of rows by primary key
   FUNCTION pkycount (id_in IN type_table_tp.id_t)
      RETURN PLS_INTEGER
   IS
      retval   PLS_INTEGER;
   BEGIN
      SELECT COUNT (*)
        INTO retval
        FROM type_table
       WHERE ID = id_in;

      RETURN retval;
   END pkycount;

   -- Number of rows in table
   FUNCTION ex_type_table (where_clause_in IN VARCHAR2 := NULL)
      RETURN BOOLEAN
   IS
      l_dummy   PLS_INTEGER;
   BEGIN
      IF where_clause_in IS NULL
      THEN
         SELECT 1
           INTO l_dummy
           FROM type_table;
      ELSE
         EXECUTE IMMEDIATE    'SELECT 1 FROM TYPE_TABLE
              WHERE '
                           || where_clause_in
                      INTO l_dummy;
      END IF;

      RETURN TRUE;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         RETURN FALSE;
      WHEN TOO_MANY_ROWS
      THEN
         RETURN TRUE;
   END ex_type_table;

   -- Number of rows by primary key
   FUNCTION ex_pky (id_in IN type_table_tp.id_t)
      RETURN BOOLEAN
   IS
      l_dummy   PLS_INTEGER;
   BEGIN
      SELECT 1
        INTO l_dummy
        FROM type_table
       WHERE ID = id_in;

      RETURN TRUE;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         RETURN FALSE;
      WHEN TOO_MANY_ROWS
      THEN
         RETURN TRUE;
   END ex_pky;

   FUNCTION default_row
      RETURN type_table_tp.type_table_rt
   IS
      retval   type_table_tp.type_table_rt;
   BEGIN
      SELECT ID
            ,CATEGORY
            ,NAME
            ,description
            ,is_default
            ,created_on
            ,created_by
            ,changed_on
            ,changed_by
        INTO retval
        FROM type_table
       WHERE is_default = 'Y';

      RETURN retval;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         RETURN NULL;
      WHEN TOO_MANY_ROWS
      THEN
         RETURN retval;
   END default_row;

   FUNCTION default_row_cv
      RETURN type_table_tp.type_table_rc
   IS
      retval   type_table_tp.type_table_rc;
   BEGIN
      OPEN retval FOR
         SELECT ID, CATEGORY, NAME, description, is_default, created_on
               ,created_by, changed_on, changed_by
           FROM type_table
          WHERE is_default = 'Y';

      RETURN retval;
   END default_row_cv;

   FUNCTION is_default (id_in IN type_table_tp.id_t)
      RETURN BOOLEAN
   IS
      l_type_table   type_table_tp.type_table_rt;
   BEGIN
      l_type_table := default_row;
      RETURN id_in = l_type_table.ID;
   END is_default;

   FUNCTION default_name
      RETURN type_table_tp.name_t
   IS
      l_type_table   type_table_tp.type_table_rt;
   BEGIN
      l_type_table := default_row;
      RETURN l_type_table.NAME;
   END default_name;

   FUNCTION default_id
      RETURN type_table_tp.id_t
   IS
      l_type_table   type_table_tp.type_table_rt;
   BEGIN
      l_type_table := default_row;
      RETURN l_type_table.ID;
   END default_id;
BEGIN
   NULL;
END type_table_qp;
/