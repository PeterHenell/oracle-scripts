CREATE OR REPLACE PACKAGE te_employee
--//-----------------------------------------------------------------------
--//  ** PL/Generator Table Encapsulator for "EMPLOYEE"
--//-----------------------------------------------------------------------
--//  (c) COPYRIGHT  2003.
--//               All rights reserved.
--//
--//  No part of this copyrighted work may be reproduced, modified,
--//  or distributed in any form or by any means without the prior
--//  written permission of .
--//-----------------------------------------------------------------------
--//  This software was generated by Quest Software's PL/Generator (TM).
--//
--//  For more information, visit www.Quest Software.com or call 1.800.REVEAL4
--//-----------------------------------------------------------------------
--//  Stored In:  te_employee.pks
--//  Created On: January   06, 2003 17:02:46
--//  Created By: SCOTT
--//  PL/Generator Version: PRO-2000.2.8
--//-----------------------------------------------------------------------
IS
--// Data Structures //--
   TYPE pky_rt IS RECORD (
      employee_id EMPLOYEE.EMPLOYEE_ID%TYPE
      );

   TYPE cv_t IS REF CURSOR;

   TYPE i_employee_name_rt IS RECORD (
      last_name EMPLOYEE.LAST_NAME%TYPE,
      first_name EMPLOYEE.FIRST_NAME%TYPE,
      middle_initial EMPLOYEE.MIDDLE_INITIAL%TYPE
      );

--// Cursors //--

   CURSOR allbypky_cur
   IS
      SELECT
         EMPLOYEE_ID,
         LAST_NAME,
         FIRST_NAME,
         MIDDLE_INITIAL,
         JOB_ID,
         MANAGER_ID,
         HIRE_DATE,
         SALARY,
         COMMISSION,
         DEPARTMENT_ID,
         EMPNO,
         ENAME,
         CREATED_BY,
         CREATED_ON,
         CHANGED_BY,
         CHANGED_ON
        FROM EMPLOYEE
       ORDER BY
         EMPLOYEE_ID
      ;

   CURSOR allforpky_cur (
      employee_id_in IN EMPLOYEE.EMPLOYEE_ID%TYPE
      )
   IS
      SELECT
         EMPLOYEE_ID,
         LAST_NAME,
         FIRST_NAME,
         MIDDLE_INITIAL,
         JOB_ID,
         MANAGER_ID,
         HIRE_DATE,
         SALARY,
         COMMISSION,
         DEPARTMENT_ID,
         EMPNO,
         ENAME,
         CREATED_BY,
         CREATED_ON,
         CHANGED_BY,
         CHANGED_ON
        FROM EMPLOYEE
       WHERE
         EMPLOYEE_ID = allforpky_cur.employee_id_in
      ;

--// Cursor management procedures //--

   --// Open the cursors with some options. //--
   PROCEDURE open_allforpky_cur (
      employee_id_in IN EMPLOYEE.EMPLOYEE_ID%TYPE,
      close_if_open IN BOOLEAN := TRUE
      );

   PROCEDURE open_allbypky_cur (
      close_if_open IN BOOLEAN := TRUE
      );

   --// Close the cursors if they are open. //--
   PROCEDURE close_allforpky_cur;
   PROCEDURE close_allbypky_cur;
   PROCEDURE closeall;

--// Analyze presence of primary key: is it NOT NULL? //--

   FUNCTION isnullpky (
      rec_in IN EMPLOYEE%ROWTYPE
      )
   RETURN BOOLEAN;

   FUNCTION isnullpky (
      rec_in IN pky_rt
      )
   RETURN BOOLEAN;

--// Emulate aggregate-level record operations. //--

   FUNCTION recseq (rec1 IN EMPLOYEE%ROWTYPE, rec2 IN EMPLOYEE%ROWTYPE)
   RETURN BOOLEAN;

   FUNCTION recseq (rec1 IN pky_rt, rec2 IN pky_rt)
   RETURN BOOLEAN;

--// Fetch Data //--

   --// Fetch one row of data for a primary key. //--
   FUNCTION onerow (
      employee_id_in IN EMPLOYEE.EMPLOYEE_ID%TYPE
      )
   RETURN EMPLOYEE%ROWTYPE;

   --// For each unique index ... //--

   FUNCTION i_employee_name$pky (
      last_name_in IN EMPLOYEE.LAST_NAME%TYPE,
      first_name_in IN EMPLOYEE.FIRST_NAME%TYPE,
      middle_initial_in IN EMPLOYEE.MIDDLE_INITIAL%TYPE
      )
      RETURN pky_rt
      ;

   FUNCTION i_employee_name$val (
      employee_id_in IN EMPLOYEE.EMPLOYEE_ID%TYPE
      )
   RETURN i_employee_name_rt;

   FUNCTION i_employee_name$row (
      last_name_in IN EMPLOYEE.LAST_NAME%TYPE,
      first_name_in IN EMPLOYEE.FIRST_NAME%TYPE,
      middle_initial_in IN EMPLOYEE.MIDDLE_INITIAL%TYPE
      )
   RETURN EMPLOYEE%ROWTYPE;


   --// Count of all rows in table and for each foreign key. //--
   FUNCTION rowcount RETURN INTEGER;
   FUNCTION pkyrowcount (
      employee_id_in IN EMPLOYEE.EMPLOYEE_ID%TYPE
      )
      RETURN INTEGER;
--// Check Constraint Validation //--

   --// Check Constraint: "HIRE_DATE" IS NOT NULL //--
   FUNCTION sys_c003090$chk (
      hire_date_in IN EMPLOYEE.HIRE_DATE%TYPE
      ) RETURN BOOLEAN;

   --// Check Constraint: "CREATED_BY" IS NOT NULL //--
   FUNCTION sys_c003091$chk (
      created_by_in IN EMPLOYEE.CREATED_BY%TYPE
      ) RETURN BOOLEAN;

   --// Check Constraint: "CREATED_ON" IS NOT NULL //--
   FUNCTION sys_c003092$chk (
      created_on_in IN EMPLOYEE.CREATED_ON%TYPE
      ) RETURN BOOLEAN;

   --// Check Constraint: "CHANGED_BY" IS NOT NULL //--
   FUNCTION sys_c003093$chk (
      changed_by_in IN EMPLOYEE.CHANGED_BY%TYPE
      ) RETURN BOOLEAN;

   --// Check Constraint: "CHANGED_ON" IS NOT NULL //--
   FUNCTION sys_c003094$chk (
      changed_on_in IN EMPLOYEE.CHANGED_ON%TYPE
      ) RETURN BOOLEAN;
   PROCEDURE validate (
      hire_date_in IN EMPLOYEE.HIRE_DATE%TYPE,
      created_by_in IN EMPLOYEE.CREATED_BY%TYPE,
      created_on_in IN EMPLOYEE.CREATED_ON%TYPE,
      changed_by_in IN EMPLOYEE.CHANGED_BY%TYPE,
      changed_on_in IN EMPLOYEE.CHANGED_ON%TYPE,
      record_error IN BOOLEAN := TRUE
      );

   PROCEDURE validate (
      rec_in IN EMPLOYEE%ROWTYPE,
      record_error IN BOOLEAN := TRUE
      );
--// Update Processing //--

   PROCEDURE reset$frc;

   --// Force setting of NULL values //--

   FUNCTION last_name$frc
      (last_name_in IN EMPLOYEE.LAST_NAME%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.LAST_NAME%TYPE;

   FUNCTION first_name$frc
      (first_name_in IN EMPLOYEE.FIRST_NAME%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.FIRST_NAME%TYPE;

   FUNCTION middle_initial$frc
      (middle_initial_in IN EMPLOYEE.MIDDLE_INITIAL%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.MIDDLE_INITIAL%TYPE;

   FUNCTION job_id$frc
      (job_id_in IN EMPLOYEE.JOB_ID%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.JOB_ID%TYPE;

   FUNCTION manager_id$frc
      (manager_id_in IN EMPLOYEE.MANAGER_ID%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.MANAGER_ID%TYPE;

   FUNCTION hire_date$frc
      (hire_date_in IN EMPLOYEE.HIRE_DATE%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.HIRE_DATE%TYPE;

   FUNCTION salary$frc
      (salary_in IN EMPLOYEE.SALARY%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.SALARY%TYPE;

   FUNCTION commission$frc
      (commission_in IN EMPLOYEE.COMMISSION%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.COMMISSION%TYPE;

   FUNCTION department_id$frc
      (department_id_in IN EMPLOYEE.DEPARTMENT_ID%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.DEPARTMENT_ID%TYPE;

   FUNCTION empno$frc
      (empno_in IN EMPLOYEE.EMPNO%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.EMPNO%TYPE;

   FUNCTION ename$frc
      (ename_in IN EMPLOYEE.ENAME%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.ENAME%TYPE;

   FUNCTION created_by$frc
      (created_by_in IN EMPLOYEE.CREATED_BY%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.CREATED_BY%TYPE;

   FUNCTION created_on$frc
      (created_on_in IN EMPLOYEE.CREATED_ON%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.CREATED_ON%TYPE;

   FUNCTION changed_by$frc
      (changed_by_in IN EMPLOYEE.CHANGED_BY%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.CHANGED_BY%TYPE;

   FUNCTION changed_on$frc
      (changed_on_in IN EMPLOYEE.CHANGED_ON%TYPE DEFAULT NULL)
      RETURN EMPLOYEE.CHANGED_ON%TYPE;

   PROCEDURE upd (
      employee_id_in IN EMPLOYEE.EMPLOYEE_ID%TYPE,
      last_name_in IN EMPLOYEE.LAST_NAME%TYPE DEFAULT NULL,
      first_name_in IN EMPLOYEE.FIRST_NAME%TYPE DEFAULT NULL,
      middle_initial_in IN EMPLOYEE.MIDDLE_INITIAL%TYPE DEFAULT NULL,
      job_id_in IN EMPLOYEE.JOB_ID%TYPE DEFAULT NULL,
      manager_id_in IN EMPLOYEE.MANAGER_ID%TYPE DEFAULT NULL,
      hire_date_in IN EMPLOYEE.HIRE_DATE%TYPE DEFAULT NULL,
      salary_in IN EMPLOYEE.SALARY%TYPE DEFAULT NULL,
      commission_in IN EMPLOYEE.COMMISSION%TYPE DEFAULT NULL,
      department_id_in IN EMPLOYEE.DEPARTMENT_ID%TYPE DEFAULT NULL,
      empno_in IN EMPLOYEE.EMPNO%TYPE DEFAULT NULL,
      ename_in IN EMPLOYEE.ENAME%TYPE DEFAULT NULL,
      created_by_in IN EMPLOYEE.CREATED_BY%TYPE DEFAULT NULL,
      created_on_in IN EMPLOYEE.CREATED_ON%TYPE DEFAULT NULL,
      changed_by_in IN EMPLOYEE.CHANGED_BY%TYPE DEFAULT NULL,
      changed_on_in IN EMPLOYEE.CHANGED_ON%TYPE DEFAULT NULL,
      rowcount_out OUT INTEGER,
      reset_in IN BOOLEAN DEFAULT TRUE
      );

   --// Record-based Update //--

   PROCEDURE upd (rec_in IN EMPLOYEE%ROWTYPE,
      rowcount_out OUT INTEGER,
      reset_in IN BOOLEAN DEFAULT TRUE);

--// Insert Processing //--

   --// Initialize record with default values. //--
   FUNCTION initrec (allnull IN BOOLEAN := FALSE) RETURN EMPLOYEE%ROWTYPE;

   --// Initialize record with default values. //--
   PROCEDURE initrec (
      rec_inout IN OUT EMPLOYEE%ROWTYPE,
      allnull IN BOOLEAN := FALSE);

   PROCEDURE ins (
      employee_id_in IN EMPLOYEE.EMPLOYEE_ID%TYPE,
      last_name_in IN EMPLOYEE.LAST_NAME%TYPE DEFAULT NULL,
      first_name_in IN EMPLOYEE.FIRST_NAME%TYPE DEFAULT NULL,
      middle_initial_in IN EMPLOYEE.MIDDLE_INITIAL%TYPE DEFAULT NULL,
      job_id_in IN EMPLOYEE.JOB_ID%TYPE DEFAULT NULL,
      manager_id_in IN EMPLOYEE.MANAGER_ID%TYPE DEFAULT NULL,
      hire_date_in IN EMPLOYEE.HIRE_DATE%TYPE DEFAULT SYSDATE,
      salary_in IN EMPLOYEE.SALARY%TYPE DEFAULT NULL,
      commission_in IN EMPLOYEE.COMMISSION%TYPE DEFAULT NULL,
      department_id_in IN EMPLOYEE.DEPARTMENT_ID%TYPE DEFAULT NULL,
      empno_in IN EMPLOYEE.EMPNO%TYPE DEFAULT NULL,
      ename_in IN EMPLOYEE.ENAME%TYPE DEFAULT NULL,
      created_by_in IN EMPLOYEE.CREATED_BY%TYPE DEFAULT USER,
      created_on_in IN EMPLOYEE.CREATED_ON%TYPE DEFAULT SYSDATE,
      changed_by_in IN EMPLOYEE.CHANGED_BY%TYPE DEFAULT USER,
      changed_on_in IN EMPLOYEE.CHANGED_ON%TYPE DEFAULT SYSDATE,
      upd_on_dup IN BOOLEAN := FALSE
      );

   --// Record-based insert //--
   PROCEDURE ins (rec_in IN EMPLOYEE%ROWTYPE,
      upd_on_dup IN BOOLEAN := FALSE
      );

--// Delete Processing //--
   PROCEDURE del (
      employee_id_in IN EMPLOYEE.EMPLOYEE_ID%TYPE,
      rowcount_out OUT INTEGER);

   --// Record-based delete //--
   PROCEDURE del (rec_in IN pky_rt,
      rowcount_out OUT INTEGER);

   PROCEDURE del (rec_in IN EMPLOYEE%ROWTYPE,
      rowcount_out OUT INTEGER);

   --// Program called by database initialization script to pin the package. //--
   PROCEDURE pinme;
END te_employee;
/
