REM QCTO EXPORT HEADER
REM VERSION = 1.8.3.390
REM HARNESS_CODE_OWNER_SPEC = DYNAMIC
REM PROGRAM_CODE_OWNER_SPEC = DYNAMIC
REM HARNESS_GUID = {620534A1-C5EF-4B32-9163-34C0213D0082}
REM HARNESS_OWNER = %
REM HARNESS_NAME = Q##PARSE
REM HARNESS_TYPE = PACKAGE
REM PROGRAM_OWNER = %
REM PROGRAM_NAME = PARSE
REM PROGRAM_TYPE = PACKAGE
REM Export created on 2009-04-11T22:44:02
REM END QCTO EXPORT HEADER
 
CREATE OR REPLACE PROCEDURE qcto#import_HARNESS_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();QU_CONFIG.TRACE_SUBPROG_start ('Export','HARNESS');
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_ext_setup_code CLOB;
CL_ext_teardown_code CLOB;
CL_ext_tc_exec_code CLOB;
CL_private_declarations CLOB;
CL_private_declare_programs CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_private_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_private_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_ext_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_ext_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_ext_tc_exec_code, TRUE, dur => DBMS_LOB.CALL);
BEGIN IF NOT qu_export_import.merging_on_import () THEN qu_harness_xp.del (owner_in => qu_export_import.import_harness_owner(),name_in => 'Q##PARSE',program_owner_in => qu_export_import.import_program_owner(),program_name_in => 'PARSE',prefix_in => 'Q##',rows_out => l_rows,create_suite_collection_in => TRUE); END IF;
QU_HARNESS_xp.import (universal_id_in => '{620534A1-C5EF-4B32-9163-34C0213D0082}',
harness_owner_in => qu_export_import.import_harness_owner(),
name_in => 'Q##PARSE',
description_in => NULL,
test_engine_type_in => 'QuestCodeTesterOracle',
harness_type_in => 'PACKAGE',
program_owner_in => qu_export_import.import_program_owner(),
program_name_in => 'PARSE',
program_type_in => 'PACKAGE',
prefix_in => 'Q##',
suffix_in => NULL,
is_test_harness_in => 'N',
is_example_in => 'N',
IS_LOCKED_in => 'N',
LAST_RUN_STATUS_in => NULL,
PROGRAM_STATUS_in => NULL,
TEST_CODE_STATUS_in => NULL,
TEST_CODE_CURRENT_in => NULL,
TEST_DEFINITION_CURRENT_in => NULL,
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
ext_setup_code_in => CL_ext_setup_code,
ext_teardown_code_in => CL_ext_teardown_code,
ext_tc_exec_code_in => CL_ext_tc_exec_code,
private_declarations_in => CL_private_declarations,
private_declare_programs_in => CL_private_declare_programs,
definition_status_in => 'Under Development',
invoker_rights_in => NULL,
profile_execution_in => 'N',
use_named_notation_in => 'Y',
random_execution_in => 'N',
attribute_count_in => NULL,
methods_count_in => NULL,
predefined_in => NULL,
incomplete_in => NULL,
final_in => NULL,
instantiable_in => NULL,
supertype_owner_in => NULL,
supertype_name_in => NULL,
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_ext_setup_code);
DBMS_LOB.freetemporary (CL_ext_teardown_code);
DBMS_LOB.freetemporary (CL_ext_tc_exec_code);
DBMS_LOB.freetemporary (CL_private_declarations);
DBMS_LOB.freetemporary (CL_private_declare_programs);
END;
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_HARNESS_1;
/
REM EXECUTE
BEGIN qcto#import_HARNESS_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_UNITTEST_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_UNIT_TEST_XP.import (universal_id_in => '{2F282169-2E88-4FD6-B9D9-D8C98156689B}',harness_guid_in => qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),name_in => 'STRING_TO_LIST (Function)',
description_in => 'Unit test for "STRING_TO_LIST"',
program_name_in => 'STRING_TO_LIST',program_type_in => 'FUNCTION',overload_in => NULL,ut_program_name_in => 'Q##STRING_TO_LIST',testing_status_in => 'Y',exception_on_failure_in => NULL,
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
exceptions_in => CL_exceptions,
conditional_execution_in => NULL,
profile_execution_in => 'N',
random_execution_in => 'N',
method_name_in => NULL,
method_no_in => NULL,
method_type_in => NULL,
method_descriptor_in => NULL,
parameters_in => NULL,
results_in => NULL,
final_in => NULL,
instantiable_in => NULL,
overriding_in => NULL,
inherited_in => NULL,
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{E342ACC5-5764-4334-8892-B6E5CB6FC52F}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => 'STRING_IN',
description_in => 'Test element for "STRING_IN"',
data_type_guid_in => '{A13E1D34-8283-4A8B-9463-1B427220581E}',data_type_name_in => 'VARCHAR2(32767)',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'ARGUMENT',position_in => TO_CHAR(1),argument_mode_in => 'IN',argument_alias_in => 'L_STRING_IN',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{9CD3E5B3-B326-4B88-B63F-8355CCCD562A}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => 'DELIM_IN',
description_in => 'Test element for "DELIM_IN"',
data_type_guid_in => '{A13E1D34-8283-4A8B-9463-1B427220581E}',data_type_name_in => 'VARCHAR2(32767)',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'ARGUMENT',position_in => TO_CHAR(2),argument_mode_in => 'IN',argument_alias_in => 'L_DELIM_IN',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{C4D014AE-35B1-4D91-82F8-7FDB67EC7AF4}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => '[Function return value]',
description_in => 'Test element for "[Function return value]"',
data_type_guid_in => '{6F84471E-416C-495C-8C17-417E31F9DFAC}',data_type_name_in => 'parse.items_tt',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'RETURN',position_in => TO_CHAR(0),argument_mode_in => 'OUT',argument_alias_in => 'Q##FUNCTION_RETURN_VALUE',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_UNITTEST_1;
/
REM EXECUTE
BEGIN qcto#import_UNITTEST_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_UNITTEST_2 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_UNIT_TEST_XP.import (universal_id_in => '{350F4C03-AE3C-4F17-9F58-62DC12229B7E}',harness_guid_in => qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),name_in => 'NESTED_STRING_TO_LIST (Function - Overload 1)',
description_in => 'Unit test for "NESTED_STRING_TO_LIST"',
program_name_in => 'NESTED_STRING_TO_LIST',program_type_in => 'FUNCTION',overload_in => '1',ut_program_name_in => 'Q##NESTED_STRING_TO_LIST',testing_status_in => 'Y',exception_on_failure_in => NULL,
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
exceptions_in => CL_exceptions,
conditional_execution_in => NULL,
profile_execution_in => 'N',
random_execution_in => 'N',
method_name_in => NULL,
method_no_in => NULL,
method_type_in => NULL,
method_descriptor_in => NULL,
parameters_in => NULL,
results_in => NULL,
final_in => NULL,
instantiable_in => NULL,
overriding_in => NULL,
inherited_in => NULL,
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{A3E0ADE0-9981-4B6C-B96F-66CBD0568761}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),name_in => 'STRING_IN',
description_in => 'Test element for "STRING_IN"',
data_type_guid_in => '{A13E1D34-8283-4A8B-9463-1B427220581E}',data_type_name_in => 'VARCHAR2(32767)',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'ARGUMENT',position_in => TO_CHAR(1),argument_mode_in => 'IN',argument_alias_in => 'L_STRING_IN',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{9555181B-A789-4CDE-AD49-EC29D9D71B3B}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),name_in => 'OUTER_DELIM_IN',
description_in => 'Test element for "OUTER_DELIM_IN"',
data_type_guid_in => '{A13E1D34-8283-4A8B-9463-1B427220581E}',data_type_name_in => 'VARCHAR2(32767)',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'ARGUMENT',position_in => TO_CHAR(2),argument_mode_in => 'IN',argument_alias_in => 'L_OUTER_DELIM_IN',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'OUTER_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{16492FD8-EC32-421B-B8DF-1A33355687BE}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),name_in => 'INNER_DELIM_IN',
description_in => 'Test element for "INNER_DELIM_IN"',
data_type_guid_in => '{A13E1D34-8283-4A8B-9463-1B427220581E}',data_type_name_in => 'VARCHAR2(32767)',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'ARGUMENT',position_in => TO_CHAR(3),argument_mode_in => 'IN',argument_alias_in => 'L_INNER_DELIM_IN',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'INNER_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{B96F6AF3-257A-4809-A71F-E2DCA936EA74}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),name_in => '[Function return value]',
description_in => 'Test element for "[Function return value]"',
data_type_guid_in => '{6F84471E-416C-495C-8C17-417E31F9DFAC}',data_type_name_in => 'parse.nested_items_tt',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'RETURN',position_in => TO_CHAR(0),argument_mode_in => 'OUT',argument_alias_in => 'Q##FUNCTION_RETURN_VALUE',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''parse.nested_eq''';
DBMS_LOB.writeappend (lob_loc => CL_value4, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'Y',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_UNITTEST_2;
/
REM EXECUTE
BEGIN qcto#import_UNITTEST_2;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_UNITTEST_3 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_UNIT_TEST_XP.import (universal_id_in => '{A817D270-AD72-4A45-9C7D-414F80ECF715}',harness_guid_in => qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),name_in => 'NESTED_STRING_TO_LIST (Function - Overload 2)',
description_in => 'Unit test for "NESTED_STRING_TO_LIST"',
program_name_in => 'NESTED_STRING_TO_LIST',program_type_in => 'FUNCTION',overload_in => '2',ut_program_name_in => 'Q##NESTED_STRING_TO_LIST1',testing_status_in => 'Y',exception_on_failure_in => NULL,
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
exceptions_in => CL_exceptions,
conditional_execution_in => NULL,
profile_execution_in => 'N',
random_execution_in => 'N',
method_name_in => NULL,
method_no_in => NULL,
method_type_in => NULL,
method_descriptor_in => NULL,
parameters_in => NULL,
results_in => NULL,
final_in => NULL,
instantiable_in => NULL,
overriding_in => NULL,
inherited_in => NULL,
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{D7201251-AB5E-4380-AEC4-EE077DD7A8AD}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),name_in => 'OUTER_DELIM_IN',
description_in => 'Test element for "OUTER_DELIM_IN"',
data_type_guid_in => '{A13E1D34-8283-4A8B-9463-1B427220581E}',data_type_name_in => 'VARCHAR2(32767)',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'ARGUMENT',position_in => TO_CHAR(2),argument_mode_in => 'IN',argument_alias_in => 'L_OUTER_DELIM_IN',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'OUTER_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{EB42E6D7-7633-41FF-A1CE-C49A1192966A}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),name_in => 'NAME_DELIM_IN',
description_in => 'Test element for "NAME_DELIM_IN"',
data_type_guid_in => '{A13E1D34-8283-4A8B-9463-1B427220581E}',data_type_name_in => 'VARCHAR2(32767)',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'ARGUMENT',position_in => TO_CHAR(3),argument_mode_in => 'IN',argument_alias_in => 'L_NAME_DELIM_IN',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'NAME_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{9EC900F2-570D-4E5B-AE7C-89CBCD79E7CE}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),name_in => 'STRING_IN',
description_in => 'Test element for "STRING_IN"',
data_type_guid_in => '{A13E1D34-8283-4A8B-9463-1B427220581E}',data_type_name_in => 'VARCHAR2(32767)',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'ARGUMENT',position_in => TO_CHAR(1),argument_mode_in => 'IN',argument_alias_in => 'L_STRING_IN',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{68888F86-9472-42E2-91A0-36C14DF56DDF}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),name_in => 'INNER_DELIM_IN',
description_in => 'Test element for "INNER_DELIM_IN"',
data_type_guid_in => '{A13E1D34-8283-4A8B-9463-1B427220581E}',data_type_name_in => 'VARCHAR2(32767)',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'ARGUMENT',position_in => TO_CHAR(4),argument_mode_in => 'IN',argument_alias_in => 'L_INNER_DELIM_IN',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'INNER_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_definition CLOB;
CL_external_value CLOB;
CL_default_value CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_DEFAULT_VALUE, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_DEFAULT_VALUE, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_definition, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{A78E0CBE-0F6A-461E-8AC9-58D515F8122C}'; BEGIN 
QU_TEST_ELEMENT_XP.import (universal_id_in => l_parent_key,unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),name_in => '[Function return value]',
description_in => 'Test element for "[Function return value]"',
data_type_guid_in => '{6F84471E-416C-495C-8C17-417E31F9DFAC}',data_type_name_in => 'parse.named_nested_items_tt',
definition_in => CL_definition,
external_value_in => CL_external_value,
default_value_in => CL_default_value,
is_expression_in => 'N',assign_in_setup_in => 'N',element_type_in => 'RETURN',position_in => TO_CHAR(0),argument_mode_in => 'OUT',argument_alias_in => 'Q##FUNCTION_RETURN_VALUE',control_alias_in => NULL,param_type_mod_in => NULL,param_type_owner_in => NULL,param_type_name_in => NULL,character_set_name_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''parse.nested_eq''';
DBMS_LOB.writeappend (lob_loc => CL_value4, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'DEFAULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'Y',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => NULL,
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_definition);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_default_value);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_UNITTEST_3;
/
REM EXECUTE
BEGIN qcto#import_UNITTEST_3;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{7961D5CF-B918-4A2A-891F-572917B4C17C}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => 'Comma-delimited: 01 STRING_IN=ABC,DEF',
description_in => 'This test case was generated on April 11, 2009 10:15:02 pm',
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##COMMA_DELIMITED_01_STRING_',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_1;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_2 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{C5AD9F6B-1A09-43F7-BE06-24D7BAE52B9B}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => 'Comma-delimited: 02 STRING_IN=ABC,DEF,',
description_in => 'This test case was generated on April 11, 2009 10:15:02 pm',
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##COMMA_DELIMITED_02_STRING_',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_2;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_2;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_3 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{B3FBD3FF-13C4-4640-B36E-61E5FD83F268}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => 'Comma-delimited: 03 STRING_IN=ABC,DEF,,',
description_in => 'This test case was generated on April 11, 2009 10:15:02 pm',
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##COMMA_DELIMITED_03_STRING_',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_3;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_3;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_4 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{0EBFD16D-7635-4833-B6FD-EFED5EDF1D4A}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => 'Comma-delimited: 04 STRING_IN=,ABC,DEF',
description_in => 'This test case was generated on April 11, 2009 10:15:02 pm',
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##COMMA_DELIMITED_04_STRING_',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_4;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_4;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_5 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{9F6835A3-7E2A-4379-ABEF-4026B285E42D}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => 'Comma-delimited: 05 STRING_IN=,,ABC,DEF',
description_in => 'This test case was generated on April 11, 2009 10:15:02 pm',
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##COMMA_DELIMITED_05_STRING_',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_5;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_5;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_6 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{6E146033-1C2D-4E72-8C58-26B8EF895114}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => 'Comma-delimited: 06 STRING_IN=,ABC,DEF,',
description_in => 'This test case was generated on April 11, 2009 10:15:02 pm',
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##COMMA_DELIMITED_06_STRING_',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_6;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_6;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_7 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{053EAAFF-80A6-4E74-BCF2-60CC9108E23E}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => 'Comma-delimited: 07 STRING_IN=,,ABC,DEF,,',
description_in => 'This test case was generated on April 11, 2009 10:15:02 pm',
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##COMMA_DELIMITED_07_STRING_',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_7;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_7;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_8 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{9264265D-FCC1-4CC1-AECA-FB5E66928ED2}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => 'Comma-delimited: 08 STRING_IN=ABC,,DEF',
description_in => 'This test case was generated on April 11, 2009 10:15:02 pm',
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##COMMA_DELIMITED_08_STRING_',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_8;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_8;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_9 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{173D588A-8A57-40C9-81E5-64143192BC87}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => 'Comma-delimited: 09 STRING_IN=ABC,,,DEF',
description_in => 'This test case was generated on April 11, 2009 10:15:02 pm',
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##COMMA_DELIMITED_09_STRING_',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_9;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_9;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_10 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{F328782E-CFF8-47A6-B83E-C19716B193DA}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),name_in => 'Comma-delimited: 10 STRING_IN=ABC',
description_in => 'This test case was generated on April 11, 2009 10:15:02 pm',
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##COMMA_DELIMITED_10_STRING_',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_10;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_10;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_11 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{8FF6C77D-AD79-4278-9445-BDF8CA965D3C}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),name_in => 'One list',
description_in => NULL,
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##ONE_LIST',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_11;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_11;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_12 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{1C409982-11E9-4CC1-9A59-2C044CA1EE6B}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),name_in => 'Two lists',
description_in => NULL,
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##ONE_LIST_1',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_12;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_12;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_13 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{26CCC726-5DB0-4662-A499-1121573990DC}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),name_in => 'One list',
description_in => NULL,
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##ONE_LIST',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_13;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_13;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_TESTCASE_14 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declarations CLOB;
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_pre_execution_code CLOB;
CL_post_execution_code CLOB;
CL_alt_execution_code CLOB;
CL_assertion_code CLOB;
CL_exceptions CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_declarations, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_pre_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_post_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_alt_execution_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_exceptions, TRUE, dur => DBMS_LOB.CALL);
QU_TEST_CASE_xp.import (
universal_id_in => '{E9FB425F-3B83-4B9F-A92A-8461A1BB20B8}',unit_test_guid_in => qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),name_in => 'Two lists',
description_in => NULL,
requirement_in => NULL,
testing_status_in => 'Y',program_name_in => 'Q##ONE_LIST_1',
exception_on_failure_in => NULL,
parameter_hash_list_in => NULL,
generated_on_in => NULL,
is_simple_in => 'N',
code_location_in => NULL,
correlate_values_in => 'Y',
is_dynamic_in => 'N',
conditional_execution_in => NULL,
run_when_ut_fails_in => 'Y',
declarations_in => CL_declarations,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
pre_execution_code_in => CL_pre_execution_code,
post_execution_code_in => CL_post_execution_code,
alt_execution_code_in => CL_alt_execution_code,
assertion_code_in => CL_assertion_code,
exceptions_in => CL_exceptions,
rollback_before_in => 'Y',
rollback_after_in => 'N',
commit_before_in => 'N',
commit_after_in => 'N',
profile_execution_in => 'N',
handle_error_in => FALSE);
DBMS_LOB.freetemporary (CL_declarations);
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_pre_execution_code);
DBMS_LOB.freetemporary (CL_post_execution_code);
DBMS_LOB.freetemporary (CL_alt_execution_code);
DBMS_LOB.freetemporary (CL_assertion_code);
DBMS_LOB.freetemporary (CL_exceptions);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_TESTCASE_14;
/
REM EXECUTE
BEGIN qcto#import_TESTCASE_14;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'ABC%2CDEF';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''ABC,DEF''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{2349D7D4-9CA8-4BAE-AEF7-77EFDFE7A4FF}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 01 STRING_IN=ABC,DEF'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1032760696',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{F4C0272E-0CD2-4E1F-9B05-75E0A0CA13F9}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 01 STRING_IN=ABC,DEF'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1332304608',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_1;
/
REM EXECUTE
BEGIN qcto#import_INPUT_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_2 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'ABC%2CDEF%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''ABC,DEF,''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{BC1FFA87-6DDA-446A-B4D0-F6A9655CE416}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 02 STRING_IN=ABC,DEF,'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V113272218',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{8DAB2AAD-EF50-43BB-B2D0-E3E8DA867400}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 02 STRING_IN=ABC,DEF,'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V494643100',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_2;
/
REM EXECUTE
BEGIN qcto#import_INPUT_2;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_3 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'ABC%2CDEF%2C%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''ABC,DEF,,''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{95874641-304D-4D0C-8A3F-6FFDFD2E6121}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 03 STRING_IN=ABC,DEF,,'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1433296645',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{6EF0A6D0-12AE-489E-9730-C1FB25341C90}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 03 STRING_IN=ABC,DEF,,'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1916627354',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_3;
/
REM EXECUTE
BEGIN qcto#import_INPUT_3;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_4 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2CABC%2CDEF';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',ABC,DEF''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{04CEC3C7-85A0-4BFC-865B-6E503A6A2566}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 04 STRING_IN=,ABC,DEF'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V876658496',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{30E5377A-8582-4DEB-B9E1-DF99E9043CCF}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 04 STRING_IN=,ABC,DEF'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V2123901241',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_4;
/
REM EXECUTE
BEGIN qcto#import_INPUT_4;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_5 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C%2CABC%2CDEF';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',,ABC,DEF''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{6EDEA7D7-32BF-4B14-95F7-901B7C7A7C5A}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 05 STRING_IN=,,ABC,DEF'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V198507964',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{0A32DDFB-C12F-410F-9D9D-D35B9B78A132}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 05 STRING_IN=,,ABC,DEF'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V241697893',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_5;
/
REM EXECUTE
BEGIN qcto#import_INPUT_5;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_6 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2CABC%2CDEF%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',ABC,DEF,''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{48D9896B-FC7D-43DE-BDA7-E6A78B0BE219}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 06 STRING_IN=,ABC,DEF,'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V873743421',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{9392E49E-A811-430E-BE1F-A7816CE4E418}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 06 STRING_IN=,ABC,DEF,'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1509124418',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_6;
/
REM EXECUTE
BEGIN qcto#import_INPUT_6;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_7 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C%2CABC%2CDEF%2C%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',,ABC,DEF,,''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{EF14105F-6C58-4ADC-BF2A-D7EABDE4B9B6}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 07 STRING_IN=,,ABC,DEF,,'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V619283339',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{EF7F4885-7F03-42EB-A9E2-8C8E37DD1758}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 07 STRING_IN=,,ABC,DEF,,'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V125938006',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_7;
/
REM EXECUTE
BEGIN qcto#import_INPUT_7;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_8 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'ABC%2C%2CDEF';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''ABC,,DEF''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{CC762AE3-099D-471B-806D-F52632027914}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 08 STRING_IN=ABC,,DEF'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1975718410',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{2D68CBA7-EFE1-4678-BB19-7D0FA8A97CD7}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 08 STRING_IN=ABC,,DEF'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V160186317',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_8;
/
REM EXECUTE
BEGIN qcto#import_INPUT_8;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_9 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'ABC%2C%2C%2CDEF';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''ABC,,,DEF''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{30B7A97D-8210-4239-8E6B-87401737F0EC}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 09 STRING_IN=ABC,,,DEF'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1323837724',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{8E42E8CA-C4CC-4B3D-8889-F6842F3DB1DC}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 09 STRING_IN=ABC,,,DEF'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1430823428',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_9;
/
REM EXECUTE
BEGIN qcto#import_INPUT_9;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_10 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'ABC';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''ABC''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{6EB886E1-67A3-46A5-A1A2-FAB8EA1BF899}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 10 STRING_IN=ABC'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1082168992',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{BA6BA399-7345-4AE8-A270-D5EE1828AE81}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 10 STRING_IN=ABC'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1457880334',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_10;
/
REM EXECUTE
BEGIN qcto#import_INPUT_10;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_1 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(1) := ''ABC'';
e_Function_return_value1(2) := ''DEF'';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{44E9F0A7-8D86-4857-8712-3D8321D63C5E}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 01 STRING_IN=ABC,DEF'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_1;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_1;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_2 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(1) := ''ABC'';
e_Function_return_value1(2) := ''DEF'';
e_Function_return_value1(3) := '''';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{4EB08578-6546-4432-B419-E1098B998D99}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 02 STRING_IN=ABC,DEF,'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_2;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_2;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_3 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(1) := ''ABC'';
e_Function_return_value1(2) := ''DEF'';
e_Function_return_value1(3) := '''';
e_Function_return_value1(4) := '''';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{413A7A0A-FCAF-40A5-9571-271191F4EAD2}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 03 STRING_IN=ABC,DEF,,'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_3;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_3;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_4 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(1) := '''';
e_Function_return_value1(2) := ''ABC'';
e_Function_return_value1(3) := ''DEF'';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{1C74CBE9-9ED9-4B47-B023-6DBD450C1C60}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 04 STRING_IN=,ABC,DEF'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_4;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_4;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_5 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(1) := '''';
e_Function_return_value1(2) := '''';
e_Function_return_value1(3) := ''ABC'';
e_Function_return_value1(4) := ''DEF'';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{D3E99861-20C2-40DD-95C2-3833F99BCFFE}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 05 STRING_IN=,,ABC,DEF'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_5;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_5;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_6 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(1) := '''';
e_Function_return_value1(2) := ''ABC'';
e_Function_return_value1(3) := ''DEF'';
e_Function_return_value1(4) := '''';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{7445E215-0ED8-4E38-A4AC-FFB8BF34F4B0}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 06 STRING_IN=,ABC,DEF,'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_6;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_6;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_7 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(1) := '''';
e_Function_return_value1(2) := '''';
e_Function_return_value1(3) := ''ABC'';
e_Function_return_value1(4) := ''DEF'';
e_Function_return_value1(5) := '''';
e_Function_return_value1(6) := '''';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{6FCB18C5-67C9-4A7D-A8FD-D577A80AFDB6}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 07 STRING_IN=,,ABC,DEF,,'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_7;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_7;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_8 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(1) := ''ABC'';
e_Function_return_value1(2) := '''';
e_Function_return_value1(3) := ''DEF'';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{CC2135DF-9AE4-4A9F-850D-7BDF3028C39B}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 08 STRING_IN=ABC,,DEF'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_8;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_8;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_9 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(1) := ''ABC'';
e_Function_return_value1(2) := '''';
e_Function_return_value1(3) := '''';
e_Function_return_value1(4) := ''DEF'';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{64244FF7-2224-4879-8A38-42E694BFD86F}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 09 STRING_IN=ABC,,,DEF'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_9;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_9;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_10 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(1) := ''ABC'';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{5D7AE4B3-33A3-4597-A6AB-7D0C3F5D26AA}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'Comma-delimited: 10 STRING_IN=ABC'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'STRING_TO_LIST (Function)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_10;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_10;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_11 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'a%2Cb%2Cc%2Cd';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''a,b,c,d''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{F35890EC-0A71-48EC-A4F6-8134CA09BBFD}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'One list'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V2133364731',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%7C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''|''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{69403EA2-E74F-4070-87F3-08D9D4F56776}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'One list'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'OUTER_DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_OUTER_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'OUTER_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1716182964',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{EFFE65E1-A8A3-419A-A3B4-FBA208A327DC}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'One list'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'INNER_DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_INNER_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'INNER_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V2034047921',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_11;
/
REM EXECUTE
BEGIN qcto#import_INPUT_11;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_12 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'a%2Cb%2Cc%2Cd%7C1%2C2%2C3%2C4';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''a,b,c,d|1,2,3,4''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{916831AE-8519-44C6-BF2E-7D97F09A602E}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'Two lists'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V2133364731',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%7C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''|''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{EB1BD2FE-DF84-490D-8EC4-4B310859321D}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'Two lists'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'OUTER_DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_OUTER_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'OUTER_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V1716182964',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{E294E00F-B6B3-4325-9B91-9A00FC722FF9}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'Two lists'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'INNER_DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_INNER_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'INNER_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V2034047921',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_12;
/
REM EXECUTE
BEGIN qcto#import_INPUT_12;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_11 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(1)(1) := ''a'';
e_Function_return_value1(1)(2) := ''b'';
e_Function_return_value1(1)(3) := ''c'';
e_Function_return_value1(1)(4) := ''d'';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{0C0470C1-F787-4F38-B351-6701220EFC48}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'One list'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.nested_items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'S';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''parse.nested_eq''';
DBMS_LOB.writeappend (lob_loc => CL_value4, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.nested_items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'S';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_11;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_11;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_12 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(1)(1) := ''a'';
e_Function_return_value1(1)(2) := ''b'';
e_Function_return_value1(1)(3) := ''c'';
e_Function_return_value1(1)(4) := ''d'';
--
e_Function_return_value1(2)(1) := ''1'';
e_Function_return_value1(2)(2) := ''2'';
e_Function_return_value1(2)(3) := ''3'';
e_Function_return_value1(2)(4) := ''4'';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{816AC0B2-D52B-4F28-84A5-2B4EC564E4D6}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'Two lists'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.nested_items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''parse.nested_eq''';
DBMS_LOB.writeappend (lob_loc => CL_value4, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.nested_items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'I';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 1)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_12;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_12;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_13 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%3A';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''':''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{E31BF651-4EA9-4C53-8A21-9C1407881617}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'One list'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'NAME_DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_NAME_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'NAME_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V375423890',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{A7D47B53-F188-4082-9189-AB90ADCC53A1}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'One list'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'INNER_DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_INNER_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'INNER_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V990931872',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'letters%3Aa%2Cb%2Cc%2Cd';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''letters:a,b,c,d''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{66EA187E-13D8-4FCC-8787-C692C77F8C05}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'One list'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V354237922',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%7C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''|''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{FBA19984-7FD3-4220-B5FA-7CAD87B264D3}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'One list'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'OUTER_DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_OUTER_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'OUTER_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V965327062',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_13;
/
REM EXECUTE
BEGIN qcto#import_INPUT_13;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_INPUT_14 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'letters%3Aa%2Cb%2Cc%2Cd%7Cnames%3Asteven%2Cgeorge%2Ccindy';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''letters:a,b,c,d|names:steven,george,cindy''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{8F2D0882-6BF4-4F18-8AB9-F9B06F26F853}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'Two lists'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'STRING_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_STRING_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'STRING_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V354237922',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%7C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''|''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{82D243B1-D431-47C6-AB10-3839718F61C5}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'Two lists'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'OUTER_DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_OUTER_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'OUTER_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V965327062',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%3A';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''':''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{58FCE44A-BE92-45CD-BCBF-355F9BF15FEB}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'Two lists'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'NAME_DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_NAME_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'NAME_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V375423890',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '%2C';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := ''',''';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{1BDA65B8-455C-4A93-923C-862D50B0E2BE}'; BEGIN 
QU_INPUT_XP.import (universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'Two lists'),test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'INNER_DELIM_IN'),
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
intval_hdr_guid_in => NULL,
use_default_value_in => 'N',
ot_attribute_guid_in => NULL,
is_expression_in => 'N',assign_in_setup_in => 'N',argument_alias_in => 'i_INNER_DELIM_IN',handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'VARCHAR2(32767)';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'INPUT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'INNER_DELIM_IN'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'V990931872',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_INPUT_14;
/
REM EXECUTE
BEGIN qcto#import_INPUT_14;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_13 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(''letters'')(1) := ''a'';
e_Function_return_value1(''letters'')(2) := ''b'';
e_Function_return_value1(''letters'')(3) := ''c'';
e_Function_return_value1(''letters'')(4) := ''d'';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{41D756F6-B27D-4A92-A755-624072A7567F}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'One list'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.named_nested_items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'S';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''parse.nested_eq''';
DBMS_LOB.writeappend (lob_loc => CL_value4, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.named_nested_items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'S';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_13;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_13;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
CREATE OR REPLACE PROCEDURE qcto#import_OUTCOME_14 IS PRAGMA AUTONOMOUS_TRANSACTION; l_rows PLS_INTEGER;  BEGIN qu_runtime.raise_with_message();
DECLARE l_temp_string VARCHAR2(32767); 
CL_declare_programs CLOB;
CL_setup_code CLOB;
CL_teardown_code CLOB;
CL_assertion_code CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_assertion_code, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_declare_programs, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_setup_code, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'e_Function_return_value1(''letters'')(1) := ''a'';
e_Function_return_value1(''letters'')(2) := ''b'';
e_Function_return_value1(''letters'')(3) := ''c'';
e_Function_return_value1(''letters'')(4) := ''d'';
--
e_Function_return_value1(''names'')(1) := ''steven'';
e_Function_return_value1(''names'')(2) := ''george'';
e_Function_return_value1(''names'')(3) := ''cindy'';';
DBMS_LOB.writeappend (lob_loc => CL_setup_code, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_teardown_code, TRUE, dur => DBMS_LOB.CALL);
DECLARE l_parent_key VARCHAR2(1000) :='{1031FFE2-C6E2-456C-9CFD-EEF842732A79}'; BEGIN 
QU_OUTCOME_XP.import (
universal_id_in => l_parent_key,test_case_guid_in => qu_test_case_xp.pky_un_qu_case_name (qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'Two lists'),assertion_type_guid_in => '{B0A27001-1D4D-4EDD-AA22-26A553762CB8}',null_ok_in => 'Y',raise_exception_in => 'N',name_in => 'Collection modified by program matches the contents of the expected collection?',testing_status_in => 'Y',template_guid_in => '{45D2B62A-39FD-4780-8526-8CA02F80293B}',custom_assert_only_in => 'N',
description_in => NULL,
code_location_in => NULL,
declare_programs_in => CL_declare_programs,
setup_code_in => CL_setup_code,
teardown_code_in => CL_teardown_code,
assertion_code_in => CL_assertion_code,
column_set_guid_in => NULL,
intval_hdr_guid_in => NULL,
ot_attribute_guid_in => NULL,
handle_error_in => FALSE);
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.named_nested_items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'S';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := '''parse.nested_eq''';
DBMS_LOB.writeappend (lob_loc => CL_value4, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'CONTROL',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'e_Function_return_value1',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
DECLARE l_temp_string VARCHAR2(32767); 
CL_internal_value CLOB;
CL_external_value CLOB;
CL_datatype_declare CLOB;
CL_value1 CLOB;
CL_value2 CLOB;
CL_value3 CLOB;
CL_value4 CLOB;
CL_value5 CLOB;
CL_value6 CLOB;
BEGIN
DBMS_LOB.createtemporary (CL_internal_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_internal_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_external_value, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'NULL';
DBMS_LOB.writeappend (lob_loc => CL_external_value, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_datatype_declare, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'parse.named_nested_items_tt';
DBMS_LOB.writeappend (lob_loc => CL_datatype_declare, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value1, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'S';
DBMS_LOB.writeappend (lob_loc => CL_value1, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value2, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value3, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value4, TRUE, dur => DBMS_LOB.CALL);
DBMS_LOB.createtemporary (CL_value5, TRUE, dur => DBMS_LOB.CALL);
l_temp_string := 'FALSE';
DBMS_LOB.writeappend (lob_loc => CL_value5, amount => LENGTH (l_temp_string), buffer => l_temp_string);
DBMS_LOB.createtemporary (CL_value6, TRUE, dur => DBMS_LOB.CALL);
BEGIN QU_ATTRIBUTES_XP.import (
parent_guid_in => l_parent_key,usage_type_in => 'RESULT',
is_expression_in => 'N',
internal_value_in => CL_internal_value,
external_value_in => CL_external_value,
datatype_declare_in => CL_datatype_declare,
value1_in => CL_value1,
value2_in => CL_value2,
value3_in => CL_value3,
value4_in => CL_value4,
value5_in => CL_value5,
value6_in => CL_value6,
value1_is_expr_in => 'N',
value2_is_expr_in => 'N',
value3_is_expr_in => 'N',
value4_is_expr_in => 'N',
value5_is_expr_in => 'N',
value6_is_expr_in => 'N',
test_element_guid_in => qu_test_element_xp.pky_un_testel_name(qu_unit_test_xp.pky_un_qu_test_name (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()),'NESTED_STRING_TO_LIST (Function - Overload 2)'),'[Function return value]'),assign_in_setup_in => 'N',no_local_declaration_in => 'N',argument_alias_in => 'Q##function_return_value',
handle_error_in => FALSE); EXCEPTION WHEN DUP_VAL_ON_INDEX THEN NULL; END;
DBMS_LOB.freetemporary (CL_internal_value);
DBMS_LOB.freetemporary (CL_external_value);
DBMS_LOB.freetemporary (CL_datatype_declare);
DBMS_LOB.freetemporary (CL_value1);
DBMS_LOB.freetemporary (CL_value2);
DBMS_LOB.freetemporary (CL_value3);
DBMS_LOB.freetemporary (CL_value4);
DBMS_LOB.freetemporary (CL_value5);
DBMS_LOB.freetemporary (CL_value6);
END;
END;
DBMS_LOB.freetemporary (CL_declare_programs);
DBMS_LOB.freetemporary (CL_setup_code);
DBMS_LOB.freetemporary (CL_teardown_code);
DBMS_LOB.freetemporary (CL_assertion_code);
END;
COMMIT;
/*EXCEPTION WHEN OTHERS THEN ROLLBACK; RAISE; */
END qcto#import_OUTCOME_14;
/
REM EXECUTE
BEGIN qcto#import_OUTCOME_14;  qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
REM EXECUTE
BEGIN qu_export_import.upgrade_import (qu_harness_xp.pky_un_qu_hrn_name (qu_export_import.import_harness_owner(),'Q##PARSE',qu_export_import.import_program_owner()), '1.8.3.390'); qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
REM EXECUTE
BEGIN DECLARE
      PROCEDURE dropit (NAME_IN IN VARCHAR2)
      IS
         i                  PLS_INTEGER := 1;
         e_does_not_exist   EXCEPTION;
         PRAGMA EXCEPTION_INIT (e_does_not_exist, -4043);
      BEGIN
         BEGIN
            EXECUTE IMMEDIATE 'drop procedure QCTO#IMPORT_' || NAME_IN;
         EXCEPTION WHEN OTHERS THEN NULL; END;

         LOOP
            BEGIN
               EXECUTE IMMEDIATE    'drop procedure QCTO#IMPORT_'
                                 || NAME_IN || '_' || i;
            EXCEPTION
               WHEN e_does_not_exist THEN EXIT;
               WHEN OTHERS THEN NULL;
            END;
            i := i + 1;
         END LOOP;
      EXCEPTION WHEN OTHERS THEN NULL;
      END dropit;
   BEGIN
      IF qu_config.my_codetester_boolean ('remove_import_procedures', TRUE)
      THEN
         dropit ('SUITE');
         dropit ('HARNESS');
         dropit ('UNITTEST');
         dropit ('TESTCASE');
         dropit ('RESULTS');
         dropit ('INPUT');
         dropit ('OUTCOME');
         dropit ('SOURCECODE_HDR');
         dropit ('SOURCECODE');
         dropit ('TEST_DATA_GROUP');
         dropit ('CLEAR_CACHES');
         dropit ('CLEAR_CACHES');
         dropit ('TEST_DEFINITION');
      END IF;
      QU_CONFIG.TRACE_SUBPROG_END ('Export');
   END; qu_runtime.raise_with_handle(); END;
/
REM EXECUTE
