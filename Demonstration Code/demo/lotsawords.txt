Transforming
Oracle
Names
to
Java
Names
by
Steven
Feuerstein
All
rights
reserved
2000
Ah
the
wonderful
world
of
Oracle
as
it
now
supports
Java
in
addition
to
PL/SQL
Not
only
does
this
mean
you
have
lots
more
to
learn
a
new
and
very
different
language
how
and
when
to
use
Java
instead
of
PL/SQL
personally
descended
deeply
into
the
world
of
geekdom
this
week
have
in
other
words
been
writing
code
Ive
been
doing
this
because
here
at
Starbellycom
an
Internet
startup
in
Chicago
at
which
play
the
role
of
Starcoach
a
combination
are
investigating
the
use
of
a
utility
Ive
been
building
called
GenX
It
is
a
code
generator
and
it
looks
like
we
may
be
able
to
use
it
here
at
to
generate
Enterprise
Java
Beans
for
tables
Didnt
mention
the
word
geek
wont
take
the
time/space
here
to
try
to
explain
EJBs
but
thought
you
might
find
it
curious
to
hear
about
the
sorts
of
arcane
details
we
developers
find
ourselves
addressing
In
this
case
found
that
needed
to
enhance
GenX
so
that
it
would
convert
Oracle
names
which
are
all
in
upper
case
to
Java
names
which
follow
a
very
different
standard
For
example
have
a
column
in
the
table
called
Many
people
have
argued
that
names
all
in
upper
or
lower
case
are
hard
to
read
One
solution
followed
in
the
world
of
Oracle
and
PL/SQL
a
case-insensitive
language
is
to
characters
like
underscore
to
separate
words
leading
to
column
names
like
The
approach
in
the
world
of
Java
and
Visual
Basic
and
other
languages
is
very
different
Forget
those
underscores
Forget
blocky
IBM-like
upper
case
Instead
we
will
use
names
like
That
seems
like
a
fine
idea
It
is
readable
and
non-computer
like
Great
Except
that
this
means
that
have
to
transform
a
name
like
to
which
exactly
a
trivial
task
learned
long
ago
however
that
you
get
anywhere
by
only
tackling
trivial
tasks
So
tackled
this
one
wrote
some
code
and
came
up
with
a
workable
solution
Arent
you
proud
of
me
hope
so
and
if
anyone
wants
to
hear
about
the
gory
details
of
the
algorithms
used
to
solve
my
problem
just
ask
Need
a
Glossary
Oracle
stores
each
Java
class
in
the
database
as
a
schema
object
The
name
of
that
object
is
derived
from
but
is
not
the
same
as
the
fully
qualified
name
of
the
class
this
name
includes
the
names
of
any
containing
packages
The
full
name
of
the
class
for
example
is
as
follows
In
the
database
however
the
full
name
of
the
Java
schema
object
would
be
as
follows
Once
stored
in
the
Oracle
RDBMS
in
other
words
slashes
replace
dots
An
object
name
in
Oracle
whether
it
is
the
name
of
a
database
table
or
a
Java
class
cannot
be
longer
than
30
characters
Java
does
not
have
the
same
restriction
you
can
have
much
longer
names
Oracle
will
allow
you
to
load
a
Java
class
into
Oracle
with
a
name
of
up
to
4000
characters
If
the
Java
element
name
has
more
than
30
characters
Oracle
will
automatically
generate
a
valid
less
than
31
characters
alias
or
short
name
for
that
element
But
worry
You
ever
have
to
reference
that
alias
You
can
instead
continue
to
use
the
real
name
for
your
Java
element
in
your
code
Oracle
will
map
that
long
name
automatically
to
its
alias
the
schema
name
when
necessary
Oracle
does
on
the
other
hand
provide
a
function
to
obtain
the
full
or
long
name
for
a
given
short
name
FUNCTION
shortname
RETURN
The
following
query
stored
in
displays
the
long
name
for
all
Java
classes
defined
in
the
currently
connected
schema
for
which
the
long
name
and
short
names
do
not
match
SELECT
This
query
is
also
available
inside
the
package
found
in
the
file
whose
use
is
shown
below
Suppose
that
define
a
class
with
this
name
public
class
That
is
too
long
for
Oracle
and
we
can
verify
that
Oracle
creates
its
own
short
name
as
follows
the
procedures
is
built
upon
the
previous
query
exec
Short
Name
|
Long
Name
Short
Examining
Loaded
Java
Elements
Once
you
have
loaded
Java
source
class
and
resource
elements
into
the
database
information
about
those
elements
are
available
in
several
different
data
dictionary
views
header
information
about
your
objects
Of
JAVA
SOURCE
JAVA
CLASS
and
JAVA
RESOURCE
types
any
compilation
errors
encountered
for
your
objects
the
source
code
for
your
Java
source
if
and
only
if
you
used
the
CREATE
JAVA
SOURCE
command
to
create
the
Java
schema
object
You
can
write
queries
against
these
views
or
you
can
build
programs
to
access
the
information
in
a
variety
of
useful
ways
Here
for
example
is
a
query
that
shows
me
all
of
the
Java-related
objects
in
my
schema
The
WHERE
clause
filters
out
those
objects
created
by
Oracle
for
managing
Java
objects
Here
is
some
sample
output
The
file
contains
a
packaged
version
of
the
above
query
allowing
you
to
view
your
Java
objects
with
this
procedure
call
exec
The
following
lets
you
see
a
list
of
all
the
Java
elements
whose
names
start
with
OE
SQL>
exec
column
contains
the
full
names
of
Java
schema
objects
unless
name
is
longer
than
30
characters
or
contains
an
untranslatable
character
from
the
UNICODE
character
set
In
this
case
the
short
name
is
displayed
in
the
object_name
column
To
convert
short
names
to
full
names
you
can
use
the
function
longname
in
the
utility
package
DBMS_JAVA
which
is
explored
in
the
next
section
Some
things
to
keep
in
mind
about
Java
schema
elements
stored
in
the
database
qWhen
you
use
the
loadjava
command
to
load
your
Java
element
into
the
database
the
source
of
your
Java
element
is
not
transferred
to
Oracle
Only
the
class
jar
zip
java
etc
files
are
moved
into
the
database
qIf
you
use
the
CREATE
JAVA
DDL
command
then
the
source
for
your
Java
element
is
stored
in
the
database
you
will
then
find
an
entry
in
your
as
well
as
for
that
element
with
type
JAVA
SOURCE
You
can
then
use
the
procedure
to
extract
that
source
into
PL/SQL
data
structures
and
display
or
manipulate
the
text
See
the
next
section
for
an
example
of
such
a
procedure
the
file
Exporting
Java
from
the
RDBMS
Oracles
package
offers
a
set
of
procedures
to
export
source
classes
and
resources
In
general
you
will
use
these
procedures
to
export
the
Java
component
into
a
BLOB
or
CLOB
large
object
The
following
prototype
procedure
offers
an
idea
of
how
you
might
use
the
export
programs
to
obtain
source
code
of
your
Java
schema
objects
when
appropriate
If
then
create
a
Java
source
object
using
the
can
view
the
source
code
as
shown
below
assuming
DBMS_OUTPUT
has
been
enabled
Note
that
you
cannot
export
a
class
into
a
CLOB
only
a
BLOB
In
addition
the
internal
representation
of
the
source
uses
UTF8
so
that
format
is
used
to
store
the
source
in
the
BLOB
as
well
Enabling
Output
from
Java
The
Systemout
and
Systemerr
classes
send
their
output
to
the
current
trace
files
when
executed
within
the
Oracle
database
This
is
certainly
not
a
very
convenient
repository
if
you
simply
want
to
test
your
code
to
see
if
it
is
working
properly
DBMS_JAVA
supplies
a
procedure
you
can
call
to
redirect
output
to
the
DBMS_OUTPUT
text
buffer
so
that
it
can
be
flushed
to
your
SQL*Plus
screen
automatically
The
syntax
of
this
procedure
is
PROCEDURE
DBMS_JAVAset_output
buffersize
NUMBER
And
here
is
an
example
of
how
you
would
use
this
program
SET
SERVEROUTPUT
ON
SIZE
1000000
CALL
DBMS_JAVASET_OUTPUT
Documentation
on
the
interaction
between
these
two
commands
is
skimpy
my
testing
has
uncovered
the
following
rules
·The
minimum
and
default
buffer
size
is
a
measly
2000
bytes
the
maximum
size
is
1000000
bytes
You
can
pass
a
number
outside
of
that
range
without
causing
an
error
unless
the
number
is
really
big
it
will
simply
be
ignored
·The
buffer
size
specified
by
SET
SERVEROUTPUT
supersedes
that
of
DBMS_JAVASET_OUTPUT
If
in
other
words
you
provide
a
smaller
value
for
the
DBMS_JAVA
call
it
will
be
ignored
and
the
larger
size
used
If
your
output
in
Java
exceeds
the
buffer
size
you
will
not
receive
the
error
you
get
with
namely
buffer
overflow
limit
of
bytes
The
output
will
instead
be
truncated
to
the
buffer
size
specified
and
execution
of
your
code
will
continue
As
is
the
case
with
DBMS_OUTPUT
you
will
not
see
any
output
from
your
Java
calls
until
the
stored
procedure
through
which
they
are
called
finishes
executing
Exception
Handling
with
Java
On
the
one
hand
the
Java
exception
handling
architecture
is
very
similar
to
that
of
PL/SQL
In
Java-speak
you
throw
an
exception
and
then
catch
it
In
PL/SQL-speak
you
raise
exception
and
then
handle
it
On
the
other
hand
exception
handling
in
Java
is
much
more
robust
Java
offers
a
foundation
class
called
Exception
All
exceptions
are
objects
based
on
that
class
or
on
classes
dervied
from
extending
Exception
You
can
pass
exceptions
as
parameters
and
manipulate
them
pretty
much
like
objects
of
any
other
class
When
a
Java
stored
method
executes
a
SQL
statement
and
an
exception
is
thrown
then
that
exception
is
an
object
from
a
subclass
of
javasqlSQLException
That
class
contains
two
methods
that
return
the
Oracle
error
code
and
error
message
getErrorCode
and
getMessage
If
a
Java
stored
procedure
called
from
SQL
or
PL/SQL
throws
an
exception
that
is
not
caught
by
the
JVM
the
caller
gets
an
exception
thrown
from
a
Java
error
message
This
is
how
all
uncaught
exceptions
including
exceptions
are
reported
Lets
take
a
look
at
different
ways
of
handling
errors
and
the
resulting
output
Suppose
that
create
a
class
that
relies
on
JDBC
to
drop
objects
in
the
database
this
is
drawn
from
an
example
in
Oracle
documentation
Of
course
it
doesnt
really
make
any
sense
to
rely
on
JDBC
to
perform
a
drop
object
action
since
this
can
be
done
much
more
easily
in
native
PL/SQL
Building
it
in
Java
does
on
the
other
hand
make
the
functionality
available
to
other
Java
programs
The
above
version
traps
and
displays
any
with
this
line
catch
wrap
this
class
inside
a
PL/SQL
procedure
as
follows
When
attempt
to
drop
a
non-existent
object
will
see
one
of
following
two
outcomes
as
shown
below
procedure
successfully
completed
table
or
view
does
not
exist
What
you
are
seeing
there
is
a
reminder
that
output
from
will
not
appear
on
your
screen
until
you
explicitly
enable
it
with
a
call
to
In
either
case
however
no
exception
was
raised
back
to
the
calling
block
since
it
was
caught
inside
Java
After
the
second
call
to
dropany
you
can
see
that
the
error
message
supplied
through
the
getMessage
method
is
that
taken
directly
from
Oracle
If
comment
out
the
try
and
catch
lines
in
the
method
will
get
very
different
behavior
as
shown
below
Java
call
terminated
by
uncaught
Java
exception
javasqlSQLException
ORA-00942
table
or
view
does
not
exist
This
takes
a
little
explaining
Everything
between
represents
an
error
stack
dump
generated
by
Java
and
sent
to
standard
output
regardless
of
how
you
handle
the
error
in
PL/SQL
In
other
words
even
if
my
exception
section
looked
like
this
EXCEPTION
WHEN
OTHERS
THEN
NULL
would
still
get
all
that
output
to
the
screen
and
then
processing
in
the
outer
block
if
any
would
continue
The
last
three
lines
of
output
displayed
are
generated
by
the
calls
to
Notice
that
the
Oracle
error
is
not
but
instead
is
a
generic
Java
error
This
is
a
problem
If
you
trap
the
error
how
can
you
discover
what
the
real
error
is
Looks
like
its
time
for
Man
It
appears
to
me
that
the
error
returned
by
SQLERRM
is
of
this
form
ORA-29532
Java
call
So
can
scan
for
the
presence
of
and
then
SUBSTR
from
there
Here
is
a
procedure
which
returns
the
error
code
and
message
for
the
current
error
building
in
the
smarts
to
compensate
for
the
Java
error
message
format
The
following
block
demonstrates
how
might
use
this
procedure
it
relies
on
the
log81
package
created
by
the
log81pkg
to
write
the
error
information
to
the
log
Even
though
am
saving
error
information
to
the
database
log
table
the
Java
exception
stack
will
still
be
returned
to
the
host
session
If
for
example
were
running
the
script
in
SQL*Plus
the
Java
exception
stack
would
be
displayed
on
the
screen
Easing
the
Integration
The
topics
covered
in
this
article
review
some
tools
and
guidelines
for
integration
of
Java-based
functionality
into
existing
Oracle
PL/SQL
environments
While
it
is
unlikely
that
current
Oracle
shops
will
move
wholesale
to
Java
anytime
soon
many
of
us
will
want
to
leverage
Java
as
soon
as
possible
hope
that
the
information
in
this
article
allows
you
to
do
this
more
efficiently
and
effectively
About
the
Author
Steven
Feuerstein
is
considered
one
of
the
worlds
leading
experts
on
the
Oracle
PL/SQL
language
He
is
author
of
four
highly-regarded
texts
on
PL/SQL
Oracle
PL/SQL
Programming
Advanced
Oracle
PL/SQL
Programming
with
Packages
Oracle
Built-in
Packages
and
Oracle
Programming
Guide
to
all
published
by
OReilly
and
Associates
This
article
is
drawn
from
Chapter
9
of
his
When
Steven
is
not
writing
about
he
builds
developer
utilities
for
Inc
He
also
consults
and
trains
on
this
popular
database
programming
language
through